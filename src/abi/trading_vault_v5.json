{
  "address": "0xE12854AB5a769d6F150BD04C5a11d88542367C82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBurnt",
          "type": "uint256"
        }
      ],
      "name": "Depleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFeeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "ReceivedFromTrader",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensMinted",
          "type": "uint256"
        }
      ],
      "name": "Refilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "ToClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accDaiPerDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accMaticPerDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "backend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leverageUnlocked",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralRewardsTotal",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.Trader",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeDai",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterfaceV5.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.PendingMarketOrder[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[][5]",
          "name": "",
          "type": "uint256[][5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksBaseDeplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksBaseRefill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentBalanceDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "blocksBetweenDepletes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentBalanceDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "blocksBetweenRefills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksMinDeplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coeffDepleteP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalanceDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "daiToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depleteLiqP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeRewardDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "name": "distributeRewardMatic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActionBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBalanceDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWithdrawP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewardDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewardMatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerRefill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vaultFee",
          "type": "uint256"
        }
      ],
      "name": "receiveDaiFromTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refillLiqP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsMatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendDaiToTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksBaseDeplete",
          "type": "uint256"
        }
      ],
      "name": "setBlocksBaseDeplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksBaseRefill",
          "type": "uint256"
        }
      ],
      "name": "setBlocksBaseRefill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksMinDeplete",
          "type": "uint256"
        }
      ],
      "name": "setBlocksMinDeplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coeffDepleteP",
          "type": "uint256"
        }
      ],
      "name": "setCoeffDepleteP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depleteLiqP",
          "type": "uint256"
        }
      ],
      "name": "setDepleteLiqP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxWithdrawP",
          "type": "uint256"
        }
      ],
      "name": "setMaxWithdrawP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_powerRefill",
          "type": "uint256"
        }
      ],
      "name": "setPowerRefill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_refillLiqP",
          "type": "uint256"
        }
      ],
      "name": "setRefillLiqP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapFeeP",
          "type": "uint256"
        }
      ],
      "name": "setSwapFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thresholdDepleteP",
          "type": "uint256"
        }
      ],
      "name": "setThresholdDepleteP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawTimelock",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thresholdDepleteP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daiDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDaiDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtMatic",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb393ec98da98077060f7c360bcf2d9fed87e181850b0f394c36e959318ce0a8a",
  "receipt": {
    "to": null,
    "from": "0x284f1b4a9C4B9495F79de62a55337e0a07cCF3fF",
    "contractAddress": "0xE12854AB5a769d6F150BD04C5a11d88542367C82",
    "transactionIndex": 14,
    "gasUsed": "3833568",
    "logsBloom": "0x
    "blockHash": "0xa2488fab7b4a2dda3f71f6efe149e7c8063256f2f49e747a1566828644a61874",
    "transactionHash": "0xb393ec98da98077060f7c360bcf2d9fed87e181850b0f394c36e959318ce0a8a",
    "logs": [],
    "blockNumber": 30988698,
    "cumulativeGasUsed": "8842345",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x896875b453161e89660F89e6D9dDe935c793aDe8"],
  "numDeployments": 1,
  "solcInputHash": "d9e911b7c48c581ed924bf1d179fe035",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurnt\",\"type\":\"uint256\"}],\"name\":\"Depleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFeeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"ReceivedFromTrader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"Refilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"ToClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accDaiPerDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accMaticPerDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"backend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leverageUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralRewardsTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trader\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.PendingMarketOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][5]\",\"name\":\"\",\"type\":\"uint256[][5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksBaseDeplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksBaseRefill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentBalanceDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"blocksBetweenDepletes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentBalanceDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"blocksBetweenRefills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksMinDeplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coeffDepleteP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalanceDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daiToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depleteLiqP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewardDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"distributeRewardMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBalanceDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerRefill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"}],\"name\":\"receiveDaiFromTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillLiqP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDaiToTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksBaseDeplete\",\"type\":\"uint256\"}],\"name\":\"setBlocksBaseDeplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksBaseRefill\",\"type\":\"uint256\"}],\"name\":\"setBlocksBaseRefill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksMinDeplete\",\"type\":\"uint256\"}],\"name\":\"setBlocksMinDeplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coeffDepleteP\",\"type\":\"uint256\"}],\"name\":\"setCoeffDepleteP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depleteLiqP\",\"type\":\"uint256\"}],\"name\":\"setDepleteLiqP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawP\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerRefill\",\"type\":\"uint256\"}],\"name\":\"setPowerRefill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refillLiqP\",\"type\":\"uint256\"}],\"name\":\"setRefillLiqP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFeeP\",\"type\":\"uint256\"}],\"name\":\"setSwapFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdDepleteP\",\"type\":\"uint256\"}],\"name\":\"setThresholdDepleteP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawTimelock\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdDepleteP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDaiDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtMatic\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GNSTradingVaultV5.sol\":\"GNSTradingVaultV5\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/GNSTradingVaultV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './interfaces/StorageInterfaceV5.sol';\\npragma solidity 0.8.14;\\n\\ncontract GNSTradingVaultV5{\\n\\n    uint public constant PRECISION = 1e5;\\n    StorageInterfaceV5 public immutable storageT;\\n\\n    // Distribute MATIC ?\\n    address public constant rewardDistributor = 0xC66FbE50Dd33c9AAdd65707F7088D597C86fE00F;\\n\\n    // PARAMS\\n    // 1. Refill\\n    uint public blocksBaseRefill = 2500;    // block\\n    uint public refillLiqP = 0.1 * 1e5;     // PRECISION (%)\\n    uint public powerRefill = 5;            // no decimal    \\n\\n    // 2. Deplete\\n    uint public blocksBaseDeplete = 10000;  // block\\n    uint public blocksMinDeplete = 2000;    // block\\n    uint public depleteLiqP = 0.3 * 1e5;    // PRECISION (%)\\n    uint public coeffDepleteP = 100;        // %\\n    uint public thresholdDepleteP = 10;     // %\\n\\n    // 3. Staking\\n    uint public withdrawTimelock = 43200;   // blocks\\n    uint public maxWithdrawP = 25;          // %\\n\\n    // 4. Trading\\n    uint public swapFeeP = 0.3 * 1e5;       // PRECISION (%)\\n\\n    // STATE\\n    // 1. DAI balance\\n    uint public maxBalanceDai;      // 1e18\\n    uint public currentBalanceDai;  // 1e18\\n    uint public lastActionBlock;    // block\\n\\n    // 2. DAI staking rewards\\n    uint public accDaiPerDai;       // 1e18\\n    uint public rewardsDai;         // 1e18\\n\\n    // 3. MATIC staking rewards\\n    uint public maticPerBlock;      // 1e18\\n    uint public accMaticPerDai;     // 1e18\\n    uint public maticStartBlock;    // 1e18\\n    uint public maticEndBlock;      // 1e18\\n    uint public maticLastRewardBlock;     // 1e18\\n    uint public rewardsMatic;       // 1e18\\n\\n    // 4. Mappings\\n    struct User{\\n        uint daiDeposited;\\n        uint maxDaiDeposited;\\n        uint withdrawBlock;\\n        uint debtDai;\\n        uint debtMatic;\\n    }\\n    mapping(address => User) public users;\\n    mapping(address => uint) public daiToClaim;\\n\\n    // EVENTS\\n    event Deposited(address caller,  uint amount, uint newCurrentBalanceDai, uint newMaxBalanceDai);\\n    event Withdrawn(address caller, uint amount, uint newCurrentBalanceDai, uint newMaxBalanceDai);\\n    event Sent(address caller, address trader, uint amount,uint newCurrentBalanceDai, uint maxBalanceDai);\\n    event ToClaim(address caller, address trader, uint amount,uint currentBalanceDai, uint maxBalanceDai);\\n    event Claimed(address trader, uint amount, uint newCurrentBalanceDai, uint maxBalanceDai);\\n    event Refilled(address caller, uint daiAmount, uint newCurrentBalanceDai, uint maxBalanceDai, uint tokensMinted);\\n    event Depleted(address caller, uint daiAmount, uint newCurrentBalanceDai, uint maxBalanceDai, uint tokensBurnt);\\n    event ReceivedFromTrader(address caller, address trader, uint daiAmount, uint vaultFeeDai, uint newCurrentBalanceDai, uint maxBalanceDai);\\n    event AddressUpdated(string name, address a);\\n    event NumberUpdated(string name, uint value);\\n\\n    constructor(StorageInterfaceV5 _storageT){ \\n        require(address(_storageT) != address(0), \\\"ADDRESS_0\\\");\\n        storageT = _storageT;\\n    }\\n\\n    modifier onlyGov(){ require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\"); _; }\\n    modifier onlyCallbacks(){ require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\"); _; }\\n\\n    // Manage state\\n    function setBlocksBaseRefill(uint _blocksBaseRefill) external onlyGov{\\n        require(_blocksBaseRefill >= 1000, \\\"BELOW_1000\\\");\\n        blocksBaseRefill = _blocksBaseRefill;\\n        emit NumberUpdated(\\\"blocksBaseRefill\\\", _blocksBaseRefill);\\n    }\\n    function setBlocksBaseDeplete(uint _blocksBaseDeplete) external onlyGov{\\n        require(_blocksBaseDeplete >= 1000, \\\"BELOW_1000\\\");\\n        blocksBaseDeplete = _blocksBaseDeplete;\\n        emit NumberUpdated(\\\"blocksBaseDeplete\\\", _blocksBaseDeplete);\\n    }\\n    function setBlocksMinDeplete(uint _blocksMinDeplete) external onlyGov{\\n        require(_blocksMinDeplete >= 1000, \\\"BELOW_1000\\\");\\n        blocksMinDeplete = _blocksMinDeplete;\\n        emit NumberUpdated(\\\"blocksMinDeplete\\\", _blocksMinDeplete);\\n    }\\n    function setRefillLiqP(uint _refillLiqP) external onlyGov{\\n        require(_refillLiqP > 0, \\\"VALUE_0\\\");\\n        require(_refillLiqP <= 3*PRECISION/10, \\\"ABOVE_0_POINT_3\\\");\\n        refillLiqP = _refillLiqP;\\n        emit NumberUpdated(\\\"refillLiqP\\\", _refillLiqP);\\n    }\\n    function setDepleteLiqP(uint _depleteLiqP) external onlyGov{\\n        require(_depleteLiqP > 0, \\\"VALUE_0\\\");\\n        require(_depleteLiqP <= 3*PRECISION/10, \\\"ABOVE_0_POINT_3\\\");\\n        depleteLiqP = _depleteLiqP;\\n        emit NumberUpdated(\\\"depleteLiqP\\\", _depleteLiqP);\\n    }\\n    function setPowerRefill(uint _powerRefill) external onlyGov{\\n        require(_powerRefill >= 2, \\\"BELOW_2\\\");\\n        require(_powerRefill <= 10, \\\"ABOVE_10\\\");\\n        powerRefill = _powerRefill;\\n        emit NumberUpdated(\\\"powerRefill\\\", _powerRefill);\\n    }\\n    function setCoeffDepleteP(uint _coeffDepleteP) external onlyGov{\\n        coeffDepleteP = _coeffDepleteP;\\n        emit NumberUpdated(\\\"coeffDepleteP\\\", _coeffDepleteP);\\n    }\\n    function setThresholdDepleteP(uint _thresholdDepleteP) external onlyGov{\\n        require(_thresholdDepleteP <= 100, \\\"ABOVE_100\\\");\\n        thresholdDepleteP = _thresholdDepleteP;\\n        emit NumberUpdated(\\\"thresholdDepleteP\\\", _thresholdDepleteP);\\n    }\\n    function setSwapFeeP(uint _swapFeeP) external onlyGov{\\n        require(_swapFeeP <= PRECISION, \\\"ABOVE_1\\\");\\n        swapFeeP = _swapFeeP;\\n        emit NumberUpdated(\\\"swapFeeP\\\", _swapFeeP);\\n    }\\n    function setWithdrawTimelock(uint _withdrawTimelock) external onlyGov{\\n        require(_withdrawTimelock > 43200, \\\"LESS_THAN_1_DAY\\\");\\n        withdrawTimelock = _withdrawTimelock;\\n        emit NumberUpdated(\\\"withdrawTimelock\\\", _withdrawTimelock);\\n    }\\n    function setMaxWithdrawP(uint _maxWithdrawP) external onlyGov{\\n        require(_maxWithdrawP >= 10, \\\"BELOW_10\\\");\\n        require(_maxWithdrawP <= 100, \\\"ABOVE_100\\\");\\n        maxWithdrawP = _maxWithdrawP;\\n        emit NumberUpdated(\\\"maxWithdrawP\\\", _maxWithdrawP);\\n    }\\n\\n    // Refill\\n    function refill() external{\\n        // require(currentBalanceDai < maxBalanceDai, \\\"ALREADY_FULL\\\");\\n        // require(block.number >= lastActionBlock + blocksBetweenRefills(currentBalanceDai, maxBalanceDai), \\\"TOO_EARLY\\\");\\n\\n        // (uint tokenReserve, ) = storageT.priceAggregator().tokenDaiReservesLp();\\n        // uint tokensToMint = tokenReserve*refillLiqP/100/PRECISION;\\n\\n        // storageT.handleTokens(address(this), tokensToMint, true);\\n\\n        // address[] memory tokenToDaiPath = new address[](2);\\n        // tokenToDaiPath[0] = address(storageT.token());\\n        // tokenToDaiPath[1] = address(storageT.dai());\\n\\n        // storageT.token().approve(address(storageT.tokenDaiRouter()), tokensToMint);\\n        // uint[] memory amounts = storageT.tokenDaiRouter().swapExactTokensForTokens(\\n        //     tokensToMint,\\n        //     0,\\n        //     tokenToDaiPath,\\n        //     address(this),\\n        //     block.timestamp + 300\\n        // );\\n\\n        // currentBalanceDai += amounts[1];\\n        // lastActionBlock = block.number;\\n\\n        // emit Refilled(msg.sender, amounts[1], currentBalanceDai, maxBalanceDai, tokensToMint);\\n    }\\n    function blocksBetweenRefills(uint _currentBalanceDai, uint _maxBalanceDai) public view returns(uint){\\n        uint blocks = (_currentBalanceDai*PRECISION/_maxBalanceDai)**powerRefill*blocksBaseRefill/(PRECISION**powerRefill);\\n        return blocks >= 1 ? blocks : 1;\\n    }\\n\\n    // Deplete\\n    function deplete() external{\\n        // require(currentBalanceDai > maxBalanceDai*(100+thresholdDepleteP)/100, \\\"NOT_FULL\\\");\\n        // require(block.number >= lastActionBlock + blocksBetweenDepletes(currentBalanceDai, maxBalanceDai), \\\"TOO_EARLY\\\");\\n\\n        // (, uint daiReserve) = storageT.priceAggregator().tokenDaiReservesLp();\\n        // uint daiToBuy = daiReserve*depleteLiqP/100/PRECISION;\\n\\n        // address[] memory daiToTokenPath = new address[](2);\\n        // daiToTokenPath[0] = address(storageT.dai());\\n        // daiToTokenPath[1] = address(storageT.token());\\n\\n        // require(storageT.dai().approve(address(storageT.tokenDaiRouter()), daiToBuy));\\n        // uint[] memory amounts = storageT.tokenDaiRouter().swapExactTokensForTokens(\\n        //     daiToBuy,\\n        //     0,\\n        //     daiToTokenPath,\\n        //     address(this),\\n        //     block.timestamp + 300\\n        // );\\n\\n        // storageT.handleTokens(address(this), amounts[1], false);\\n\\n        // currentBalanceDai -= daiToBuy;\\n        // lastActionBlock = block.number;\\n\\n        // emit Depleted(msg.sender, daiToBuy, currentBalanceDai, maxBalanceDai, amounts[1]);\\n    }\\n    function blocksBetweenDepletes(uint _currentBalanceDai, uint _maxBalanceDai) public view returns(uint){\\n        uint blocks = blocksBaseDeplete - (100*_currentBalanceDai - _maxBalanceDai*(100+thresholdDepleteP))*coeffDepleteP/_currentBalanceDai;\\n        return blocks >= blocksMinDeplete ? blocks : blocksMinDeplete;\\n    }\\n\\n    // Staking (user interaction)\\n    function harvest() public{\\n        User storage u = users[msg.sender];\\n\\n        require(storageT.dai().transfer(msg.sender, pendingRewardDai()));\\n        u.debtDai = u.daiDeposited * accDaiPerDai / 1e18;\\n\\n        uint pendingMatic = pendingRewardMatic();\\n        accMaticPerDai = pendingAccMaticPerDai();\\n        maticLastRewardBlock = block.number;\\n        u.debtMatic = u.daiDeposited * accMaticPerDai / 1e18;\\n        payable(msg.sender).transfer(pendingMatic);\\n    }\\n    function depositDai(uint _amount) external{\\n        User storage user = users[msg.sender];\\n\\n        require(_amount > 0, \\\"AMOUNT_0\\\");\\n        require(storageT.dai().transferFrom(msg.sender, address(this), _amount));\\n\\n        harvest();\\n\\n        currentBalanceDai += _amount;\\n        maxBalanceDai += _amount;\\n\\n        user.daiDeposited += _amount;\\n        user.maxDaiDeposited = user.daiDeposited;\\n        user.debtDai = user.daiDeposited * accDaiPerDai / 1e18;\\n        user.debtMatic = user.daiDeposited * accMaticPerDai / 1e18;\\n\\n        emit Deposited(msg.sender, _amount, currentBalanceDai, maxBalanceDai);\\n    }\\n    function withdrawDai(uint _amount) external{\\n        User storage user = users[msg.sender];\\n\\n        require(_amount > 0, \\\"AMOUNT_0\\\");\\n        require(_amount <= currentBalanceDai, \\\"BALANCE_TOO_LOW\\\");\\n        require(_amount <= user.daiDeposited, \\\"WITHDRAWING_MORE_THAN_DEPOSITED\\\");\\n        require(_amount <= user.maxDaiDeposited * maxWithdrawP / 100, \\\"MAX_WITHDRAW_P\\\");\\n        require(block.number >= user.withdrawBlock + withdrawTimelock, \\\"TOO_EARLY\\\");\\n\\n        harvest();\\n\\n        currentBalanceDai -= _amount;\\n        maxBalanceDai -= _amount;\\n\\n        user.daiDeposited -= _amount;\\n        user.withdrawBlock = block.number;\\n        user.debtDai = user.daiDeposited * accDaiPerDai / 1e18;\\n        user.debtMatic = user.daiDeposited * accMaticPerDai / 1e18;\\n\\n        require(storageT.dai().transfer(msg.sender, _amount));\\n\\n        emit Withdrawn(msg.sender, _amount, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // MATIC incentives\\n    function distributeRewardMatic(uint _startBlock, uint _endBlock) external payable{\\n        require(msg.sender == rewardDistributor, \\\"WRONG_CALLER\\\");\\n        require(msg.value > 0, \\\"AMOUNT_0\\\");\\n        require(_startBlock < _endBlock, \\\"START_AFTER_END\\\");\\n        require(_startBlock > block.number, \\\"START_BEFORE_NOW\\\");\\n        require(_endBlock - _startBlock >= 100000, \\\"TOO_SHORT\\\");\\n        require(_endBlock - _startBlock <= 1500000, \\\"TOO_LONG\\\");\\n        require(block.number > maticEndBlock, \\\"LAST_MATIC_DISTRIBUTION_NOT_ENDED\\\");\\n        require(maxBalanceDai > 0, \\\"NO_DAI_STAKED\\\");\\n\\n        accMaticPerDai = pendingAccMaticPerDai();\\n        rewardsMatic += msg.value;\\n        maticLastRewardBlock = 0;\\n\\n        maticPerBlock = msg.value / (_endBlock - _startBlock);\\n        maticStartBlock = _startBlock;\\n        maticEndBlock = _endBlock;\\n    }\\n    function pendingAccMaticPerDai() view private returns(uint){\\n        if(maxBalanceDai == 0){ return accMaticPerDai; }\\n        \\n        uint pendingRewardBlocks = 0;\\n        if(block.number > maticStartBlock){\\n            if(block.number <= maticEndBlock){\\n                pendingRewardBlocks = maticLastRewardBlock == 0 ? block.number - maticStartBlock : block.number - maticLastRewardBlock;\\n            }else if(maticLastRewardBlock <= maticEndBlock){\\n                pendingRewardBlocks = maticLastRewardBlock == 0 ? maticEndBlock - maticStartBlock : maticEndBlock - maticLastRewardBlock;\\n            }\\n        }\\n        return accMaticPerDai + pendingRewardBlocks*maticPerBlock*1e18/maxBalanceDai;\\n    }\\n    function pendingRewardMatic() public view returns(uint){\\n        User memory u = users[msg.sender];\\n        return u.daiDeposited * pendingAccMaticPerDai() / 1e18 - u.debtMatic;\\n    }\\n\\n    // DAI incentives\\n    function distributeRewardDai(uint _amount) public onlyCallbacks{        \\n        if(maxBalanceDai > 0){\\n            currentBalanceDai -= _amount;\\n            accDaiPerDai += _amount * 1e18 / maxBalanceDai;\\n            rewardsDai += _amount;\\n        }\\n    }\\n    function pendingRewardDai() public view returns(uint){\\n        User memory u = users[msg.sender];\\n        return u.daiDeposited * accDaiPerDai / 1e18 - u.debtDai;\\n    }\\n\\n    // Handle traders DAI when a trade is closed\\n    function sendDaiToTrader(address _trader, uint _amount) external onlyCallbacks{\\n        _amount -= swapFeeP * _amount / 100 / PRECISION;\\n\\n        if(_amount <= currentBalanceDai){\\n            currentBalanceDai -= _amount;\\n            require(storageT.dai().transfer(_trader, _amount));\\n            emit Sent(msg.sender, _trader, _amount, currentBalanceDai, maxBalanceDai);\\n        }else{\\n            daiToClaim[_trader] += _amount;\\n            emit ToClaim(msg.sender, _trader, _amount, currentBalanceDai, maxBalanceDai);\\n        }\\n    }\\n    function claimDai() external{\\n        uint amount = daiToClaim[msg.sender];\\n        require(amount > 0, \\\"NOTHING_TO_CLAIM\\\");\\n        require(currentBalanceDai > amount, \\\"BALANCE_TOO_LOW\\\");\\n\\n        currentBalanceDai -= amount;\\n        require(storageT.dai().transfer(msg.sender, amount));\\n        daiToClaim[msg.sender] = 0;\\n\\n        emit Claimed(msg.sender, amount, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // Handle DAI from opened trades\\n    function receiveDaiFromTrader(address _trader, uint _amount, uint _vaultFee) external onlyCallbacks{\\n        storageT.transferDai(address(storageT), address(this), _amount);\\n        currentBalanceDai += _amount;\\n\\n        distributeRewardDai(_vaultFee);\\n\\n        emit ReceivedFromTrader(msg.sender, _trader, _amount, _vaultFee, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // Useful backend function (ignore)\\n    function backend(address _trader) external view returns(uint,uint,uint,StorageInterfaceV5.Trader memory,uint[] memory, StorageInterfaceV5.PendingMarketOrder[] memory, uint[][5] memory){\\n        uint[] memory pendingIds = storageT.getPendingOrderIds(_trader);\\n\\n        StorageInterfaceV5.PendingMarketOrder[] memory pendingMarket = new StorageInterfaceV5.PendingMarketOrder[](pendingIds.length);\\n        for(uint i = 0; i < pendingIds.length; i++){\\n            pendingMarket[i] = storageT.reqID_pendingMarketOrder(pendingIds[i]);\\n        }\\n\\n        uint[][5] memory nftIds;\\n        for(uint j = 0; j < 5; j++){\\n            uint nftsCount = storageT.nfts(j).balanceOf(_trader);\\n            nftIds[j] = new uint[](nftsCount);\\n            for(uint i = 0; i < nftsCount; i++){ \\n                nftIds[j][i] = storageT.nfts(j).tokenOfOwnerByIndex(_trader, i); \\n            }\\n        }\\n\\n        return (\\n            storageT.dai().allowance(_trader, address(storageT)),\\n            storageT.dai().balanceOf(_trader),\\n            storageT.linkErc677().allowance(_trader, address(storageT)),\\n            storageT.traders(_trader),\\n            pendingIds, \\n            pendingMarket, \\n            nftIds\\n        );\\n    }\\n}\",\"keccak256\":\"0xf28b81c3f996db1a16be03e3926d641354e9b6c70dc9fb01d956efb17ee647c3\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xc15a2883e44dce70305e896f2492f485c77f1a01595a9bb42d2662a22cfa5274\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface PairsStorageInterfaceV6{\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n}\",\"keccak256\":\"0x74f54cf7593d734351ff34e0f86065cc89bb5a5b10b8618a9438d0ea2e4918a1\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './UniswapRouterInterfaceV5.sol';\\nimport './TokenInterfaceV5.sol';\\nimport './NftInterfaceV5.sol';\\nimport './VaultInterfaceV5.sol';\\nimport './PairsStorageInterfaceV6.sol';\\npragma solidity 0.8.14;\\n\\ninterface StorageInterfaceV5{\\n    enum LimitOrder { TP, SL, LIQ, OPEN }\\n    struct Trader{\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal;  // 1e18\\n    }\\n    struct Trade{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken;       // 1e18\\n        uint positionSizeDai;       // 1e18\\n        uint openPrice;             // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION\\n        uint sl;                    // PRECISION\\n    }\\n    struct TradeInfo{\\n        uint tokenId;\\n        uint tokenPriceDai;         // PRECISION\\n        uint openInterestDai;       // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize;          // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION (%)\\n        uint sl;                    // PRECISION (%)\\n        uint minPrice;              // PRECISION\\n        uint maxPrice;              // PRECISION\\n        uint block;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingMarketOrder{\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice;           // PRECISION\\n        uint slippageP;             // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingNftOrder{\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n    function PRECISION() external pure returns(uint);\\n    function gov() external view returns(address);\\n    function dev() external view returns(address);\\n    function dai() external view returns(TokenInterfaceV5);\\n    // function token() external view returns(TokenInterfaceV5);\\n    function linkErc677() external view returns(TokenInterfaceV5);\\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\\n    function priceAggregator() external view returns(AggregatorInterfaceV6);\\n    function vault() external view returns(VaultInterfaceV5);\\n    function trading() external view returns(address);\\n    function callbacks() external view returns(address);\\n    function handleTokens(address,uint,bool) external;\\n    function transferDai(address, address, uint) external;\\n    function transferLinkToAggregator(address, uint, uint) external;\\n    function unregisterTrade(address, uint, uint) external;\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n    function storeReferral(address, address) external;\\n    function openTrades(address, uint, uint) external view returns(Trade memory);\\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\\n    function updateSl(address, uint, uint, uint) external;\\n    function updateTp(address, uint, uint, uint) external;\\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\\n    function spreadReductionsP(uint) external view returns(uint);\\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\\n    function maxSlP() external view returns(uint);\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\\n    function increaseNftRewards(uint, uint) external;\\n    function nftSuccessTimelock() external view returns(uint);\\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\\n    function setNftLastSuccess(uint) external;\\n    function updateTrade(Trade memory) external;\\n    function nftLastSuccess(uint) external view returns(uint);\\n    function unregisterPendingNftOrder(uint) external;\\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\\n    function distributeLpRewards(uint) external;\\n    function getReferral(address) external view returns(address);\\n    function increaseReferralRewards(address, uint) external;\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n    function setLeverageUnlocked(address, uint) external;\\n    function getLeverageUnlocked(address) external view returns(uint);\\n    function openLimitOrdersCount(address, uint) external view returns(uint);\\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\\n    function openTradesCount(address, uint) external view returns(uint);\\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\\n    function maxTradesPerPair() external view returns(uint);\\n    function maxTradesPerBlock() external view returns(uint);\\n    function tradesPerBlock(uint) external view returns(uint);\\n    function pendingOrderIdsCount(address) external view returns(uint);\\n    function maxPendingMarketOrders() external view returns(uint);\\n    function maxGainP() external view returns(uint);\\n    function defaultLeverageUnlocked() external view returns(uint);\\n    function openInterestDai(uint, uint) external view returns(uint);\\n    function getPendingOrderIds(address) external view returns(uint[] memory);\\n    function traders(address) external view returns(Trader memory);\\n    function nfts(uint) external view returns(NftInterfaceV5);\\n}\\n\\ninterface AggregatorInterfaceV6{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function nftRewards() external view returns(NftRewardsInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceDai() external view returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function tokenDaiReservesLp() external view returns(uint, uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface NftRewardsInterfaceV6{\\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\\n}\",\"keccak256\":\"0x02c06cbb3f187939133f2c989e77a5e0b0d371444071f9a8d3ae1a3ed61fe865\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x839cb0952ddb74fd2cc563cbc511a7f4cec56599cb7cc3502f97c32327f2fe58\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface UniswapRouterInterfaceV5{\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x366be084acb30ed686cc7f4999f30568ebdb11e6cc5909c6b24f95092b4dbddf\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface VaultInterfaceV5{\\n\\tfunction sendDaiToTrader(address, uint) external;\\n\\tfunction receiveDaiFromTrader(address, uint, uint) external;\\n\\tfunction currentBalanceDai() external view returns(uint);\\n\\tfunction distributeRewardDai(uint) external;\\n}\",\"keccak256\":\"0xbbd6a93a058b4da7c2b5114ece35d743ef6099d928020835664169a0b5895825\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526109c460005561271060015560056002556127106003556107d06004556175306005556064600655600a60075561a8c06008556019600955617530600a553480156200004f57600080fd5b506040516200427c3803806200427c8339810160408190526200007291620000cb565b6001600160a01b038116620000b95760405162461bcd60e51b81526020600482015260096024820152680414444524553535f360bc1b604482015260640160405180910390fd5b6001600160a01b0316608052620000fd565b600060208284031215620000de57600080fd5b81516001600160a01b0381168114620000f657600080fd5b9392505050565b608051614091620001eb6000396000818161046d01528181610a8c01528181610bee01528181610d5401528181610eba01528181611076015281816111ee01528181611316015281816114fd015281816116be015281816118b301528181611a8b01528181611cc20152818161232801528181612470015281816125d40152818161273a015281816128da015281816129b301528181612ab801528181612c1401528181612d6601528181612e0501528181612e7c01528181612f6a015281816130090152818161309d01528181613121015281816132ea01528181613571015261365001526140916000f3fe6080604052600436106103485760003560e01c806367f4d930116101bb578063acc2166a116100f7578063d57f87f011610095578063e48b98e41161006f578063e48b98e414610901578063ebbaaacb146105d4578063f681834514610921578063fe80dd161461093657600080fd5b8063d57f87f0146108b5578063de816301146108cb578063e251a739146108e157600080fd5b8063c2a19c84116100d1578063c2a19c8414610836578063cdff43711461084c578063d4b46e0414610862578063d56207391461089557600080fd5b8063acc2166a146107d8578063b243fb0114610800578063be3c77d81461082057600080fd5b806393a991af11610164578063a6dc73181161013e578063a6dc731814610723578063a87430ba14610739578063a9d7f889146107ab578063aaf5eb68146107c157600080fd5b806393a991af146106c357806394b89bc2146106e35780639cdcdc6b1461070357600080fd5b806379fc31261161019557806379fc3126146106845780637cbf6f1c1461069a57806385d6f6f5146106ad57600080fd5b806367f4d930146106385780637144b6d61461065857806379c160361461066e57600080fd5b80631eefa7401161028a578063416df36611610233578063538e07591161020d578063538e0759146105d45780635cbd86cc146105e0578063620ed4fe146105f657806363caf47a1461062357600080fd5b8063416df36614610589578063423de639146105a95780634641257d146105bf57600080fd5b806335842f741161026457806335842f741461053d5780633aa934ab1461055d5780633ceaed961461057357600080fd5b80631eefa740146104dd578063214a9a33146104fd57806329f79a741461051d57600080fd5b80630851a202116102f75780630ba6070e116102d15780630ba6070e1461043b57806316fff0741461045b5780631a92d20c146104a75780631e2d87c8146104c757600080fd5b80630851a202146103ef5780630a923fea146104055780630b162d8a1461042557600080fd5b806305fac5601161032857806305fac560146103ac578063064cc89a146103c25780630661c6ce146103d957600080fd5b80627e0d131461034d5780628bd5941461037657806305cc435f14610396575b600080fd5b34801561035957600080fd5b5061036360005481565b6040519081526020015b60405180910390f35b34801561038257600080fd5b506103636103913660046138d7565b610956565b3480156103a257600080fd5b5061036360115481565b3480156103b857600080fd5b5061036360075481565b3480156103ce57600080fd5b506103d76109cc565b005b3480156103e557600080fd5b5061036360085481565b3480156103fb57600080fd5b50610363600c5481565b34801561041157600080fd5b506103d76104203660046138f9565b610bec565b34801561043157600080fd5b5061036360065481565b34801561044757600080fd5b506103d76104563660046138f9565b610d52565b34801561046757600080fd5b5061048f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161036d565b3480156104b357600080fd5b506103d76104c23660046138f9565b610eb8565b3480156104d357600080fd5b5061036360135481565b3480156104e957600080fd5b506103d76104f83660046138f9565b611074565b34801561050957600080fd5b506103d7610518366004613927565b6111ec565b34801561052957600080fd5b506103d76105383660046138f9565b6114fb565b34801561054957600080fd5b506103d76105583660046138f9565b611675565b34801561056957600080fd5b5061036360025481565b34801561057f57600080fd5b50610363600b5481565b34801561059557600080fd5b506103d76105a43660046138f9565b6118b1565b3480156105b557600080fd5b50610363600a5481565b3480156105cb57600080fd5b506103d7611a66565b3480156103d757600080fd5b3480156105ec57600080fd5b50610363600f5481565b34801561060257600080fd5b50610363610611366004613953565b60176020526000908152604090205481565b34801561062f57600080fd5b50610363611c3e565b34801561064457600080fd5b506103d76106533660046138f9565b611cc0565b34801561066457600080fd5b5061036360125481565b34801561067a57600080fd5b50610363600e5481565b34801561069057600080fd5b5061036360015481565b6103d76106a83660046138d7565b611de7565b3480156106b957600080fd5b5061036360105481565b3480156106cf57600080fd5b506103d76106de3660046138f9565b6120d4565b3480156106ef57600080fd5b506103d76106fe3660046138f9565b61246e565b34801561070f57600080fd5b506103d761071e3660046138f9565b6125d2565b34801561072f57600080fd5b50610363600d5481565b34801561074557600080fd5b50610783610754366004613953565b601660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161036d565b3480156107b757600080fd5b5061036360155481565b3480156107cd57600080fd5b50610363620186a081565b3480156107e457600080fd5b5061048f73c66fbe50dd33c9aadd65707f7088d597c86fe00f81565b34801561080c57600080fd5b506103d761081b3660046138f9565b612738565b34801561082c57600080fd5b5061036360055481565b34801561084257600080fd5b5061036360145481565b34801561085857600080fd5b5061036360035481565b34801561086e57600080fd5b5061088261087d366004613953565b61287b565b60405161036d9796959493929190613abd565b3480156108a157600080fd5b506103d76108b03660046138f9565b61311f565b3480156108c157600080fd5b5061036360045481565b3480156108d757600080fd5b5061036360095481565b3480156108ed57600080fd5b506103d76108fc3660046138f9565b6132e8565b34801561090d57600080fd5b5061036361091c3660046138d7565b6134a4565b34801561092d57600080fd5b50610363613506565b34801561094257600080fd5b506103d7610951366004613b6a565b61356f565b60008083600654600754606461096c9190613bb5565b6109769086613bcd565b610981876064613bcd565b61098b9190613bec565b6109959190613bcd565b61099f9190613c03565b6003546109ac9190613bec565b90506004548110156109c0576004546109c2565b805b9150505b92915050565b3360009081526017602052604090205480610a2e5760405162461bcd60e51b815260206004820152601060248201527f4e4f5448494e475f544f5f434c41494d0000000000000000000000000000000060448201526064015b60405180910390fd5b80600c5411610a715760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610a25565b80600c6000828254610a839190613bec565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0c9190613c25565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190613c57565b610b8857600080fd5b33600081815260176020908152604080832092909255600c54600b5483519485529184018590529183019190915260608201527f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e906080015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190613c25565b6001600160a01b0316336001600160a01b031614610cb95760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b6103e8811015610cf85760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610a25565b6000819055604080518181526010918101919091527f626c6f636b7342617365526566696c6c0000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190613c25565b6001600160a01b0316336001600160a01b031614610e1f5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b6103e8811015610e5e5760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610a25565b6004819055604080518181526010918101919091527f626c6f636b734d696e4465706c6574650000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a9190613c25565b6001600160a01b0316336001600160a01b031614610f855760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b60008111610fbf5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610a25565b600a610fcf620186a06003613bcd565b610fd99190613c03565b81111561101a5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610a25565b600181905560408051818152600a918101919091527f726566696c6c4c6971500000000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f69190613c25565b6001600160a01b0316336001600160a01b0316146111415760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b61a8c081116111925760405162461bcd60e51b815260206004820152600f60248201527f4c4553535f5448414e5f315f44415900000000000000000000000000000000006044820152606401610a25565b6008819055604080518181526010918101919091527f776974686472617754696d656c6f636b0000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d9190613c25565b6001600160a01b0316336001600160a01b0316146112be5760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610a25565b620186a0606482600a546112d29190613bcd565b6112dc9190613c03565b6112e69190613c03565b6112f09082613bec565b9050600c5481116114755780600c600082825461130d9190613bec565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190613c25565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af11580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b9190613c57565b61141457600080fd5b600c54600b54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f80b773cd8ea3bf97475bccfb129d2ad177499dd4b091fbf87669b370fffef58c9060a0015b60405180910390a15050565b6001600160a01b0382166000908152601760205260408120805483929061149d908490613bb5565b9091555050600c54600b54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f7a17f79bf8cde7a30daa7135b2d37fac6ebbf8097bc0d3d5697faf40fbb7efb49060a001611469565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190613c25565b6001600160a01b0316336001600160a01b0316146115c85760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b620186a081111561161b5760405162461bcd60e51b815260206004820152600760248201527f41424f56455f31000000000000000000000000000000000000000000000000006044820152606401610a25565b600a819055604080518181526008918101919091527f737761704665655000000000000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b336000908152601660205260409020816116bc5760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610a25565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173e9190613c25565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015611793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b79190613c57565b6117c057600080fd5b6117c8611a66565b81600c60008282546117da9190613bb5565b9250508190555081600b60008282546117f39190613bb5565b909155505080548290829060009061180c908490613bb5565b9091555050805460018201819055600e54670de0b6b3a7640000916118319190613bcd565b61183b9190613c03565b60038201556011548154670de0b6b3a76400009161185891613bcd565b6118629190613c03565b6004820155600c54600b5460408051338152602081018690529081019290925260608201527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada390608001611469565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561190f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119339190613c25565b6001600160a01b0316336001600160a01b03161461197e5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600a8110156119cf5760405162461bcd60e51b815260206004820152600860248201527f42454c4f575f31300000000000000000000000000000000000000000000000006044820152606401610a25565b6064811115611a0c5760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610a25565b600981905560408051818152600c918101919091527f6d6178576974686472617750000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b33600090815260166020908152604091829020825163f4b9fa7560e01b8152925190927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263f4b9fa75926004808401938290030181865afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afd9190613c25565b6001600160a01b031663a9059cbb33611b14613506565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190613c57565b611ba457600080fd5b600e548154670de0b6b3a764000091611bbc91613bcd565b611bc69190613c03565b60038201556000611bd5611c3e565b9050611bdf613751565b6011819055436014558254670de0b6b3a764000091611bfd91613bcd565b611c079190613c03565b6004830155604051339082156108fc029083906000818181858888f19350505050158015611c39573d6000803e3d6000fd5b505050565b336000908152601660209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052670de0b6b3a7640000611c9a613751565b8351611ca69190613bcd565b611cb09190613c03565b611cba9190613bec565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d429190613c25565b6001600160a01b0316336001600160a01b031614611d8d5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600681905560408051818152600d918101919091527f636f6566664465706c657465500000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b3373c66fbe50dd33c9aadd65707f7088d597c86fe00f14611e4a5760405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f43414c4c455200000000000000000000000000000000000000006044820152606401610a25565b60003411611e855760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610a25565b808210611ed45760405162461bcd60e51b815260206004820152600f60248201527f53544152545f41465445525f454e4400000000000000000000000000000000006044820152606401610a25565b438211611f235760405162461bcd60e51b815260206004820152601060248201527f53544152545f4245464f52455f4e4f57000000000000000000000000000000006044820152606401610a25565b620186a0611f318383613bec565b1015611f7f5760405162461bcd60e51b815260206004820152600960248201527f544f4f5f53484f525400000000000000000000000000000000000000000000006044820152606401610a25565b6216e360611f8d8383613bec565b1115611fdb5760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c4f4e470000000000000000000000000000000000000000000000006044820152606401610a25565b60135443116120365760405162461bcd60e51b815260206004820152602160248201527f4c4153545f4d415449435f444953545249425554494f4e5f4e4f545f454e44456044820152601160fa1b6064820152608401610a25565b6000600b54116120885760405162461bcd60e51b815260206004820152600d60248201527f4e4f5f4441495f5354414b4544000000000000000000000000000000000000006044820152606401610a25565b612090613751565b60118190555034601560008282546120a89190613bb5565b909155505060006014556120bc8282613bec565b6120c69034613c03565b601055601291909155601355565b3360009081526016602052604090208161211b5760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610a25565b600c5482111561215f5760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610a25565b80548211156121b05760405162461bcd60e51b815260206004820152601f60248201527f5749544844524157494e475f4d4f52455f5448414e5f4445504f5349544544006044820152606401610a25565b606460095482600101546121c49190613bcd565b6121ce9190613c03565b82111561221d5760405162461bcd60e51b815260206004820152600e60248201527f4d41585f57495448445241575f500000000000000000000000000000000000006044820152606401610a25565b600854816002015461222f9190613bb5565b43101561227e5760405162461bcd60e51b815260206004820152600960248201527f544f4f5f4541524c5900000000000000000000000000000000000000000000006044820152606401610a25565b612286611a66565b81600c60008282546122989190613bec565b9250508190555081600b60008282546122b19190613bec565b90915550508054829082906000906122ca908490613bec565b9091555050436002820155600e548154670de0b6b3a7640000916122ed91613bcd565b6122f79190613c03565b60038201556011548154670de0b6b3a76400009161231491613bcd565b61231e9190613c03565b81600401819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a89190613c25565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af11580156123f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241b9190613c57565b61242457600080fd5b600c54600b5460408051338152602081018690529081019290925260608201527f75e161b3e824b114fc1a33274bd7091918dd4e639cede50b78b15a4eea956a2190608001611469565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f09190613c25565b6001600160a01b0316336001600160a01b03161461253b5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b60648111156125785760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610a25565b6007819055604080518181526011918101919091527f7468726573686f6c644465706c6574655000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126549190613c25565b6001600160a01b0316336001600160a01b03161461269f5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b6103e88110156126de5760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610a25565b6003819055604080518181526011918101919091527f626c6f636b73426173654465706c65746500000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b99190613c25565b6001600160a01b0316336001600160a01b03161461280a5760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610a25565b600b54156128785780600c60008282546128249190613bec565b9091555050600b5461283e82670de0b6b3a7640000613bcd565b6128489190613c03565b600e60008282546128599190613bb5565b9250508190555080600f60008282546128729190613bb5565b90915550505b50565b60008060006128ad60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b6060806128b861381b565b604051632e3b564f60e11b81526001600160a01b0389811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635c76ac9e90602401600060405180830381865afa158015612923573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261294b9190810190613d18565b90506000815167ffffffffffffffff81111561296957612969613c84565b6040519080825280602002602001820160405280156129a257816020015b61298f613842565b8152602001906001900390816129875790505b50905060005b8251811015612a8a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b66e6b058483815181106129f2576129f2613dbe565b60200260200101516040518263ffffffff1660e01b8152600401612a1891815260200190565b6101e060405180830381865afa158015612a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5a9190613dd4565b828281518110612a6c57612a6c613dbe565b60200260200101819052508080612a8290613eb7565b9150506129a8565b50612a9361381b565b60005b6005811015612d635760405163265aa62160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063265aa62190602401602060405180830381865afa158015612b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2b9190613c25565b6040516370a0823160e01b81526001600160a01b038f8116600483015291909116906370a0823190602401602060405180830381865afa158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b979190613ed0565b90508067ffffffffffffffff811115612bb257612bb2613c84565b604051908082528060200260200182016040528015612bdb578160200160208202803683370190505b50838360058110612bee57612bee613dbe565b602002015260005b81811015612d4e5760405163265aa62160e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063265aa62190602401602060405180830381865afa158015612c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c879190613c25565b6001600160a01b0316632f745c598f836040518363ffffffff1660e01b8152600401612cc89291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015612ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d099190613ed0565b848460058110612d1b57612d1b613dbe565b60200201518281518110612d3157612d31613dbe565b602090810291909101015280612d4681613eb7565b915050612bf6565b50508080612d5b90613eb7565b915050612a96565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de69190613c25565b604051636eb1769f60e11b81526001600160a01b038d811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152919091169063dd62ed3e90604401602060405180830381865afa158015612e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7a9190613ed0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc9190613c25565b6040516370a0823160e01b81526001600160a01b038e8116600483015291909116906370a0823190602401602060405180830381865afa158015612f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f689190613ed0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fece4eac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fea9190613c25565b604051636eb1769f60e11b81526001600160a01b038f811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152919091169063dd62ed3e90604401602060405180830381865afa15801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e9190613ed0565b60405163495447d160e11b81526001600160a01b038f811660048301527f000000000000000000000000000000000000000000000000000000000000000016906392a88fa290602401606060405180830381865afa1580156130e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131089190613ee9565b929e919d509b509099509297509095509350915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561317d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a19190613c25565b6001600160a01b0316336001600160a01b0316146131ec5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600281101561323d5760405162461bcd60e51b815260206004820152600760248201527f42454c4f575f32000000000000000000000000000000000000000000000000006044820152606401610a25565b600a81111561328e5760405162461bcd60e51b815260206004820152600860248201527f41424f56455f31300000000000000000000000000000000000000000000000006044820152606401610a25565b600281905560408051818152600b918101919091527f706f776572526566696c6c00000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015613346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336a9190613c25565b6001600160a01b0316336001600160a01b0316146133b55760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600081116133ef5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610a25565b600a6133ff620186a06003613bcd565b6134099190613c03565b81111561344a5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610a25565b600581905560408051818152600b918101919091527f6465706c6574654c69715000000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b600080600254620186a06134b8919061402f565b600054600254856134cc620186a089613bcd565b6134d69190613c03565b6134e0919061402f565b6134ea9190613bcd565b6134f49190613c03565b905060018110156109c05760016109c2565b336000908152601660209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083018190526004909101546080830152600e5491929091670de0b6b3a764000091611ca69190613bcd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f09190613c25565b6001600160a01b0316336001600160a01b0316146136415760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610a25565b60405163373873db60e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482018190523060248301526044820184905290636e70e7b690606401600060405180830381600087803b1580156136b057600080fd5b505af11580156136c4573d6000803e3d6000fd5b5050505081600c60008282546136da9190613bb5565b909155506136e9905081612738565b600c54600b54604080513381526001600160a01b038716602082015290810185905260608101849052608081019290925260a08201527ffe3518e5e73f574892bc6ff79a4ac4816e01c14b62127612ca3aa45667db361b9060c00160405180910390a1505050565b6000600b54600003613764575060115490565b60006012544311156137e25760135443116137a757601454156137935760145461378e9043613bec565b6137a0565b6012546137a09043613bec565b90506137e2565b601354601454116137e257601454156137cf576014546013546137ca9190613bec565b6137df565b6012546013546137df9190613bec565b90505b600b546010546137f29083613bcd565b61380490670de0b6b3a7640000613bcd565b61380e9190613c03565b601154611cba9190613bb5565b6040518060a001604052806005905b606081526020019060019003908161382a5790505090565b6040518060c001604052806138ae60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080604083850312156138ea57600080fd5b50508035926020909101359150565b60006020828403121561390b57600080fd5b5035919050565b6001600160a01b038116811461287857600080fd5b6000806040838503121561393a57600080fd5b823561394581613912565b946020939093013593505050565b60006020828403121561396557600080fd5b81356109c081613912565b600081518084526020808501945080840160005b83811015613a45578151805180516001600160a01b0316895284810151858a0152604080820151818b0152606080830151818c0152608080840151818d015260a080850151818e015260c08501516139e060c08f018215159052565b5060e085810151908e015261010080860151908e015261012094850151948d0194909452848801516101408d0152918401516101608c01528301516101808b01528201516101a08a015201516101c08801526101e09096019590820190600101613984565b509495945050505050565b60008260a08101836000805b6005811015613ab1578484038852825180518086526020918201918087019190855b82811015613a9a57845184529381019392810192600101613a7e565b509a8b019a91965050939093019250600101613a5c565b50919695505050505050565b60006101208083018a845260208a81860152896040860152885160608601526001600160a01b03818a0151166080860152604089015160a08601528260c0860152819250875180835261014086019350818901925060005b81811015613b3157835185529382019392820192600101613b15565b5050505082810360e0840152613b478186613970565b9050828103610100840152613b5c8185613a50565b9a9950505050505050505050565b600080600060608486031215613b7f57600080fd5b8335613b8a81613912565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613bc857613bc8613b9f565b500190565b6000816000190483118215151615613be757613be7613b9f565b500290565b600082821015613bfe57613bfe613b9f565b500390565b600082613c2057634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613c3757600080fd5b81516109c081613912565b80518015158114613c5257600080fd5b919050565b600060208284031215613c6957600080fd5b613c7282613c42565b9392505050565b8051613c5281613912565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613cbd57613cbd613c84565b60405290565b604051610140810167ffffffffffffffff81118282101715613cbd57613cbd613c84565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d1057613d10613c84565b604052919050565b60006020808385031215613d2b57600080fd5b825167ffffffffffffffff80821115613d4357600080fd5b818501915085601f830112613d5757600080fd5b815181811115613d6957613d69613c84565b8060051b9150613d7a848301613ce7565b8181529183018401918481019088841115613d9457600080fd5b938501935b83851015613db257845182529385019390850190613d99565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008183036101e0811215613de857600080fd5b613df0613c9a565b61014080831215613e0057600080fd5b613e08613cc3565b9250613e1385613c79565b83526020850151602084015260408501516040840152606085015160608401526080850151608084015260a085015160a0840152613e5360c08601613c42565b60c084015260e0858101519084015261010080860151908401526101208086015190840152918152908301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b600060018201613ec957613ec9613b9f565b5060010190565b600060208284031215613ee257600080fd5b5051919050565b600060608284031215613efb57600080fd5b6040516060810181811067ffffffffffffffff82111715613f1e57613f1e613c84565b604052825181526020830151613f3381613912565b60208201526040928301519281019290925250919050565b600181815b80851115613f86578160001904821115613f6c57613f6c613b9f565b80851615613f7957918102915b93841c9390800290613f50565b509250929050565b600082613f9d575060016109c6565b81613faa575060006109c6565b8160018114613fc05760028114613fca57613fe6565b60019150506109c6565b60ff841115613fdb57613fdb613b9f565b50506001821b6109c6565b5060208310610133831016604e8410600b8410161715614009575081810a6109c6565b6140138383613f4b565b806000190482111561402757614027613b9f565b029392505050565b6000613c728383613f8e56fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9aba2646970667358221220cf152e6bafb5cb14157c9f1bf685e05e1e5fba259554b4f5c7c72c50c4fff49964736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106103485760003560e01c806367f4d930116101bb578063acc2166a116100f7578063d57f87f011610095578063e48b98e41161006f578063e48b98e414610901578063ebbaaacb146105d4578063f681834514610921578063fe80dd161461093657600080fd5b8063d57f87f0146108b5578063de816301146108cb578063e251a739146108e157600080fd5b8063c2a19c84116100d1578063c2a19c8414610836578063cdff43711461084c578063d4b46e0414610862578063d56207391461089557600080fd5b8063acc2166a146107d8578063b243fb0114610800578063be3c77d81461082057600080fd5b806393a991af11610164578063a6dc73181161013e578063a6dc731814610723578063a87430ba14610739578063a9d7f889146107ab578063aaf5eb68146107c157600080fd5b806393a991af146106c357806394b89bc2146106e35780639cdcdc6b1461070357600080fd5b806379fc31261161019557806379fc3126146106845780637cbf6f1c1461069a57806385d6f6f5146106ad57600080fd5b806367f4d930146106385780637144b6d61461065857806379c160361461066e57600080fd5b80631eefa7401161028a578063416df36611610233578063538e07591161020d578063538e0759146105d45780635cbd86cc146105e0578063620ed4fe146105f657806363caf47a1461062357600080fd5b8063416df36614610589578063423de639146105a95780634641257d146105bf57600080fd5b806335842f741161026457806335842f741461053d5780633aa934ab1461055d5780633ceaed961461057357600080fd5b80631eefa740146104dd578063214a9a33146104fd57806329f79a741461051d57600080fd5b80630851a202116102f75780630ba6070e116102d15780630ba6070e1461043b57806316fff0741461045b5780631a92d20c146104a75780631e2d87c8146104c757600080fd5b80630851a202146103ef5780630a923fea146104055780630b162d8a1461042557600080fd5b806305fac5601161032857806305fac560146103ac578063064cc89a146103c25780630661c6ce146103d957600080fd5b80627e0d131461034d5780628bd5941461037657806305cc435f14610396575b600080fd5b34801561035957600080fd5b5061036360005481565b6040519081526020015b60405180910390f35b34801561038257600080fd5b506103636103913660046138d7565b610956565b3480156103a257600080fd5b5061036360115481565b3480156103b857600080fd5b5061036360075481565b3480156103ce57600080fd5b506103d76109cc565b005b3480156103e557600080fd5b5061036360085481565b3480156103fb57600080fd5b50610363600c5481565b34801561041157600080fd5b506103d76104203660046138f9565b610bec565b34801561043157600080fd5b5061036360065481565b34801561044757600080fd5b506103d76104563660046138f9565b610d52565b34801561046757600080fd5b5061048f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161036d565b3480156104b357600080fd5b506103d76104c23660046138f9565b610eb8565b3480156104d357600080fd5b5061036360135481565b3480156104e957600080fd5b506103d76104f83660046138f9565b611074565b34801561050957600080fd5b506103d7610518366004613927565b6111ec565b34801561052957600080fd5b506103d76105383660046138f9565b6114fb565b34801561054957600080fd5b506103d76105583660046138f9565b611675565b34801561056957600080fd5b5061036360025481565b34801561057f57600080fd5b50610363600b5481565b34801561059557600080fd5b506103d76105a43660046138f9565b6118b1565b3480156105b557600080fd5b50610363600a5481565b3480156105cb57600080fd5b506103d7611a66565b3480156103d757600080fd5b3480156105ec57600080fd5b50610363600f5481565b34801561060257600080fd5b50610363610611366004613953565b60176020526000908152604090205481565b34801561062f57600080fd5b50610363611c3e565b34801561064457600080fd5b506103d76106533660046138f9565b611cc0565b34801561066457600080fd5b5061036360125481565b34801561067a57600080fd5b50610363600e5481565b34801561069057600080fd5b5061036360015481565b6103d76106a83660046138d7565b611de7565b3480156106b957600080fd5b5061036360105481565b3480156106cf57600080fd5b506103d76106de3660046138f9565b6120d4565b3480156106ef57600080fd5b506103d76106fe3660046138f9565b61246e565b34801561070f57600080fd5b506103d761071e3660046138f9565b6125d2565b34801561072f57600080fd5b50610363600d5481565b34801561074557600080fd5b50610783610754366004613953565b601660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161036d565b3480156107b757600080fd5b5061036360155481565b3480156107cd57600080fd5b50610363620186a081565b3480156107e457600080fd5b5061048f73c66fbe50dd33c9aadd65707f7088d597c86fe00f81565b34801561080c57600080fd5b506103d761081b3660046138f9565b612738565b34801561082c57600080fd5b5061036360055481565b34801561084257600080fd5b5061036360145481565b34801561085857600080fd5b5061036360035481565b34801561086e57600080fd5b5061088261087d366004613953565b61287b565b60405161036d9796959493929190613abd565b3480156108a157600080fd5b506103d76108b03660046138f9565b61311f565b3480156108c157600080fd5b5061036360045481565b3480156108d757600080fd5b5061036360095481565b3480156108ed57600080fd5b506103d76108fc3660046138f9565b6132e8565b34801561090d57600080fd5b5061036361091c3660046138d7565b6134a4565b34801561092d57600080fd5b50610363613506565b34801561094257600080fd5b506103d7610951366004613b6a565b61356f565b60008083600654600754606461096c9190613bb5565b6109769086613bcd565b610981876064613bcd565b61098b9190613bec565b6109959190613bcd565b61099f9190613c03565b6003546109ac9190613bec565b90506004548110156109c0576004546109c2565b805b9150505b92915050565b3360009081526017602052604090205480610a2e5760405162461bcd60e51b815260206004820152601060248201527f4e4f5448494e475f544f5f434c41494d0000000000000000000000000000000060448201526064015b60405180910390fd5b80600c5411610a715760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610a25565b80600c6000828254610a839190613bec565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0c9190613c25565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190613c57565b610b8857600080fd5b33600081815260176020908152604080832092909255600c54600b5483519485529184018590529183019190915260608201527f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e906080015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190613c25565b6001600160a01b0316336001600160a01b031614610cb95760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b6103e8811015610cf85760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610a25565b6000819055604080518181526010918101919091527f626c6f636b7342617365526566696c6c0000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190613c25565b6001600160a01b0316336001600160a01b031614610e1f5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b6103e8811015610e5e5760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610a25565b6004819055604080518181526010918101919091527f626c6f636b734d696e4465706c6574650000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a9190613c25565b6001600160a01b0316336001600160a01b031614610f855760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b60008111610fbf5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610a25565b600a610fcf620186a06003613bcd565b610fd99190613c03565b81111561101a5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610a25565b600181905560408051818152600a918101919091527f726566696c6c4c6971500000000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f69190613c25565b6001600160a01b0316336001600160a01b0316146111415760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b61a8c081116111925760405162461bcd60e51b815260206004820152600f60248201527f4c4553535f5448414e5f315f44415900000000000000000000000000000000006044820152606401610a25565b6008819055604080518181526010918101919091527f776974686472617754696d656c6f636b0000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d9190613c25565b6001600160a01b0316336001600160a01b0316146112be5760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610a25565b620186a0606482600a546112d29190613bcd565b6112dc9190613c03565b6112e69190613c03565b6112f09082613bec565b9050600c5481116114755780600c600082825461130d9190613bec565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190613c25565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af11580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b9190613c57565b61141457600080fd5b600c54600b54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f80b773cd8ea3bf97475bccfb129d2ad177499dd4b091fbf87669b370fffef58c9060a0015b60405180910390a15050565b6001600160a01b0382166000908152601760205260408120805483929061149d908490613bb5565b9091555050600c54600b54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f7a17f79bf8cde7a30daa7135b2d37fac6ebbf8097bc0d3d5697faf40fbb7efb49060a001611469565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190613c25565b6001600160a01b0316336001600160a01b0316146115c85760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b620186a081111561161b5760405162461bcd60e51b815260206004820152600760248201527f41424f56455f31000000000000000000000000000000000000000000000000006044820152606401610a25565b600a819055604080518181526008918101919091527f737761704665655000000000000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b336000908152601660205260409020816116bc5760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610a25565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173e9190613c25565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015611793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b79190613c57565b6117c057600080fd5b6117c8611a66565b81600c60008282546117da9190613bb5565b9250508190555081600b60008282546117f39190613bb5565b909155505080548290829060009061180c908490613bb5565b9091555050805460018201819055600e54670de0b6b3a7640000916118319190613bcd565b61183b9190613c03565b60038201556011548154670de0b6b3a76400009161185891613bcd565b6118629190613c03565b6004820155600c54600b5460408051338152602081018690529081019290925260608201527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada390608001611469565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561190f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119339190613c25565b6001600160a01b0316336001600160a01b03161461197e5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600a8110156119cf5760405162461bcd60e51b815260206004820152600860248201527f42454c4f575f31300000000000000000000000000000000000000000000000006044820152606401610a25565b6064811115611a0c5760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610a25565b600981905560408051818152600c918101919091527f6d6178576974686472617750000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b33600090815260166020908152604091829020825163f4b9fa7560e01b8152925190927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263f4b9fa75926004808401938290030181865afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afd9190613c25565b6001600160a01b031663a9059cbb33611b14613506565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190613c57565b611ba457600080fd5b600e548154670de0b6b3a764000091611bbc91613bcd565b611bc69190613c03565b60038201556000611bd5611c3e565b9050611bdf613751565b6011819055436014558254670de0b6b3a764000091611bfd91613bcd565b611c079190613c03565b6004830155604051339082156108fc029083906000818181858888f19350505050158015611c39573d6000803e3d6000fd5b505050565b336000908152601660209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052670de0b6b3a7640000611c9a613751565b8351611ca69190613bcd565b611cb09190613c03565b611cba9190613bec565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d429190613c25565b6001600160a01b0316336001600160a01b031614611d8d5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600681905560408051818152600d918101919091527f636f6566664465706c657465500000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b3373c66fbe50dd33c9aadd65707f7088d597c86fe00f14611e4a5760405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f43414c4c455200000000000000000000000000000000000000006044820152606401610a25565b60003411611e855760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610a25565b808210611ed45760405162461bcd60e51b815260206004820152600f60248201527f53544152545f41465445525f454e4400000000000000000000000000000000006044820152606401610a25565b438211611f235760405162461bcd60e51b815260206004820152601060248201527f53544152545f4245464f52455f4e4f57000000000000000000000000000000006044820152606401610a25565b620186a0611f318383613bec565b1015611f7f5760405162461bcd60e51b815260206004820152600960248201527f544f4f5f53484f525400000000000000000000000000000000000000000000006044820152606401610a25565b6216e360611f8d8383613bec565b1115611fdb5760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c4f4e470000000000000000000000000000000000000000000000006044820152606401610a25565b60135443116120365760405162461bcd60e51b815260206004820152602160248201527f4c4153545f4d415449435f444953545249425554494f4e5f4e4f545f454e44456044820152601160fa1b6064820152608401610a25565b6000600b54116120885760405162461bcd60e51b815260206004820152600d60248201527f4e4f5f4441495f5354414b4544000000000000000000000000000000000000006044820152606401610a25565b612090613751565b60118190555034601560008282546120a89190613bb5565b909155505060006014556120bc8282613bec565b6120c69034613c03565b601055601291909155601355565b3360009081526016602052604090208161211b5760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610a25565b600c5482111561215f5760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610a25565b80548211156121b05760405162461bcd60e51b815260206004820152601f60248201527f5749544844524157494e475f4d4f52455f5448414e5f4445504f5349544544006044820152606401610a25565b606460095482600101546121c49190613bcd565b6121ce9190613c03565b82111561221d5760405162461bcd60e51b815260206004820152600e60248201527f4d41585f57495448445241575f500000000000000000000000000000000000006044820152606401610a25565b600854816002015461222f9190613bb5565b43101561227e5760405162461bcd60e51b815260206004820152600960248201527f544f4f5f4541524c5900000000000000000000000000000000000000000000006044820152606401610a25565b612286611a66565b81600c60008282546122989190613bec565b9250508190555081600b60008282546122b19190613bec565b90915550508054829082906000906122ca908490613bec565b9091555050436002820155600e548154670de0b6b3a7640000916122ed91613bcd565b6122f79190613c03565b60038201556011548154670de0b6b3a76400009161231491613bcd565b61231e9190613c03565b81600401819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a89190613c25565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af11580156123f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241b9190613c57565b61242457600080fd5b600c54600b5460408051338152602081018690529081019290925260608201527f75e161b3e824b114fc1a33274bd7091918dd4e639cede50b78b15a4eea956a2190608001611469565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f09190613c25565b6001600160a01b0316336001600160a01b03161461253b5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b60648111156125785760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610a25565b6007819055604080518181526011918101919091527f7468726573686f6c644465706c6574655000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126549190613c25565b6001600160a01b0316336001600160a01b03161461269f5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b6103e88110156126de5760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610a25565b6003819055604080518181526011918101919091527f626c6f636b73426173654465706c65746500000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b99190613c25565b6001600160a01b0316336001600160a01b03161461280a5760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610a25565b600b54156128785780600c60008282546128249190613bec565b9091555050600b5461283e82670de0b6b3a7640000613bcd565b6128489190613c03565b600e60008282546128599190613bb5565b9250508190555080600f60008282546128729190613bb5565b90915550505b50565b60008060006128ad60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b6060806128b861381b565b604051632e3b564f60e11b81526001600160a01b0389811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635c76ac9e90602401600060405180830381865afa158015612923573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261294b9190810190613d18565b90506000815167ffffffffffffffff81111561296957612969613c84565b6040519080825280602002602001820160405280156129a257816020015b61298f613842565b8152602001906001900390816129875790505b50905060005b8251811015612a8a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b66e6b058483815181106129f2576129f2613dbe565b60200260200101516040518263ffffffff1660e01b8152600401612a1891815260200190565b6101e060405180830381865afa158015612a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5a9190613dd4565b828281518110612a6c57612a6c613dbe565b60200260200101819052508080612a8290613eb7565b9150506129a8565b50612a9361381b565b60005b6005811015612d635760405163265aa62160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063265aa62190602401602060405180830381865afa158015612b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2b9190613c25565b6040516370a0823160e01b81526001600160a01b038f8116600483015291909116906370a0823190602401602060405180830381865afa158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b979190613ed0565b90508067ffffffffffffffff811115612bb257612bb2613c84565b604051908082528060200260200182016040528015612bdb578160200160208202803683370190505b50838360058110612bee57612bee613dbe565b602002015260005b81811015612d4e5760405163265aa62160e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063265aa62190602401602060405180830381865afa158015612c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c879190613c25565b6001600160a01b0316632f745c598f836040518363ffffffff1660e01b8152600401612cc89291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015612ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d099190613ed0565b848460058110612d1b57612d1b613dbe565b60200201518281518110612d3157612d31613dbe565b602090810291909101015280612d4681613eb7565b915050612bf6565b50508080612d5b90613eb7565b915050612a96565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de69190613c25565b604051636eb1769f60e11b81526001600160a01b038d811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152919091169063dd62ed3e90604401602060405180830381865afa158015612e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7a9190613ed0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc9190613c25565b6040516370a0823160e01b81526001600160a01b038e8116600483015291909116906370a0823190602401602060405180830381865afa158015612f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f689190613ed0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fece4eac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fea9190613c25565b604051636eb1769f60e11b81526001600160a01b038f811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152919091169063dd62ed3e90604401602060405180830381865afa15801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e9190613ed0565b60405163495447d160e11b81526001600160a01b038f811660048301527f000000000000000000000000000000000000000000000000000000000000000016906392a88fa290602401606060405180830381865afa1580156130e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131089190613ee9565b929e919d509b509099509297509095509350915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561317d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a19190613c25565b6001600160a01b0316336001600160a01b0316146131ec5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600281101561323d5760405162461bcd60e51b815260206004820152600760248201527f42454c4f575f32000000000000000000000000000000000000000000000000006044820152606401610a25565b600a81111561328e5760405162461bcd60e51b815260206004820152600860248201527f41424f56455f31300000000000000000000000000000000000000000000000006044820152606401610a25565b600281905560408051818152600b918101919091527f706f776572526566696c6c00000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015613346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336a9190613c25565b6001600160a01b0316336001600160a01b0316146133b55760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610a25565b600081116133ef5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610a25565b600a6133ff620186a06003613bcd565b6134099190613c03565b81111561344a5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610a25565b600581905560408051818152600b918101919091527f6465706c6574654c69715000000000000000000000000000000000000000000060608201526020810182905260008051602061403c83398151915290608001610be1565b600080600254620186a06134b8919061402f565b600054600254856134cc620186a089613bcd565b6134d69190613c03565b6134e0919061402f565b6134ea9190613bcd565b6134f49190613c03565b905060018110156109c05760016109c2565b336000908152601660209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083018190526004909101546080830152600e5491929091670de0b6b3a764000091611ca69190613bcd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f09190613c25565b6001600160a01b0316336001600160a01b0316146136415760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610a25565b60405163373873db60e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482018190523060248301526044820184905290636e70e7b690606401600060405180830381600087803b1580156136b057600080fd5b505af11580156136c4573d6000803e3d6000fd5b5050505081600c60008282546136da9190613bb5565b909155506136e9905081612738565b600c54600b54604080513381526001600160a01b038716602082015290810185905260608101849052608081019290925260a08201527ffe3518e5e73f574892bc6ff79a4ac4816e01c14b62127612ca3aa45667db361b9060c00160405180910390a1505050565b6000600b54600003613764575060115490565b60006012544311156137e25760135443116137a757601454156137935760145461378e9043613bec565b6137a0565b6012546137a09043613bec565b90506137e2565b601354601454116137e257601454156137cf576014546013546137ca9190613bec565b6137df565b6012546013546137df9190613bec565b90505b600b546010546137f29083613bcd565b61380490670de0b6b3a7640000613bcd565b61380e9190613c03565b601154611cba9190613bb5565b6040518060a001604052806005905b606081526020019060019003908161382a5790505090565b6040518060c001604052806138ae60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080604083850312156138ea57600080fd5b50508035926020909101359150565b60006020828403121561390b57600080fd5b5035919050565b6001600160a01b038116811461287857600080fd5b6000806040838503121561393a57600080fd5b823561394581613912565b946020939093013593505050565b60006020828403121561396557600080fd5b81356109c081613912565b600081518084526020808501945080840160005b83811015613a45578151805180516001600160a01b0316895284810151858a0152604080820151818b0152606080830151818c0152608080840151818d015260a080850151818e015260c08501516139e060c08f018215159052565b5060e085810151908e015261010080860151908e015261012094850151948d0194909452848801516101408d0152918401516101608c01528301516101808b01528201516101a08a015201516101c08801526101e09096019590820190600101613984565b509495945050505050565b60008260a08101836000805b6005811015613ab1578484038852825180518086526020918201918087019190855b82811015613a9a57845184529381019392810192600101613a7e565b509a8b019a91965050939093019250600101613a5c565b50919695505050505050565b60006101208083018a845260208a81860152896040860152885160608601526001600160a01b03818a0151166080860152604089015160a08601528260c0860152819250875180835261014086019350818901925060005b81811015613b3157835185529382019392820192600101613b15565b5050505082810360e0840152613b478186613970565b9050828103610100840152613b5c8185613a50565b9a9950505050505050505050565b600080600060608486031215613b7f57600080fd5b8335613b8a81613912565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613bc857613bc8613b9f565b500190565b6000816000190483118215151615613be757613be7613b9f565b500290565b600082821015613bfe57613bfe613b9f565b500390565b600082613c2057634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613c3757600080fd5b81516109c081613912565b80518015158114613c5257600080fd5b919050565b600060208284031215613c6957600080fd5b613c7282613c42565b9392505050565b8051613c5281613912565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613cbd57613cbd613c84565b60405290565b604051610140810167ffffffffffffffff81118282101715613cbd57613cbd613c84565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d1057613d10613c84565b604052919050565b60006020808385031215613d2b57600080fd5b825167ffffffffffffffff80821115613d4357600080fd5b818501915085601f830112613d5757600080fd5b815181811115613d6957613d69613c84565b8060051b9150613d7a848301613ce7565b8181529183018401918481019088841115613d9457600080fd5b938501935b83851015613db257845182529385019390850190613d99565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008183036101e0811215613de857600080fd5b613df0613c9a565b61014080831215613e0057600080fd5b613e08613cc3565b9250613e1385613c79565b83526020850151602084015260408501516040840152606085015160608401526080850151608084015260a085015160a0840152613e5360c08601613c42565b60c084015260e0858101519084015261010080860151908401526101208086015190840152918152908301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b600060018201613ec957613ec9613b9f565b5060010190565b600060208284031215613ee257600080fd5b5051919050565b600060608284031215613efb57600080fd5b6040516060810181811067ffffffffffffffff82111715613f1e57613f1e613c84565b604052825181526020830151613f3381613912565b60208201526040928301519281019290925250919050565b600181815b80851115613f86578160001904821115613f6c57613f6c613b9f565b80851615613f7957918102915b93841c9390800290613f50565b509250929050565b600082613f9d575060016109c6565b81613faa575060006109c6565b8160018114613fc05760028114613fca57613fe6565b60019150506109c6565b60ff841115613fdb57613fdb613b9f565b50506001821b6109c6565b5060208310610133831016604e8410600b8410161715614009575081810a6109c6565b6140138383613f4b565b806000190482111561402757614027613b9f565b029392505050565b6000613c728383613f8e56fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9aba2646970667358221220cf152e6bafb5cb14157c9f1bf685e05e1e5fba259554b4f5c7c72c50c4fff49964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10876,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "blocksBaseRefill",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10881,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "refillLiqP",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10884,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "powerRefill",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10887,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "blocksBaseDeplete",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10890,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "blocksMinDeplete",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10895,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "depleteLiqP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10898,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "coeffDepleteP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10901,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "thresholdDepleteP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10904,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "withdrawTimelock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10907,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maxWithdrawP",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10912,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "swapFeeP",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10914,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maxBalanceDai",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10916,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "currentBalanceDai",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10918,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "lastActionBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10920,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "accDaiPerDai",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 10922,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "rewardsDai",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 10924,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticPerBlock",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10926,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "accMaticPerDai",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 10928,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticStartBlock",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 10930,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticEndBlock",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 10932,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticLastRewardBlock",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10934,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "rewardsMatic",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 10950,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "users",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(User)10945_storage)"
      },
      {
        "astId": 10954,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "daiToClaim",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)10945_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GNSTradingVaultV5.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)10945_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(User)10945_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingVaultV5.User",
        "members": [
          {
            "astId": 10936,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "daiDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10938,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "maxDaiDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10940,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "withdrawBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10942,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "debtDai",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10944,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "debtMatic",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
