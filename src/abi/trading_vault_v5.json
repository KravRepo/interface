{
  "address": "0x4f1130863581eB00c33abdea3E2f0669209E56f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBurnt",
          "type": "uint256"
        }
      ],
      "name": "Depleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFeeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "ReceivedFromTrader",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensMinted",
          "type": "uint256"
        }
      ],
      "name": "Refilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "ToClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentBalanceDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accDaiPerDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accMaticPerDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "backend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leverageUnlocked",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralRewardsTotal",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.Trader",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeDai",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterfaceV5.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.PendingMarketOrder[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[][5]",
          "name": "",
          "type": "uint256[][5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksBaseDeplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksBaseRefill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentBalanceDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "blocksBetweenDepletes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentBalanceDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBalanceDai",
          "type": "uint256"
        }
      ],
      "name": "blocksBetweenRefills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksMinDeplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coeffDepleteP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalanceDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "daiToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depleteLiqP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "depositDaiFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeRewardDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "name": "distributeRewardMatic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "harvestFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActionBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBalanceDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWithdrawP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewardDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "pendingRewardDaiByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "pendingRewardDaiFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewardMatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "pendingRewardMaticFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerRefill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vaultFee",
          "type": "uint256"
        }
      ],
      "name": "receiveDaiFromTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refillLiqP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsMatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendDaiToTrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksBaseDeplete",
          "type": "uint256"
        }
      ],
      "name": "setBlocksBaseDeplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksBaseRefill",
          "type": "uint256"
        }
      ],
      "name": "setBlocksBaseRefill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksMinDeplete",
          "type": "uint256"
        }
      ],
      "name": "setBlocksMinDeplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coeffDepleteP",
          "type": "uint256"
        }
      ],
      "name": "setCoeffDepleteP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depleteLiqP",
          "type": "uint256"
        }
      ],
      "name": "setDepleteLiqP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxWithdrawP",
          "type": "uint256"
        }
      ],
      "name": "setMaxWithdrawP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_powerRefill",
          "type": "uint256"
        }
      ],
      "name": "setPowerRefill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_refillLiqP",
          "type": "uint256"
        }
      ],
      "name": "setRefillLiqP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapFeeP",
          "type": "uint256"
        }
      ],
      "name": "setSwapFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thresholdDepleteP",
          "type": "uint256"
        }
      ],
      "name": "setThresholdDepleteP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawTimelock",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thresholdDepleteP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daiDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDaiDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtMatic",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa45811c27e7004ab1d7fcf0eabc8fa056a95b5085642210a0323b69924d8a904",
  "receipt": {
    "to": null,
    "from": "0x284f1b4a9C4B9495F79de62a55337e0a07cCF3fF",
    "contractAddress": "0x4f1130863581eB00c33abdea3E2f0669209E56f3",
    "transactionIndex": 108,
    "gasUsed": "4146898",
    "logsBloom": "0x
    "blockHash": "0x972b6cf602be87247582bc8d77bb625cd4d9ac536e00dcf23cbbbb0fa63afa88",
    "transactionHash": "0xa45811c27e7004ab1d7fcf0eabc8fa056a95b5085642210a0323b69924d8a904",
    "logs": [],
    "blockNumber": 3966603,
    "cumulativeGasUsed": "15938075",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x0A9475f047DFc96E23343F01eeBbce56497f7520"],
  "numDeployments": 1,
  "solcInputHash": "15d261382b57ac46d8a61c07127e7cc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurnt\",\"type\":\"uint256\"}],\"name\":\"Depleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFeeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"ReceivedFromTrader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"Refilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"ToClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentBalanceDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accDaiPerDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accMaticPerDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"backend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leverageUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralRewardsTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trader\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.PendingMarketOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][5]\",\"name\":\"\",\"type\":\"uint256[][5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksBaseDeplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksBaseRefill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentBalanceDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"blocksBetweenDepletes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentBalanceDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBalanceDai\",\"type\":\"uint256\"}],\"name\":\"blocksBetweenRefills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksMinDeplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coeffDepleteP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalanceDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daiToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depleteLiqP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositDaiFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewardDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"distributeRewardMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"harvestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBalanceDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingRewardDaiByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingRewardDaiFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingRewardMaticFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerRefill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"}],\"name\":\"receiveDaiFromTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillLiqP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDaiToTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksBaseDeplete\",\"type\":\"uint256\"}],\"name\":\"setBlocksBaseDeplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksBaseRefill\",\"type\":\"uint256\"}],\"name\":\"setBlocksBaseRefill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksMinDeplete\",\"type\":\"uint256\"}],\"name\":\"setBlocksMinDeplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coeffDepleteP\",\"type\":\"uint256\"}],\"name\":\"setCoeffDepleteP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depleteLiqP\",\"type\":\"uint256\"}],\"name\":\"setDepleteLiqP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawP\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerRefill\",\"type\":\"uint256\"}],\"name\":\"setPowerRefill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refillLiqP\",\"type\":\"uint256\"}],\"name\":\"setRefillLiqP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFeeP\",\"type\":\"uint256\"}],\"name\":\"setSwapFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdDepleteP\",\"type\":\"uint256\"}],\"name\":\"setThresholdDepleteP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawTimelock\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdDepleteP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDaiDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtMatic\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GNSTradingVaultV5.sol\":\"GNSTradingVaultV5\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/GNSTradingVaultV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './interfaces/StorageInterfaceV5.sol';\\npragma solidity 0.8.14;\\n\\ncontract GNSTradingVaultV5{\\n\\n    uint public constant PRECISION = 1e5;\\n    StorageInterfaceV5 public /*immutable*/ storageT;\\n\\n    // Distribute MATIC ?\\n    address public constant rewardDistributor = 0xC66FbE50Dd33c9AAdd65707F7088D597C86fE00F;\\n\\n    // PARAMS\\n    // 1. Refill\\n    uint public blocksBaseRefill = 2500;    // block\\n    uint public refillLiqP = 0.1 * 1e5;     // PRECISION (%)\\n    uint public powerRefill = 5;            // no decimal    \\n\\n    // 2. Deplete\\n    uint public blocksBaseDeplete = 10000;  // block\\n    uint public blocksMinDeplete = 2000;    // block\\n    uint public depleteLiqP = 0.3 * 1e5;    // PRECISION (%)\\n    uint public coeffDepleteP = 100;        // %\\n    uint public thresholdDepleteP = 10;     // %\\n\\n    // 3. Staking\\n    uint public withdrawTimelock = 43200;   // blocks\\n    uint public maxWithdrawP = 25;          // %\\n\\n    // 4. Trading\\n    uint public swapFeeP = 0.3 * 1e5;       // PRECISION (%)\\n\\n    // STATE\\n    // 1. DAI balance\\n    uint public maxBalanceDai;      // 1e18\\n    uint public currentBalanceDai;  // 1e18\\n    uint public lastActionBlock;    // block\\n\\n    // 2. DAI staking rewards\\n    uint public accDaiPerDai;       // 1e18\\n    uint public rewardsDai;         // 1e18\\n\\n    // 3. MATIC staking rewards\\n    uint public maticPerBlock;      // 1e18\\n    uint public accMaticPerDai;     // 1e18\\n    uint public maticStartBlock;    // 1e18\\n    uint public maticEndBlock;      // 1e18\\n    uint public maticLastRewardBlock;     // 1e18\\n    uint public rewardsMatic;       // 1e18\\n\\n    // 4. Mappings\\n    struct User{\\n        uint daiDeposited;\\n        uint maxDaiDeposited;\\n        uint withdrawBlock;\\n        uint debtDai;\\n        uint debtMatic;\\n    }\\n    mapping(address => User) public users;\\n    mapping(address => uint) public daiToClaim;\\n\\n    // EVENTS\\n    event Deposited(address caller,  uint amount, uint newCurrentBalanceDai, uint newMaxBalanceDai);\\n    event Withdrawn(address caller, uint amount, uint newCurrentBalanceDai, uint newMaxBalanceDai);\\n    event Sent(address caller, address trader, uint amount,uint newCurrentBalanceDai, uint maxBalanceDai);\\n    event ToClaim(address caller, address trader, uint amount,uint currentBalanceDai, uint maxBalanceDai);\\n    event Claimed(address trader, uint amount, uint newCurrentBalanceDai, uint maxBalanceDai);\\n    event Refilled(address caller, uint daiAmount, uint newCurrentBalanceDai, uint maxBalanceDai, uint tokensMinted);\\n    event Depleted(address caller, uint daiAmount, uint newCurrentBalanceDai, uint maxBalanceDai, uint tokensBurnt);\\n    event ReceivedFromTrader(address caller, address trader, uint daiAmount, uint vaultFeeDai, uint newCurrentBalanceDai, uint maxBalanceDai);\\n    event AddressUpdated(string name, address a);\\n    event NumberUpdated(string name, uint value);\\n\\n    constructor(StorageInterfaceV5 _storageT){ \\n        require(address(_storageT) != address(0), \\\"ADDRESS_0\\\");\\n        storageT = _storageT;\\n    }\\n\\n    function initialize(StorageInterfaceV5 _storageT) external {\\n        require(address(storageT) == address(0) && address(_storageT) != address(0));\\n        storageT = _storageT;\\n\\n        // PARAMS\\n        // 1. Refill\\n        blocksBaseRefill = 2500;    // block\\n        refillLiqP = 0.1 * 1e5;     // PRECISION (%)\\n        powerRefill = 5;            // no decimal\\n\\n        // 2. Deplete\\n        blocksBaseDeplete = 10000;  // block\\n        blocksMinDeplete = 2000;    // block\\n        depleteLiqP = 0.3 * 1e5;    // PRECISION (%)\\n        coeffDepleteP = 100;        // %\\n        thresholdDepleteP = 10;     // %\\n\\n        // 3. Staking\\n        withdrawTimelock = 43200;   // blocks\\n        maxWithdrawP = 25;          // %\\n\\n        // 4. Trading\\n        swapFeeP = 0.3 * 1e5;       // PRECISION (%)\\n    }\\n\\n    modifier onlyGov(){ require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\"); _; }\\n    modifier onlyCallbacks(){ require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\"); _; }\\n\\n    // Manage state\\n    function setBlocksBaseRefill(uint _blocksBaseRefill) external onlyGov{\\n        require(_blocksBaseRefill >= 1000, \\\"BELOW_1000\\\");\\n        blocksBaseRefill = _blocksBaseRefill;\\n        emit NumberUpdated(\\\"blocksBaseRefill\\\", _blocksBaseRefill);\\n    }\\n    function setBlocksBaseDeplete(uint _blocksBaseDeplete) external onlyGov{\\n        require(_blocksBaseDeplete >= 1000, \\\"BELOW_1000\\\");\\n        blocksBaseDeplete = _blocksBaseDeplete;\\n        emit NumberUpdated(\\\"blocksBaseDeplete\\\", _blocksBaseDeplete);\\n    }\\n    function setBlocksMinDeplete(uint _blocksMinDeplete) external onlyGov{\\n        require(_blocksMinDeplete >= 1000, \\\"BELOW_1000\\\");\\n        blocksMinDeplete = _blocksMinDeplete;\\n        emit NumberUpdated(\\\"blocksMinDeplete\\\", _blocksMinDeplete);\\n    }\\n    function setRefillLiqP(uint _refillLiqP) external onlyGov{\\n        require(_refillLiqP > 0, \\\"VALUE_0\\\");\\n        require(_refillLiqP <= 3*PRECISION/10, \\\"ABOVE_0_POINT_3\\\");\\n        refillLiqP = _refillLiqP;\\n        emit NumberUpdated(\\\"refillLiqP\\\", _refillLiqP);\\n    }\\n    function setDepleteLiqP(uint _depleteLiqP) external onlyGov{\\n        require(_depleteLiqP > 0, \\\"VALUE_0\\\");\\n        require(_depleteLiqP <= 3*PRECISION/10, \\\"ABOVE_0_POINT_3\\\");\\n        depleteLiqP = _depleteLiqP;\\n        emit NumberUpdated(\\\"depleteLiqP\\\", _depleteLiqP);\\n    }\\n    function setPowerRefill(uint _powerRefill) external onlyGov{\\n        require(_powerRefill >= 2, \\\"BELOW_2\\\");\\n        require(_powerRefill <= 10, \\\"ABOVE_10\\\");\\n        powerRefill = _powerRefill;\\n        emit NumberUpdated(\\\"powerRefill\\\", _powerRefill);\\n    }\\n    function setCoeffDepleteP(uint _coeffDepleteP) external onlyGov{\\n        coeffDepleteP = _coeffDepleteP;\\n        emit NumberUpdated(\\\"coeffDepleteP\\\", _coeffDepleteP);\\n    }\\n    function setThresholdDepleteP(uint _thresholdDepleteP) external onlyGov{\\n        require(_thresholdDepleteP <= 100, \\\"ABOVE_100\\\");\\n        thresholdDepleteP = _thresholdDepleteP;\\n        emit NumberUpdated(\\\"thresholdDepleteP\\\", _thresholdDepleteP);\\n    }\\n    function setSwapFeeP(uint _swapFeeP) external onlyGov{\\n        require(_swapFeeP <= PRECISION, \\\"ABOVE_1\\\");\\n        swapFeeP = _swapFeeP;\\n        emit NumberUpdated(\\\"swapFeeP\\\", _swapFeeP);\\n    }\\n    function setWithdrawTimelock(uint _withdrawTimelock) external onlyGov{\\n        require(_withdrawTimelock > 43200, \\\"LESS_THAN_1_DAY\\\");\\n        withdrawTimelock = _withdrawTimelock;\\n        emit NumberUpdated(\\\"withdrawTimelock\\\", _withdrawTimelock);\\n    }\\n    function setMaxWithdrawP(uint _maxWithdrawP) external onlyGov{\\n        require(_maxWithdrawP >= 10, \\\"BELOW_10\\\");\\n        require(_maxWithdrawP <= 100, \\\"ABOVE_100\\\");\\n        maxWithdrawP = _maxWithdrawP;\\n        emit NumberUpdated(\\\"maxWithdrawP\\\", _maxWithdrawP);\\n    }\\n\\n    // Refill\\n    function refill() external{\\n        // require(currentBalanceDai < maxBalanceDai, \\\"ALREADY_FULL\\\");\\n        // require(block.number >= lastActionBlock + blocksBetweenRefills(currentBalanceDai, maxBalanceDai), \\\"TOO_EARLY\\\");\\n\\n        // (uint tokenReserve, ) = storageT.priceAggregator().tokenDaiReservesLp();\\n        // uint tokensToMint = tokenReserve*refillLiqP/100/PRECISION;\\n\\n        // storageT.handleTokens(address(this), tokensToMint, true);\\n\\n        // address[] memory tokenToDaiPath = new address[](2);\\n        // tokenToDaiPath[0] = address(storageT.token());\\n        // tokenToDaiPath[1] = address(storageT.dai());\\n\\n        // storageT.token().approve(address(storageT.tokenDaiRouter()), tokensToMint);\\n        // uint[] memory amounts = storageT.tokenDaiRouter().swapExactTokensForTokens(\\n        //     tokensToMint,\\n        //     0,\\n        //     tokenToDaiPath,\\n        //     address(this),\\n        //     block.timestamp + 300\\n        // );\\n\\n        // currentBalanceDai += amounts[1];\\n        // lastActionBlock = block.number;\\n\\n        // emit Refilled(msg.sender, amounts[1], currentBalanceDai, maxBalanceDai, tokensToMint);\\n    }\\n    function blocksBetweenRefills(uint _currentBalanceDai, uint _maxBalanceDai) public view returns(uint){\\n        uint blocks = (_currentBalanceDai*PRECISION/_maxBalanceDai)**powerRefill*blocksBaseRefill/(PRECISION**powerRefill);\\n        return blocks >= 1 ? blocks : 1;\\n    }\\n\\n    // Deplete\\n    function deplete() external{\\n        // require(currentBalanceDai > maxBalanceDai*(100+thresholdDepleteP)/100, \\\"NOT_FULL\\\");\\n        // require(block.number >= lastActionBlock + blocksBetweenDepletes(currentBalanceDai, maxBalanceDai), \\\"TOO_EARLY\\\");\\n\\n        // (, uint daiReserve) = storageT.priceAggregator().tokenDaiReservesLp();\\n        // uint daiToBuy = daiReserve*depleteLiqP/100/PRECISION;\\n\\n        // address[] memory daiToTokenPath = new address[](2);\\n        // daiToTokenPath[0] = address(storageT.dai());\\n        // daiToTokenPath[1] = address(storageT.token());\\n\\n        // require(storageT.dai().approve(address(storageT.tokenDaiRouter()), daiToBuy));\\n        // uint[] memory amounts = storageT.tokenDaiRouter().swapExactTokensForTokens(\\n        //     daiToBuy,\\n        //     0,\\n        //     daiToTokenPath,\\n        //     address(this),\\n        //     block.timestamp + 300\\n        // );\\n\\n        // storageT.handleTokens(address(this), amounts[1], false);\\n\\n        // currentBalanceDai -= daiToBuy;\\n        // lastActionBlock = block.number;\\n\\n        // emit Depleted(msg.sender, daiToBuy, currentBalanceDai, maxBalanceDai, amounts[1]);\\n    }\\n    function blocksBetweenDepletes(uint _currentBalanceDai, uint _maxBalanceDai) public view returns(uint){\\n        uint blocks = blocksBaseDeplete - (100*_currentBalanceDai - _maxBalanceDai*(100+thresholdDepleteP))*coeffDepleteP/_currentBalanceDai;\\n        return blocks >= blocksMinDeplete ? blocks : blocksMinDeplete;\\n    }\\n\\n    function harvestFor(address _account) public{\\n        User storage u = users[_account];\\n\\n        require(storageT.dai().transfer(_account, pendingRewardDaiFor(_account)));\\n        u.debtDai = u.daiDeposited * accDaiPerDai / 1e18;\\n\\n        uint pendingMatic = pendingRewardMaticFor(_account);\\n        accMaticPerDai = pendingAccMaticPerDai();\\n        maticLastRewardBlock = block.number;\\n        u.debtMatic = u.daiDeposited * accMaticPerDai / 1e18;\\n        payable(_account).transfer(pendingMatic);\\n    }\\n    function depositDaiFor(uint _amount, address _account) external {\\n        User storage user = users[_account];\\n\\n        require(_amount > 0, \\\"AMOUNT_0\\\");\\n        require(storageT.dai().transferFrom(msg.sender, address(this), _amount));\\n\\n        harvestFor(_account);\\n\\n        currentBalanceDai += _amount;\\n        maxBalanceDai += _amount;\\n\\n        user.daiDeposited += _amount;\\n        user.maxDaiDeposited = user.daiDeposited;\\n        user.debtDai = user.daiDeposited * accDaiPerDai / 1e18;\\n        user.debtMatic = user.daiDeposited * accMaticPerDai / 1e18;\\n\\n        emit Deposited(_account, _amount, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // Staking (user interaction)\\n    function harvest() public{\\n        User storage u = users[msg.sender];\\n\\n        require(storageT.dai().transfer(msg.sender, pendingRewardDai()));\\n        u.debtDai = u.daiDeposited * accDaiPerDai / 1e18;\\n\\n        uint pendingMatic = pendingRewardMatic();\\n        accMaticPerDai = pendingAccMaticPerDai();\\n        maticLastRewardBlock = block.number;\\n        u.debtMatic = u.daiDeposited * accMaticPerDai / 1e18;\\n        payable(msg.sender).transfer(pendingMatic);\\n    }\\n    function depositDai(uint _amount) external{\\n        User storage user = users[msg.sender];\\n\\n        require(_amount > 0, \\\"AMOUNT_0\\\");\\n        require(storageT.dai().transferFrom(msg.sender, address(this), _amount));\\n\\n        harvest();\\n\\n        currentBalanceDai += _amount;\\n        maxBalanceDai += _amount;\\n\\n        user.daiDeposited += _amount;\\n        user.maxDaiDeposited = user.daiDeposited;\\n        user.debtDai = user.daiDeposited * accDaiPerDai / 1e18;\\n        user.debtMatic = user.daiDeposited * accMaticPerDai / 1e18;\\n\\n        emit Deposited(msg.sender, _amount, currentBalanceDai, maxBalanceDai);\\n    }\\n    function withdrawDai(uint _amount) external{\\n        User storage user = users[msg.sender];\\n\\n        require(_amount > 0, \\\"AMOUNT_0\\\");\\n        require(_amount <= currentBalanceDai, \\\"BALANCE_TOO_LOW\\\");\\n        require(_amount <= user.daiDeposited, \\\"WITHDRAWING_MORE_THAN_DEPOSITED\\\");\\n        require(_amount <= user.maxDaiDeposited * maxWithdrawP / 100, \\\"MAX_WITHDRAW_P\\\");\\n        require(block.number >= user.withdrawBlock + withdrawTimelock, \\\"TOO_EARLY\\\");\\n\\n        harvest();\\n\\n        currentBalanceDai -= _amount;\\n        maxBalanceDai -= _amount;\\n\\n        user.daiDeposited -= _amount;\\n        user.withdrawBlock = block.number;\\n        user.debtDai = user.daiDeposited * accDaiPerDai / 1e18;\\n        user.debtMatic = user.daiDeposited * accMaticPerDai / 1e18;\\n\\n        require(storageT.dai().transfer(msg.sender, _amount));\\n\\n        emit Withdrawn(msg.sender, _amount, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // MATIC incentives\\n    function distributeRewardMatic(uint _startBlock, uint _endBlock) external payable{\\n        require(msg.sender == rewardDistributor, \\\"WRONG_CALLER\\\");\\n        require(msg.value > 0, \\\"AMOUNT_0\\\");\\n        require(_startBlock < _endBlock, \\\"START_AFTER_END\\\");\\n        require(_startBlock > block.number, \\\"START_BEFORE_NOW\\\");\\n        require(_endBlock - _startBlock >= 100000, \\\"TOO_SHORT\\\");\\n        require(_endBlock - _startBlock <= 1500000, \\\"TOO_LONG\\\");\\n        require(block.number > maticEndBlock, \\\"LAST_MATIC_DISTRIBUTION_NOT_ENDED\\\");\\n        require(maxBalanceDai > 0, \\\"NO_DAI_STAKED\\\");\\n\\n        accMaticPerDai = pendingAccMaticPerDai();\\n        rewardsMatic += msg.value;\\n        maticLastRewardBlock = 0;\\n\\n        maticPerBlock = msg.value / (_endBlock - _startBlock);\\n        maticStartBlock = _startBlock;\\n        maticEndBlock = _endBlock;\\n    }\\n    function pendingAccMaticPerDai() view private returns(uint){\\n        if(maxBalanceDai == 0){ return accMaticPerDai; }\\n        \\n        uint pendingRewardBlocks = 0;\\n        if(block.number > maticStartBlock){\\n            if(block.number <= maticEndBlock){\\n                pendingRewardBlocks = maticLastRewardBlock == 0 ? block.number - maticStartBlock : block.number - maticLastRewardBlock;\\n            }else if(maticLastRewardBlock <= maticEndBlock){\\n                pendingRewardBlocks = maticLastRewardBlock == 0 ? maticEndBlock - maticStartBlock : maticEndBlock - maticLastRewardBlock;\\n            }\\n        }\\n        return accMaticPerDai + pendingRewardBlocks*maticPerBlock*1e18/maxBalanceDai;\\n    }\\n    function pendingRewardMaticFor(address _account) public view returns(uint){\\n        User memory u = users[_account];\\n        return u.daiDeposited * pendingAccMaticPerDai() / 1e18 - u.debtMatic;\\n    }\\n    function pendingRewardMatic() public view returns(uint){\\n        User memory u = users[msg.sender];\\n        return u.daiDeposited * pendingAccMaticPerDai() / 1e18 - u.debtMatic;\\n    }\\n\\n    // DAI incentives\\n    function distributeRewardDai(uint _amount) public onlyCallbacks{        \\n        if(maxBalanceDai > 0){\\n            currentBalanceDai -= _amount;\\n            accDaiPerDai += _amount * 1e18 / maxBalanceDai;\\n            rewardsDai += _amount;\\n        }\\n    }\\n    function pendingRewardDaiFor(address _account) public view returns(uint){\\n        User memory u = users[_account];\\n        return u.daiDeposited * accDaiPerDai / 1e18 - u.debtDai;\\n    }\\n    function pendingRewardDai() public view returns(uint){\\n        User memory u = users[msg.sender];\\n        return u.daiDeposited * accDaiPerDai / 1e18 - u.debtDai;\\n    }\\n    function pendingRewardDaiByAccount(address _account) public view returns(uint){\\n        User memory u = users[_account];\\n        return u.daiDeposited * accDaiPerDai / 1e18 - u.debtDai;\\n    }\\n\\n    // Handle traders DAI when a trade is closed\\n    function sendDaiToTrader(address _trader, uint _amount) external onlyCallbacks{\\n        _amount -= swapFeeP * _amount / 100 / PRECISION;\\n\\n        if(_amount <= currentBalanceDai){\\n            currentBalanceDai -= _amount;\\n            require(storageT.dai().transfer(_trader, _amount));\\n            emit Sent(msg.sender, _trader, _amount, currentBalanceDai, maxBalanceDai);\\n        }else{\\n            daiToClaim[_trader] += _amount;\\n            emit ToClaim(msg.sender, _trader, _amount, currentBalanceDai, maxBalanceDai);\\n        }\\n    }\\n    function claimDai() external{\\n        uint amount = daiToClaim[msg.sender];\\n        require(amount > 0, \\\"NOTHING_TO_CLAIM\\\");\\n        require(currentBalanceDai > amount, \\\"BALANCE_TOO_LOW\\\");\\n\\n        currentBalanceDai -= amount;\\n        require(storageT.dai().transfer(msg.sender, amount));\\n        daiToClaim[msg.sender] = 0;\\n\\n        emit Claimed(msg.sender, amount, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // Handle DAI from opened trades\\n    function receiveDaiFromTrader(address _trader, uint _amount, uint _vaultFee) external onlyCallbacks{\\n        storageT.transferDai(address(storageT), address(this), _amount);\\n        currentBalanceDai += _amount;\\n\\n        distributeRewardDai(_vaultFee);\\n\\n        emit ReceivedFromTrader(msg.sender, _trader, _amount, _vaultFee, currentBalanceDai, maxBalanceDai);\\n    }\\n\\n    // Useful backend function (ignore)\\n    function backend(address _trader) external view returns(uint,uint,uint,StorageInterfaceV5.Trader memory,uint[] memory, StorageInterfaceV5.PendingMarketOrder[] memory, uint[][5] memory){\\n        uint[] memory pendingIds = storageT.getPendingOrderIds(_trader);\\n\\n        StorageInterfaceV5.PendingMarketOrder[] memory pendingMarket = new StorageInterfaceV5.PendingMarketOrder[](pendingIds.length);\\n        for(uint i = 0; i < pendingIds.length; i++){\\n            pendingMarket[i] = storageT.reqID_pendingMarketOrder(pendingIds[i]);\\n        }\\n\\n        uint[][5] memory nftIds;\\n        for(uint j = 0; j < 5; j++){\\n            uint nftsCount = storageT.nfts(j).balanceOf(_trader);\\n            nftIds[j] = new uint[](nftsCount);\\n            for(uint i = 0; i < nftsCount; i++){ \\n                nftIds[j][i] = storageT.nfts(j).tokenOfOwnerByIndex(_trader, i); \\n            }\\n        }\\n\\n        return (\\n            storageT.dai().allowance(_trader, address(storageT)),\\n            storageT.dai().balanceOf(_trader),\\n            storageT.linkErc677().allowance(_trader, address(storageT)),\\n            storageT.traders(_trader),\\n            pendingIds, \\n            pendingMarket, \\n            nftIds\\n        );\\n    }\\n}\",\"keccak256\":\"0x677171ee7b18c3b020b6a473064411c9ba03fe3cc1bd812ed7496fc68ae14919\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface GNSPairInfosInterfaceV6{\\n    function maxNegativePnlOnOpenP() external view returns(uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice,   // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    ) external view returns(\\n        uint priceImpactP,      // PRECISION (%)\\n        uint priceAfterImpact   // PRECISION\\n    );\\n\\n   function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice,  // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns(uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral,   // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee    // 1e18 (DAI)\\n    ) external returns(uint); // 1e18 (DAI)\\n\\n    function initialize(StorageInterfaceV5) external;\\n}\",\"keccak256\":\"0xa5cd5f2a70169c406cc3daff4c11bc7725d29d5421a20718f906ee0abd96cf7d\",\"license\":\"MIT\"},\"contracts/interfaces/KravFactoryInterface.sol\":{\"content\":\"pragma solidity 0.8.14;\\n\\nimport \\\"./TokenInterfaceV5.sol\\\";\\n\\ninterface KravFactoryInterface {\\n    function transferTokenProxy(TokenInterfaceV5 _token, address _from, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x20d51fd58432952c4bd7a64e1904678abef3a8047d69ef5b68914dabfea7d74c\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xc15a2883e44dce70305e896f2492f485c77f1a01595a9bb42d2662a22cfa5274\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface PairsStorageInterfaceV6{\\n    struct Pair{\\n        string from;\\n        string to;\\n        Feed feed;\\n        uint spreadP;               // PRECISION\\n        uint groupIndex;\\n        uint feeIndex;\\n        int proportionBTC;          // 1000 -> ALT:BTC = 1000:1 ; -1000 -> ALT:BTC = 1:1000\\n    }\\n    struct Group{\\n        string name;\\n        bytes32 job;\\n        uint minLeverage;\\n        uint maxLeverage;\\n        uint maxCollateralP;        // % (of DAI vault current balance)\\n    }\\n    struct Fee{\\n        string name;\\n        uint openFeeP;              // PRECISION (% of leveraged pos)\\n        uint closeFeeP;             // PRECISION (% of leveraged pos)\\n        uint oracleFeeP;            // PRECISION (% of leveraged pos)\\n        uint nftLimitOrderFeeP;     // PRECISION (% of leveraged pos)\\n        uint referralFeeP;          // PRECISION (% of leveraged pos)\\n        uint minLevPosDai;          // 1e18 (collateral x leverage, useful for min fee)\\n    }\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function initialize(uint _currentOrderId, StorageInterfaceV5 _storageT) external;\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n    function addFee(Fee calldata _fee) external;\\n    function addGroup(Group calldata _group) external;\\n    function addPair(Pair calldata _pair) external;\\n}\",\"keccak256\":\"0xb74e43340921cf67175e86076cdd083672dfb39326a47847747ef2bfedd20ccb\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './UniswapRouterInterfaceV5.sol';\\nimport './TokenInterfaceV5.sol';\\nimport './NftInterfaceV5.sol';\\nimport './VaultInterfaceV5.sol';\\nimport './PairsStorageInterfaceV6.sol';\\nimport \\\"./GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"./KravFactoryInterface.sol\\\";\\npragma solidity 0.8.14;\\n\\ninterface StorageInterfaceV5{\\n    enum LimitOrder { TP, SL, LIQ, OPEN }\\n    struct Trader{\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal;  // 1e18\\n    }\\n    struct Trade{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken;       // 1e18\\n        uint positionSizeDai;       // 1e18\\n        uint openPrice;             // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION\\n        uint sl;                    // PRECISION\\n    }\\n    struct TradeInfo{\\n        uint tokenId;\\n        uint tokenPriceDai;         // PRECISION\\n        uint openInterestDai;       // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize;          // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION (%)\\n        uint sl;                    // PRECISION (%)\\n        uint minPrice;              // PRECISION\\n        uint maxPrice;              // PRECISION\\n        uint block;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingMarketOrder{\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice;           // PRECISION\\n        uint slippageP;             // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingNftOrder{\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n    function initialize(KravFactoryInterface, TokenInterfaceV5, TokenInterfaceV5) external;\\n    function PRECISION() external pure returns(uint);\\n    function gov() external view returns(address);\\n    function dev() external view returns(address);\\n    function dai() external view returns(TokenInterfaceV5);\\n    // function token() external view returns(TokenInterfaceV5);\\n    function linkErc677() external view returns(TokenInterfaceV5);\\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\\n    function priceAggregator() external view returns(AggregatorInterfaceV6);\\n    function vault() external view returns(VaultInterfaceV5);\\n    function trading() external view returns(address);\\n    function callbacks() external view returns(address);\\n    function handleTokens(address,uint,bool) external;\\n    function transferDai(address, address, uint) external;\\n    function transferLinkToAggregator(address, uint, uint) external;\\n    function unregisterTrade(address, uint, uint) external;\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n    function storeReferral(address, address) external;\\n    function openTrades(address, uint, uint) external view returns(Trade memory);\\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\\n    function updateSl(address, uint, uint, uint) external;\\n    function updateTp(address, uint, uint, uint) external;\\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\\n    function spreadReductionsP(uint) external view returns(uint);\\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\\n    function maxSlP() external view returns(uint);\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\\n    function increaseNftRewards(uint, uint) external;\\n    function nftSuccessTimelock() external view returns(uint);\\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\\n    function setNftLastSuccess(uint) external;\\n    function updateTrade(Trade memory) external;\\n    function nftLastSuccess(uint) external view returns(uint);\\n    function unregisterPendingNftOrder(uint) external;\\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\\n    function distributeLpRewards(uint) external;\\n    function getReferral(address) external view returns(address);\\n    function increaseReferralRewards(address, uint) external;\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n    function setLeverageUnlocked(address, uint) external;\\n    function getLeverageUnlocked(address) external view returns(uint);\\n    function openLimitOrdersCount(address, uint) external view returns(uint);\\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\\n    function openTradesCount(address, uint) external view returns(uint);\\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\\n    function maxTradesPerPair() external view returns(uint);\\n    function maxTradesPerBlock() external view returns(uint);\\n    function tradesPerBlock(uint) external view returns(uint);\\n    function pendingOrderIdsCount(address) external view returns(uint);\\n    function maxPendingMarketOrders() external view returns(uint);\\n    function maxGainP() external view returns(uint);\\n    function defaultLeverageUnlocked() external view returns(uint);\\n    function openInterestDai(uint, uint) external view returns(uint);\\n    function getPendingOrderIds(address) external view returns(uint[] memory);\\n    function traders(address) external view returns(Trader memory);\\n    function nfts(uint) external view returns(NftInterfaceV5);\\n    function setPriceAggregator(address) external;\\n    function addTradingContract(address _trading) external;\\n    function setTrading(address _trading) external;\\n    function setCallbacks(address _callbacks) external;\\n    function setVault(address _vault) external;\\n    function setMaxOpenInterestDai(uint _pairIndex, uint _newMaxOpenInterest) external;\\n    function factory() external view returns(KravFactoryInterface);\\n}\\n\\ninterface AggregatorInterfaceV6{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function initialize(address[] memory, PairsStorageInterfaceV6, address, StorageInterfaceV5, address) external;\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function nftRewards() external view returns(NftRewardsInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceDai() external view returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function tokenDaiReservesLp() external view returns(uint, uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface NftRewardsInterfaceV6{\\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\\n    function initialize(StorageInterfaceV5 _storageT) external;\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\\n}\\n\\ninterface TradingInterface {\\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external;\\n}\",\"keccak256\":\"0xd8808232d2d5881c22f743ce6680281cfb465163da1de6c95eb75d3231030c4c\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x839cb0952ddb74fd2cc563cbc511a7f4cec56599cb7cc3502f97c32327f2fe58\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface UniswapRouterInterfaceV5{\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x366be084acb30ed686cc7f4999f30568ebdb11e6cc5909c6b24f95092b4dbddf\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface VaultInterfaceV5{\\n\\tfunction initialize(StorageInterfaceV5 _storageT) external;\\n\\tfunction sendDaiToTrader(address, uint) external;\\n\\tfunction receiveDaiFromTrader(address, uint, uint) external;\\n\\tfunction currentBalanceDai() external view returns(uint);\\n\\tfunction distributeRewardDai(uint) external;\\n\\tfunction depositDaiFor(uint _amount, address _account) external;\\n}\",\"keccak256\":\"0xac5be6546f4f03e71e0def15ff07f8193b7bd7609faa0b3dd78c05eea6f6dd2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526109c460015561271060025560056003556127106004556107d06005556175306006556064600755600a60085561a8c06009556019600a55617530600b553480156200004f57600080fd5b5060405162004666380380620046668339810160408190526200007291620000df565b6001600160a01b038116620000b95760405162461bcd60e51b81526020600482015260096024820152680414444524553535f360bc1b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b039290921691909117905562000111565b600060208284031215620000f257600080fd5b81516001600160a01b03811681146200010a57600080fd5b9392505050565b61454580620001216000396000f3fe60806040526004361061038a5760003560e01c806367f4d930116101dc578063be3c77d811610102578063de816301116100a0578063f68183451161006f578063f6818345146109cf578063fbe1ebec146109e4578063fd67d1b11461064e578063fe80dd1614610a0457600080fd5b8063de81630114610979578063e251a7391461098f578063e48b98e4146109af578063ebbaaacb1461064257600080fd5b8063cdff4371116100dc578063cdff4371146108fa578063d4b46e0414610910578063d562073914610943578063d57f87f01461096357600080fd5b8063be3c77d8146108ae578063c2a19c84146108c4578063c4d66de8146108da57600080fd5b806394b89bc21161017a578063a9d7f88911610149578063a9d7f88914610839578063aaf5eb681461084f578063acc2166a14610866578063b243fb011461088e57600080fd5b806394b89bc2146107715780639cdcdc6b14610791578063a6dc7318146107b1578063a87430ba146107c757600080fd5b806379fc3126116101b657806379fc3126146107125780637cbf6f1c1461072857806385d6f6f51461073b57806393a991af1461075157600080fd5b806367f4d930146106c65780637144b6d6146106e657806379c16036146106fc57600080fd5b8063214a9a33116102c15780634641257d1161025f57806354b984b21161022e57806354b984b21461064e5780635cbd86cc1461066e578063620ed4fe1461068457806363caf47a146106b157600080fd5b80634641257d146105ed5780635140542214610602578063517b2fa814610622578063538e07591461064257600080fd5b80633aa934ab1161029b5780633aa934ab1461058b5780633ceaed96146105a1578063416df366146105b7578063423de639146105d757600080fd5b8063214a9a331461052b57806329f79a741461054b57806335842f741461056b57600080fd5b80630a923fea1161032e57806316fff0741161030857806316fff0741461049d5780631a92d20c146104d55780631e2d87c8146104f55780631eefa7401461050b57600080fd5b80630a923fea146104475780630b162d8a146104675780630ba6070e1461047d57600080fd5b806305fac5601161036a57806305fac560146103ee578063064cc89a146104045780630661c6ce1461041b5780630851a2021461043157600080fd5b80627e0d131461038f5780628bd594146103b857806305cc435f146103d8575b600080fd5b34801561039b57600080fd5b506103a560015481565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103a56103d3366004613d62565b610a24565b3480156103e457600080fd5b506103a560125481565b3480156103fa57600080fd5b506103a560085481565b34801561041057600080fd5b50610419610a9a565b005b34801561042757600080fd5b506103a560095481565b34801561043d57600080fd5b506103a5600d5481565b34801561045357600080fd5b50610419610462366004613d84565b610ca4565b34801561047357600080fd5b506103a560075481565b34801561048957600080fd5b50610419610498366004613d84565b610dfd565b3480156104a957600080fd5b506000546104bd906001600160a01b031681565b6040516001600160a01b0390911681526020016103af565b3480156104e157600080fd5b506104196104f0366004613d84565b610f56565b34801561050157600080fd5b506103a560145481565b34801561051757600080fd5b50610419610526366004613d84565b611105565b34801561053757600080fd5b50610419610546366004613db2565b611270565b34801561055757600080fd5b50610419610566366004613d84565b61155c565b34801561057757600080fd5b50610419610586366004613d84565b6116c9565b34801561059757600080fd5b506103a560035481565b3480156105ad57600080fd5b506103a5600c5481565b3480156105c357600080fd5b506104196105d2366004613d84565b6118f8565b3480156105e357600080fd5b506103a5600b5481565b3480156105f957600080fd5b50610419611aa0565b34801561060e57600080fd5b506103a561061d366004613dde565b611c59565b34801561062e57600080fd5b5061041961063d366004613dfb565b611ce5565b34801561041957600080fd5b34801561065a57600080fd5b506103a5610669366004613dde565b611f30565b34801561067a57600080fd5b506103a560105481565b34801561069057600080fd5b506103a561069f366004613dde565b60186020526000908152604090205481565b3480156106bd57600080fd5b506103a5611fa2565b3480156106d257600080fd5b506104196106e1366004613d84565b612024565b3480156106f257600080fd5b506103a560135481565b34801561070857600080fd5b506103a5600f5481565b34801561071e57600080fd5b506103a560025481565b610419610736366004613d62565b61213e565b34801561074757600080fd5b506103a560115481565b34801561075d57600080fd5b5061041961076c366004613d84565b61242b565b34801561077d57600080fd5b5061041961078c366004613d84565b6127ae565b34801561079d57600080fd5b506104196107ac366004613d84565b612905565b3480156107bd57600080fd5b506103a5600e5481565b3480156107d357600080fd5b506108116107e2366004613dde565b601760205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016103af565b34801561084557600080fd5b506103a560165481565b34801561085b57600080fd5b506103a5620186a081565b34801561087257600080fd5b506104bd73c66fbe50dd33c9aadd65707f7088d597c86fe00f81565b34801561089a57600080fd5b506104196108a9366004613d84565b612a5e565b3480156108ba57600080fd5b506103a560065481565b3480156108d057600080fd5b506103a560155481565b3480156108e657600080fd5b506104196108f5366004613dde565b612b94565b34801561090657600080fd5b506103a560045481565b34801561091c57600080fd5b5061093061092b366004613dde565b612c39565b6040516103af9796959493929190613f78565b34801561094f57600080fd5b5061041961095e366004613d84565b61342c565b34801561096f57600080fd5b506103a560055481565b34801561098557600080fd5b506103a5600a5481565b34801561099b57600080fd5b506104196109aa366004613d84565b6135e8565b3480156109bb57600080fd5b506103a56109ca366004613d62565b613797565b3480156109db57600080fd5b506103a56137f9565b3480156109f057600080fd5b506104196109ff366004613dde565b613862565b348015610a1057600080fd5b50610419610a1f366004614025565b613a2b565b600080836007546008546064610a3a9190614070565b610a449086614088565b610a4f876064614088565b610a5991906140a7565b610a639190614088565b610a6d91906140be565b600454610a7a91906140a7565b9050600554811015610a8e57600554610a90565b805b9150505b92915050565b3360009081526018602052604090205480610afc5760405162461bcd60e51b815260206004820152601060248201527f4e4f5448494e475f544f5f434c41494d0000000000000000000000000000000060448201526064015b60405180910390fd5b80600d5411610b3f5760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610af3565b80600d6000828254610b5191906140a7565b90915550506000546040805163f4b9fa7560e01b815290516001600160a01b039092169163f4b9fa75916004808201926020929091908290030181865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc491906140e0565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c379190614112565b610c4057600080fd5b33600081815260186020908152604080832092909255600d54600c5483519485529184018590529183019190915260608201527f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e906080015b60405180910390a150565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1991906140e0565b6001600160a01b0316336001600160a01b031614610d645760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b6103e8811015610da35760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610af3565b6001819055604080518181526010918101919091527f626c6f636b7342617365526566696c6c000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7291906140e0565b6001600160a01b0316336001600160a01b031614610ebd5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b6103e8811015610efc5760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610af3565b6005819055604080518181526010918101919091527f626c6f636b734d696e4465706c657465000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb91906140e0565b6001600160a01b0316336001600160a01b0316146110165760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600081116110505760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610af3565b600a611060620186a06003614088565b61106a91906140be565b8111156110ab5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610af3565b600281905560408051818152600a918101919091527f726566696c6c4c697150000000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a91906140e0565b6001600160a01b0316336001600160a01b0316146111c55760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b61a8c081116112165760405162461bcd60e51b815260206004820152600f60248201527f4c4553535f5448414e5f315f44415900000000000000000000000000000000006044820152606401610af3565b6009819055604080518181526010918101919091527f776974686472617754696d656c6f636b000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e491906140e0565b6001600160a01b0316336001600160a01b0316146113355760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610af3565b620186a0606482600b546113499190614088565b61135391906140be565b61135d91906140be565b61136790826140a7565b9050600d5481116114d65780600d600082825461138491906140a7565b90915550506000546040805163f4b9fa7560e01b815290516001600160a01b039092169163f4b9fa75916004808201926020929091908290030181865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f791906140e0565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af1158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c9190614112565b61147557600080fd5b600d54600c54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f80b773cd8ea3bf97475bccfb129d2ad177499dd4b091fbf87669b370fffef58c9060a0015b60405180910390a15050565b6001600160a01b038216600090815260186020526040812080548392906114fe908490614070565b9091555050600d54600c54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f7a17f79bf8cde7a30daa7135b2d37fac6ebbf8097bc0d3d5697faf40fbb7efb49060a0016114ca565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d191906140e0565b6001600160a01b0316336001600160a01b03161461161c5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b620186a081111561166f5760405162461bcd60e51b815260206004820152600760248201527f41424f56455f31000000000000000000000000000000000000000000000000006044820152606401610af3565b600b819055604080518181526008918101919091527f73776170466565500000000000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b336000908152601760205260409020816117105760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b60008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178591906140e0565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b0391909116906323b872dd906064016020604051808303816000875af11580156117da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fe9190614112565b61180757600080fd5b61180f611aa0565b81600d60008282546118219190614070565b9250508190555081600c600082825461183a9190614070565b9091555050805482908290600090611853908490614070565b9091555050805460018201819055600f54670de0b6b3a7640000916118789190614088565b61188291906140be565b60038201556012548154670de0b6b3a76400009161189f91614088565b6118a991906140be565b6004820155600d54600c5460408051338152602081018690529081019290925260608201527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada3906080016114ca565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d91906140e0565b6001600160a01b0316336001600160a01b0316146119b85760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600a811015611a095760405162461bcd60e51b815260206004820152600860248201527f42454c4f575f31300000000000000000000000000000000000000000000000006044820152606401610af3565b6064811115611a465760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610af3565b600a81905560408051818152600c918101919091527f6d617857697468647261775000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b3360009081526017602090815260408083209254815163f4b9fa7560e01b815291516001600160a01b039091169263f4b9fa7592600480820193918290030181865afa158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1891906140e0565b6001600160a01b031663a9059cbb33611b2f6137f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb69190614112565b611bbf57600080fd5b600f548154670de0b6b3a764000091611bd791614088565b611be191906140be565b60038201556000611bf0611fa2565b9050611bfa613bdc565b6012819055436015558254670de0b6b3a764000091611c1891614088565b611c2291906140be565b6004830155604051339082156108fc029083906000818181858888f19350505050158015611c54573d6000803e3d6000fd5b505050565b6001600160a01b0381166000908152601760209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052670de0b6b3a7640000611cbe613bdc565b8351611cca9190614088565b611cd491906140be565b611cde91906140a7565b9392505050565b6001600160a01b038116600090815260176020526040902082611d355760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b60008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa91906140e0565b6040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190614112565b611e2c57600080fd5b611e3582613862565b82600d6000828254611e479190614070565b9250508190555082600c6000828254611e609190614070565b9091555050805483908290600090611e79908490614070565b9091555050805460018201819055600f54670de0b6b3a764000091611e9e9190614088565b611ea891906140be565b60038201556012548154670de0b6b3a764000091611ec591614088565b611ecf91906140be565b6004820155600d54600c54604080516001600160a01b0386168152602081018790529081019290925260608201527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada3906080015b60405180910390a1505050565b6001600160a01b0381166000908152601760209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083018190526004909101546080830152600f5491929091670de0b6b3a764000091611cca9190614088565b336000908152601760209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052670de0b6b3a7640000611ffe613bdc565b835161200a9190614088565b61201491906140be565b61201e91906140a7565b91505090565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209991906140e0565b6001600160a01b0316336001600160a01b0316146120e45760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600781905560408051818152600d918101919091527f636f6566664465706c65746550000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b3373c66fbe50dd33c9aadd65707f7088d597c86fe00f146121a15760405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f43414c4c455200000000000000000000000000000000000000006044820152606401610af3565b600034116121dc5760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b80821061222b5760405162461bcd60e51b815260206004820152600f60248201527f53544152545f41465445525f454e4400000000000000000000000000000000006044820152606401610af3565b43821161227a5760405162461bcd60e51b815260206004820152601060248201527f53544152545f4245464f52455f4e4f57000000000000000000000000000000006044820152606401610af3565b620186a061228883836140a7565b10156122d65760405162461bcd60e51b815260206004820152600960248201527f544f4f5f53484f525400000000000000000000000000000000000000000000006044820152606401610af3565b6216e3606122e483836140a7565b11156123325760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c4f4e470000000000000000000000000000000000000000000000006044820152606401610af3565b601454431161238d5760405162461bcd60e51b815260206004820152602160248201527f4c4153545f4d415449435f444953545249425554494f4e5f4e4f545f454e44456044820152601160fa1b6064820152608401610af3565b6000600c54116123df5760405162461bcd60e51b815260206004820152600d60248201527f4e4f5f4441495f5354414b4544000000000000000000000000000000000000006044820152606401610af3565b6123e7613bdc565b60128190555034601660008282546123ff9190614070565b9091555050600060155561241382826140a7565b61241d90346140be565b601155601391909155601455565b336000908152601760205260409020816124725760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b600d548211156124b65760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610af3565b80548211156125075760405162461bcd60e51b815260206004820152601f60248201527f5749544844524157494e475f4d4f52455f5448414e5f4445504f5349544544006044820152606401610af3565b6064600a54826001015461251b9190614088565b61252591906140be565b8211156125745760405162461bcd60e51b815260206004820152600e60248201527f4d41585f57495448445241575f500000000000000000000000000000000000006044820152606401610af3565b60095481600201546125869190614070565b4310156125d55760405162461bcd60e51b815260206004820152600960248201527f544f4f5f4541524c5900000000000000000000000000000000000000000000006044820152606401610af3565b6125dd611aa0565b81600d60008282546125ef91906140a7565b9250508190555081600c600082825461260891906140a7565b90915550508054829082906000906126219084906140a7565b9091555050436002820155600f548154670de0b6b3a76400009161264491614088565b61264e91906140be565b60038201556012548154670de0b6b3a76400009161266b91614088565b61267591906140be565b6004808301919091556000546040805163f4b9fa7560e01b815290516001600160a01b039092169263f4b9fa759282820192602092908290030181865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e891906140e0565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015612737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275b9190614112565b61276457600080fd5b600d54600c5460408051338152602081018690529081019290925260608201527f75e161b3e824b114fc1a33274bd7091918dd4e639cede50b78b15a4eea956a21906080016114ca565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282391906140e0565b6001600160a01b0316336001600160a01b03161461286e5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b60648111156128ab5760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610af3565b6008819055604080518181526011918101919091527f7468726573686f6c644465706c657465500000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297a91906140e0565b6001600160a01b0316336001600160a01b0316146129c55760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b6103e8811015612a045760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610af3565b6004819055604080518181526011918101919091527f626c6f636b73426173654465706c6574650000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad291906140e0565b6001600160a01b0316336001600160a01b031614612b235760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610af3565b600c5415612b915780600d6000828254612b3d91906140a7565b9091555050600c54612b5782670de0b6b3a7640000614088565b612b6191906140be565b600f6000828254612b729190614070565b925050819055508060106000828254612b8b9190614070565b90915550505b50565b6000546001600160a01b0316158015612bb557506001600160a01b03811615155b612bbe57600080fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556109c46001556127106002819055600560038190556004919091556107d0905561753060068190556064600755600a600881905561a8c060095560199055600b55565b6000806000612c6b60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b606080612c76613ca6565b60008054604051632e3b564f60e11b81526001600160a01b038b8116600483015290911690635c76ac9e90602401600060405180830381865afa158015612cc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ce991908101906141cc565b90506000815167ffffffffffffffff811115612d0757612d07614138565b604051908082528060200260200182016040528015612d4057816020015b612d2d613ccd565b815260200190600190039081612d255790505b50905060005b8251811015612e105760005483516001600160a01b039091169063b66e6b0590859084908110612d7857612d78614272565b60200260200101516040518263ffffffff1660e01b8152600401612d9e91815260200190565b6101e060405180830381865afa158015612dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de09190614288565b828281518110612df257612df2614272565b60200260200101819052508080612e089061436b565b915050612d46565b50612e19613ca6565b60005b60058110156130af576000805460405163265aa62160e01b8152600481018490526001600160a01b039091169063265aa62190602401602060405180830381865afa158015612e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9391906140e0565b6040516370a0823160e01b81526001600160a01b038f8116600483015291909116906370a0823190602401602060405180830381865afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff9190614384565b90508067ffffffffffffffff811115612f1a57612f1a614138565b604051908082528060200260200182016040528015612f43578160200160208202803683370190505b50838360058110612f5657612f56614272565b602002015260005b8181101561309a5760005460405163265aa62160e01b8152600481018590526001600160a01b039091169063265aa62190602401602060405180830381865afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd391906140e0565b6001600160a01b0316632f745c598f836040518363ffffffff1660e01b81526004016130149291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015613031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130559190614384565b84846005811061306757613067614272565b6020020151828151811061307d5761307d614272565b6020908102919091010152806130928161436b565b915050612f5e565b505080806130a79061436b565b915050612e1c565b5060008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015613101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312591906140e0565b600054604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa158015613176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319a9190614384565b60008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f91906140e0565b6040516370a0823160e01b81526001600160a01b038e8116600483015291909116906370a0823190602401602060405180830381865afa158015613257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327b9190614384565b60008054906101000a90046001600160a01b03166001600160a01b031663fece4eac6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f091906140e0565b6001600160a01b031663dd62ed3e8e60008054906101000a90046001600160a01b03166040518363ffffffff1660e01b81526004016133459291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa158015613362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133869190614384565b60008054906101000a90046001600160a01b03166001600160a01b03166392a88fa28f6040518263ffffffff1660e01b81526004016133d491906001600160a01b0391909116815260200190565b606060405180830381865afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613415919061439d565b929e919d509b509099509297509095509350915050565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561347d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a191906140e0565b6001600160a01b0316336001600160a01b0316146134ec5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600281101561353d5760405162461bcd60e51b815260206004820152600760248201527f42454c4f575f32000000000000000000000000000000000000000000000000006044820152606401610af3565b600a81111561358e5760405162461bcd60e51b815260206004820152600860248201527f41424f56455f31300000000000000000000000000000000000000000000000006044820152606401610af3565b600381905560408051818152600b918101919091527f706f776572526566696c6c0000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d91906140e0565b6001600160a01b0316336001600160a01b0316146136a85760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600081116136e25760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610af3565b600a6136f2620186a06003614088565b6136fc91906140be565b81111561373d5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610af3565b600681905560408051818152600b918101919091527f6465706c6574654c6971500000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b600080600354620186a06137ab91906144e3565b600154600354856137bf620186a089614088565b6137c991906140be565b6137d391906144e3565b6137dd9190614088565b6137e791906140be565b90506001811015610a8e576001610a90565b336000908152601760209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083018190526004909101546080830152600f5491929091670de0b6b3a76400009161200a9190614088565b6001600160a01b0380821660009081526017602090815260408083209254815163f4b9fa7560e01b815291519394169263f4b9fa75926004808401939192918290030181865afa1580156138ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138de91906140e0565b6001600160a01b031663a9059cbb836138f685611f30565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061397d9190614112565b61398657600080fd5b600f548154670de0b6b3a76400009161399e91614088565b6139a891906140be565b600382015560006139b883611c59565b90506139c2613bdc565b6012819055436015558254670de0b6b3a7640000916139e091614088565b6139ea91906140be565b60048301556040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015613a25573d6000803e3d6000fd5b50505050565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9f91906140e0565b6001600160a01b0316336001600160a01b031614613af05760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610af3565b60005460405163373873db60e11b81526001600160a01b03909116600482018190523060248301526044820184905290636e70e7b690606401600060405180830381600087803b158015613b4357600080fd5b505af1158015613b57573d6000803e3d6000fd5b5050505081600d6000828254613b6d9190614070565b90915550613b7c905081612a5e565b600d54600c54604080513381526001600160a01b038716602082015290810185905260608101849052608081019290925260a08201527ffe3518e5e73f574892bc6ff79a4ac4816e01c14b62127612ca3aa45667db361b9060c001611f23565b6000600c54600003613bef575060125490565b6000601354431115613c6d576014544311613c325760155415613c1e57601554613c1990436140a7565b613c2b565b601354613c2b90436140a7565b9050613c6d565b60145460155411613c6d5760155415613c5a57601554601454613c5591906140a7565b613c6a565b601354601454613c6a91906140a7565b90505b600c54601154613c7d9083614088565b613c8f90670de0b6b3a7640000614088565b613c9991906140be565b60125461201e9190614070565b6040518060a001604052806005905b6060815260200190600190039081613cb55790505090565b6040518060c00160405280613d3960405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060408385031215613d7557600080fd5b50508035926020909101359150565b600060208284031215613d9657600080fd5b5035919050565b6001600160a01b0381168114612b9157600080fd5b60008060408385031215613dc557600080fd5b8235613dd081613d9d565b946020939093013593505050565b600060208284031215613df057600080fd5b8135610a8e81613d9d565b60008060408385031215613e0e57600080fd5b823591506020830135613e2081613d9d565b809150509250929050565b600081518084526020808501945080840160005b83811015613f00578151805180516001600160a01b0316895284810151858a0152604080820151818b0152606080830151818c0152608080840151818d015260a080850151818e015260c0850151613e9b60c08f018215159052565b5060e085810151908e015261010080860151908e015261012094850151948d0194909452848801516101408d0152918401516101608c01528301516101808b01528201516101a08a015201516101c08801526101e09096019590820190600101613e3f565b509495945050505050565b60008260a08101836000805b6005811015613f6c578484038852825180518086526020918201918087019190855b82811015613f5557845184529381019392810192600101613f39565b509a8b019a91965050939093019250600101613f17565b50919695505050505050565b60006101208083018a845260208a81860152896040860152885160608601526001600160a01b03818a0151166080860152604089015160a08601528260c0860152819250875180835261014086019350818901925060005b81811015613fec57835185529382019392820192600101613fd0565b5050505082810360e08401526140028186613e2b565b90508281036101008401526140178185613f0b565b9a9950505050505050505050565b60008060006060848603121561403a57600080fd5b833561404581613d9d565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156140835761408361405a565b500190565b60008160001904831182151516156140a2576140a261405a565b500290565b6000828210156140b9576140b961405a565b500390565b6000826140db57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156140f257600080fd5b8151610a8e81613d9d565b8051801515811461410d57600080fd5b919050565b60006020828403121561412457600080fd5b611cde826140fd565b805161410d81613d9d565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561417157614171614138565b60405290565b604051610140810167ffffffffffffffff8111828210171561417157614171614138565b604051601f8201601f1916810167ffffffffffffffff811182821017156141c4576141c4614138565b604052919050565b600060208083850312156141df57600080fd5b825167ffffffffffffffff808211156141f757600080fd5b818501915085601f83011261420b57600080fd5b81518181111561421d5761421d614138565b8060051b915061422e84830161419b565b818152918301840191848101908884111561424857600080fd5b938501935b838510156142665784518252938501939085019061424d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008183036101e081121561429c57600080fd5b6142a461414e565b610140808312156142b457600080fd5b6142bc614177565b92506142c78561412d565b83526020850151602084015260408501516040840152606085015160608401526080850151608084015260a085015160a084015261430760c086016140fd565b60c084015260e0858101519084015261010080860151908401526101208086015190840152918152908301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b60006001820161437d5761437d61405a565b5060010190565b60006020828403121561439657600080fd5b5051919050565b6000606082840312156143af57600080fd5b6040516060810181811067ffffffffffffffff821117156143d2576143d2614138565b6040528251815260208301516143e781613d9d565b60208201526040928301519281019290925250919050565b600181815b8085111561443a5781600019048211156144205761442061405a565b8085161561442d57918102915b93841c9390800290614404565b509250929050565b60008261445157506001610a94565b8161445e57506000610a94565b8160018114614474576002811461447e5761449a565b6001915050610a94565b60ff84111561448f5761448f61405a565b50506001821b610a94565b5060208310610133831016604e8410600b84101617156144bd575081810a610a94565b6144c783836143ff565b80600019048211156144db576144db61405a565b029392505050565b6000611cde838361444256fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9aba2646970667358221220b9de76471d6dfe2ebf912d64287df993aebeb8ca78c070eefba09dc3ad08598b64736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361061038a5760003560e01c806367f4d930116101dc578063be3c77d811610102578063de816301116100a0578063f68183451161006f578063f6818345146109cf578063fbe1ebec146109e4578063fd67d1b11461064e578063fe80dd1614610a0457600080fd5b8063de81630114610979578063e251a7391461098f578063e48b98e4146109af578063ebbaaacb1461064257600080fd5b8063cdff4371116100dc578063cdff4371146108fa578063d4b46e0414610910578063d562073914610943578063d57f87f01461096357600080fd5b8063be3c77d8146108ae578063c2a19c84146108c4578063c4d66de8146108da57600080fd5b806394b89bc21161017a578063a9d7f88911610149578063a9d7f88914610839578063aaf5eb681461084f578063acc2166a14610866578063b243fb011461088e57600080fd5b806394b89bc2146107715780639cdcdc6b14610791578063a6dc7318146107b1578063a87430ba146107c757600080fd5b806379fc3126116101b657806379fc3126146107125780637cbf6f1c1461072857806385d6f6f51461073b57806393a991af1461075157600080fd5b806367f4d930146106c65780637144b6d6146106e657806379c16036146106fc57600080fd5b8063214a9a33116102c15780634641257d1161025f57806354b984b21161022e57806354b984b21461064e5780635cbd86cc1461066e578063620ed4fe1461068457806363caf47a146106b157600080fd5b80634641257d146105ed5780635140542214610602578063517b2fa814610622578063538e07591461064257600080fd5b80633aa934ab1161029b5780633aa934ab1461058b5780633ceaed96146105a1578063416df366146105b7578063423de639146105d757600080fd5b8063214a9a331461052b57806329f79a741461054b57806335842f741461056b57600080fd5b80630a923fea1161032e57806316fff0741161030857806316fff0741461049d5780631a92d20c146104d55780631e2d87c8146104f55780631eefa7401461050b57600080fd5b80630a923fea146104475780630b162d8a146104675780630ba6070e1461047d57600080fd5b806305fac5601161036a57806305fac560146103ee578063064cc89a146104045780630661c6ce1461041b5780630851a2021461043157600080fd5b80627e0d131461038f5780628bd594146103b857806305cc435f146103d8575b600080fd5b34801561039b57600080fd5b506103a560015481565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103a56103d3366004613d62565b610a24565b3480156103e457600080fd5b506103a560125481565b3480156103fa57600080fd5b506103a560085481565b34801561041057600080fd5b50610419610a9a565b005b34801561042757600080fd5b506103a560095481565b34801561043d57600080fd5b506103a5600d5481565b34801561045357600080fd5b50610419610462366004613d84565b610ca4565b34801561047357600080fd5b506103a560075481565b34801561048957600080fd5b50610419610498366004613d84565b610dfd565b3480156104a957600080fd5b506000546104bd906001600160a01b031681565b6040516001600160a01b0390911681526020016103af565b3480156104e157600080fd5b506104196104f0366004613d84565b610f56565b34801561050157600080fd5b506103a560145481565b34801561051757600080fd5b50610419610526366004613d84565b611105565b34801561053757600080fd5b50610419610546366004613db2565b611270565b34801561055757600080fd5b50610419610566366004613d84565b61155c565b34801561057757600080fd5b50610419610586366004613d84565b6116c9565b34801561059757600080fd5b506103a560035481565b3480156105ad57600080fd5b506103a5600c5481565b3480156105c357600080fd5b506104196105d2366004613d84565b6118f8565b3480156105e357600080fd5b506103a5600b5481565b3480156105f957600080fd5b50610419611aa0565b34801561060e57600080fd5b506103a561061d366004613dde565b611c59565b34801561062e57600080fd5b5061041961063d366004613dfb565b611ce5565b34801561041957600080fd5b34801561065a57600080fd5b506103a5610669366004613dde565b611f30565b34801561067a57600080fd5b506103a560105481565b34801561069057600080fd5b506103a561069f366004613dde565b60186020526000908152604090205481565b3480156106bd57600080fd5b506103a5611fa2565b3480156106d257600080fd5b506104196106e1366004613d84565b612024565b3480156106f257600080fd5b506103a560135481565b34801561070857600080fd5b506103a5600f5481565b34801561071e57600080fd5b506103a560025481565b610419610736366004613d62565b61213e565b34801561074757600080fd5b506103a560115481565b34801561075d57600080fd5b5061041961076c366004613d84565b61242b565b34801561077d57600080fd5b5061041961078c366004613d84565b6127ae565b34801561079d57600080fd5b506104196107ac366004613d84565b612905565b3480156107bd57600080fd5b506103a5600e5481565b3480156107d357600080fd5b506108116107e2366004613dde565b601760205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016103af565b34801561084557600080fd5b506103a560165481565b34801561085b57600080fd5b506103a5620186a081565b34801561087257600080fd5b506104bd73c66fbe50dd33c9aadd65707f7088d597c86fe00f81565b34801561089a57600080fd5b506104196108a9366004613d84565b612a5e565b3480156108ba57600080fd5b506103a560065481565b3480156108d057600080fd5b506103a560155481565b3480156108e657600080fd5b506104196108f5366004613dde565b612b94565b34801561090657600080fd5b506103a560045481565b34801561091c57600080fd5b5061093061092b366004613dde565b612c39565b6040516103af9796959493929190613f78565b34801561094f57600080fd5b5061041961095e366004613d84565b61342c565b34801561096f57600080fd5b506103a560055481565b34801561098557600080fd5b506103a5600a5481565b34801561099b57600080fd5b506104196109aa366004613d84565b6135e8565b3480156109bb57600080fd5b506103a56109ca366004613d62565b613797565b3480156109db57600080fd5b506103a56137f9565b3480156109f057600080fd5b506104196109ff366004613dde565b613862565b348015610a1057600080fd5b50610419610a1f366004614025565b613a2b565b600080836007546008546064610a3a9190614070565b610a449086614088565b610a4f876064614088565b610a5991906140a7565b610a639190614088565b610a6d91906140be565b600454610a7a91906140a7565b9050600554811015610a8e57600554610a90565b805b9150505b92915050565b3360009081526018602052604090205480610afc5760405162461bcd60e51b815260206004820152601060248201527f4e4f5448494e475f544f5f434c41494d0000000000000000000000000000000060448201526064015b60405180910390fd5b80600d5411610b3f5760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610af3565b80600d6000828254610b5191906140a7565b90915550506000546040805163f4b9fa7560e01b815290516001600160a01b039092169163f4b9fa75916004808201926020929091908290030181865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc491906140e0565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c379190614112565b610c4057600080fd5b33600081815260186020908152604080832092909255600d54600c5483519485529184018590529183019190915260608201527f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e906080015b60405180910390a150565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1991906140e0565b6001600160a01b0316336001600160a01b031614610d645760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b6103e8811015610da35760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610af3565b6001819055604080518181526010918101919091527f626c6f636b7342617365526566696c6c000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7291906140e0565b6001600160a01b0316336001600160a01b031614610ebd5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b6103e8811015610efc5760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610af3565b6005819055604080518181526010918101919091527f626c6f636b734d696e4465706c657465000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb91906140e0565b6001600160a01b0316336001600160a01b0316146110165760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600081116110505760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610af3565b600a611060620186a06003614088565b61106a91906140be565b8111156110ab5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610af3565b600281905560408051818152600a918101919091527f726566696c6c4c697150000000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a91906140e0565b6001600160a01b0316336001600160a01b0316146111c55760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b61a8c081116112165760405162461bcd60e51b815260206004820152600f60248201527f4c4553535f5448414e5f315f44415900000000000000000000000000000000006044820152606401610af3565b6009819055604080518181526010918101919091527f776974686472617754696d656c6f636b000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e491906140e0565b6001600160a01b0316336001600160a01b0316146113355760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610af3565b620186a0606482600b546113499190614088565b61135391906140be565b61135d91906140be565b61136790826140a7565b9050600d5481116114d65780600d600082825461138491906140a7565b90915550506000546040805163f4b9fa7560e01b815290516001600160a01b039092169163f4b9fa75916004808201926020929091908290030181865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f791906140e0565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af1158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c9190614112565b61147557600080fd5b600d54600c54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f80b773cd8ea3bf97475bccfb129d2ad177499dd4b091fbf87669b370fffef58c9060a0015b60405180910390a15050565b6001600160a01b038216600090815260186020526040812080548392906114fe908490614070565b9091555050600d54600c54604080513381526001600160a01b0386166020820152908101849052606081019290925260808201527f7a17f79bf8cde7a30daa7135b2d37fac6ebbf8097bc0d3d5697faf40fbb7efb49060a0016114ca565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d191906140e0565b6001600160a01b0316336001600160a01b03161461161c5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b620186a081111561166f5760405162461bcd60e51b815260206004820152600760248201527f41424f56455f31000000000000000000000000000000000000000000000000006044820152606401610af3565b600b819055604080518181526008918101919091527f73776170466565500000000000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b336000908152601760205260409020816117105760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b60008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178591906140e0565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b0391909116906323b872dd906064016020604051808303816000875af11580156117da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fe9190614112565b61180757600080fd5b61180f611aa0565b81600d60008282546118219190614070565b9250508190555081600c600082825461183a9190614070565b9091555050805482908290600090611853908490614070565b9091555050805460018201819055600f54670de0b6b3a7640000916118789190614088565b61188291906140be565b60038201556012548154670de0b6b3a76400009161189f91614088565b6118a991906140be565b6004820155600d54600c5460408051338152602081018690529081019290925260608201527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada3906080016114ca565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d91906140e0565b6001600160a01b0316336001600160a01b0316146119b85760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600a811015611a095760405162461bcd60e51b815260206004820152600860248201527f42454c4f575f31300000000000000000000000000000000000000000000000006044820152606401610af3565b6064811115611a465760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610af3565b600a81905560408051818152600c918101919091527f6d617857697468647261775000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b3360009081526017602090815260408083209254815163f4b9fa7560e01b815291516001600160a01b039091169263f4b9fa7592600480820193918290030181865afa158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1891906140e0565b6001600160a01b031663a9059cbb33611b2f6137f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb69190614112565b611bbf57600080fd5b600f548154670de0b6b3a764000091611bd791614088565b611be191906140be565b60038201556000611bf0611fa2565b9050611bfa613bdc565b6012819055436015558254670de0b6b3a764000091611c1891614088565b611c2291906140be565b6004830155604051339082156108fc029083906000818181858888f19350505050158015611c54573d6000803e3d6000fd5b505050565b6001600160a01b0381166000908152601760209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052670de0b6b3a7640000611cbe613bdc565b8351611cca9190614088565b611cd491906140be565b611cde91906140a7565b9392505050565b6001600160a01b038116600090815260176020526040902082611d355760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b60008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa91906140e0565b6040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190614112565b611e2c57600080fd5b611e3582613862565b82600d6000828254611e479190614070565b9250508190555082600c6000828254611e609190614070565b9091555050805483908290600090611e79908490614070565b9091555050805460018201819055600f54670de0b6b3a764000091611e9e9190614088565b611ea891906140be565b60038201556012548154670de0b6b3a764000091611ec591614088565b611ecf91906140be565b6004820155600d54600c54604080516001600160a01b0386168152602081018790529081019290925260608201527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada3906080015b60405180910390a1505050565b6001600160a01b0381166000908152601760209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083018190526004909101546080830152600f5491929091670de0b6b3a764000091611cca9190614088565b336000908152601760209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052670de0b6b3a7640000611ffe613bdc565b835161200a9190614088565b61201491906140be565b61201e91906140a7565b91505090565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209991906140e0565b6001600160a01b0316336001600160a01b0316146120e45760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600781905560408051818152600d918101919091527f636f6566664465706c65746550000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b3373c66fbe50dd33c9aadd65707f7088d597c86fe00f146121a15760405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f43414c4c455200000000000000000000000000000000000000006044820152606401610af3565b600034116121dc5760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b80821061222b5760405162461bcd60e51b815260206004820152600f60248201527f53544152545f41465445525f454e4400000000000000000000000000000000006044820152606401610af3565b43821161227a5760405162461bcd60e51b815260206004820152601060248201527f53544152545f4245464f52455f4e4f57000000000000000000000000000000006044820152606401610af3565b620186a061228883836140a7565b10156122d65760405162461bcd60e51b815260206004820152600960248201527f544f4f5f53484f525400000000000000000000000000000000000000000000006044820152606401610af3565b6216e3606122e483836140a7565b11156123325760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c4f4e470000000000000000000000000000000000000000000000006044820152606401610af3565b601454431161238d5760405162461bcd60e51b815260206004820152602160248201527f4c4153545f4d415449435f444953545249425554494f4e5f4e4f545f454e44456044820152601160fa1b6064820152608401610af3565b6000600c54116123df5760405162461bcd60e51b815260206004820152600d60248201527f4e4f5f4441495f5354414b4544000000000000000000000000000000000000006044820152606401610af3565b6123e7613bdc565b60128190555034601660008282546123ff9190614070565b9091555050600060155561241382826140a7565b61241d90346140be565b601155601391909155601455565b336000908152601760205260409020816124725760405162461bcd60e51b81526020600482015260086024820152670414d4f554e545f360c41b6044820152606401610af3565b600d548211156124b65760405162461bcd60e51b815260206004820152600f60248201526e42414c414e43455f544f4f5f4c4f5760881b6044820152606401610af3565b80548211156125075760405162461bcd60e51b815260206004820152601f60248201527f5749544844524157494e475f4d4f52455f5448414e5f4445504f5349544544006044820152606401610af3565b6064600a54826001015461251b9190614088565b61252591906140be565b8211156125745760405162461bcd60e51b815260206004820152600e60248201527f4d41585f57495448445241575f500000000000000000000000000000000000006044820152606401610af3565b60095481600201546125869190614070565b4310156125d55760405162461bcd60e51b815260206004820152600960248201527f544f4f5f4541524c5900000000000000000000000000000000000000000000006044820152606401610af3565b6125dd611aa0565b81600d60008282546125ef91906140a7565b9250508190555081600c600082825461260891906140a7565b90915550508054829082906000906126219084906140a7565b9091555050436002820155600f548154670de0b6b3a76400009161264491614088565b61264e91906140be565b60038201556012548154670de0b6b3a76400009161266b91614088565b61267591906140be565b6004808301919091556000546040805163f4b9fa7560e01b815290516001600160a01b039092169263f4b9fa759282820192602092908290030181865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e891906140e0565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015612737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275b9190614112565b61276457600080fd5b600d54600c5460408051338152602081018690529081019290925260608201527f75e161b3e824b114fc1a33274bd7091918dd4e639cede50b78b15a4eea956a21906080016114ca565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282391906140e0565b6001600160a01b0316336001600160a01b03161461286e5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b60648111156128ab5760405162461bcd60e51b8152602060048201526009602482015268041424f56455f3130360bc1b6044820152606401610af3565b6008819055604080518181526011918101919091527f7468726573686f6c644465706c657465500000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297a91906140e0565b6001600160a01b0316336001600160a01b0316146129c55760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b6103e8811015612a045760405162461bcd60e51b815260206004820152600a602482015269042454c4f575f313030360b41b6044820152606401610af3565b6004819055604080518181526011918101919091527f626c6f636b73426173654465706c6574650000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad291906140e0565b6001600160a01b0316336001600160a01b031614612b235760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610af3565b600c5415612b915780600d6000828254612b3d91906140a7565b9091555050600c54612b5782670de0b6b3a7640000614088565b612b6191906140be565b600f6000828254612b729190614070565b925050819055508060106000828254612b8b9190614070565b90915550505b50565b6000546001600160a01b0316158015612bb557506001600160a01b03811615155b612bbe57600080fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556109c46001556127106002819055600560038190556004919091556107d0905561753060068190556064600755600a600881905561a8c060095560199055600b55565b6000806000612c6b60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b606080612c76613ca6565b60008054604051632e3b564f60e11b81526001600160a01b038b8116600483015290911690635c76ac9e90602401600060405180830381865afa158015612cc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ce991908101906141cc565b90506000815167ffffffffffffffff811115612d0757612d07614138565b604051908082528060200260200182016040528015612d4057816020015b612d2d613ccd565b815260200190600190039081612d255790505b50905060005b8251811015612e105760005483516001600160a01b039091169063b66e6b0590859084908110612d7857612d78614272565b60200260200101516040518263ffffffff1660e01b8152600401612d9e91815260200190565b6101e060405180830381865afa158015612dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de09190614288565b828281518110612df257612df2614272565b60200260200101819052508080612e089061436b565b915050612d46565b50612e19613ca6565b60005b60058110156130af576000805460405163265aa62160e01b8152600481018490526001600160a01b039091169063265aa62190602401602060405180830381865afa158015612e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9391906140e0565b6040516370a0823160e01b81526001600160a01b038f8116600483015291909116906370a0823190602401602060405180830381865afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff9190614384565b90508067ffffffffffffffff811115612f1a57612f1a614138565b604051908082528060200260200182016040528015612f43578160200160208202803683370190505b50838360058110612f5657612f56614272565b602002015260005b8181101561309a5760005460405163265aa62160e01b8152600481018590526001600160a01b039091169063265aa62190602401602060405180830381865afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd391906140e0565b6001600160a01b0316632f745c598f836040518363ffffffff1660e01b81526004016130149291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015613031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130559190614384565b84846005811061306757613067614272565b6020020151828151811061307d5761307d614272565b6020908102919091010152806130928161436b565b915050612f5e565b505080806130a79061436b565b915050612e1c565b5060008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa158015613101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312591906140e0565b600054604051636eb1769f60e11b81526001600160a01b038e81166004830152918216602482015291169063dd62ed3e90604401602060405180830381865afa158015613176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319a9190614384565b60008054906101000a90046001600160a01b03166001600160a01b031663f4b9fa756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f91906140e0565b6040516370a0823160e01b81526001600160a01b038e8116600483015291909116906370a0823190602401602060405180830381865afa158015613257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327b9190614384565b60008054906101000a90046001600160a01b03166001600160a01b031663fece4eac6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f091906140e0565b6001600160a01b031663dd62ed3e8e60008054906101000a90046001600160a01b03166040518363ffffffff1660e01b81526004016133459291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa158015613362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133869190614384565b60008054906101000a90046001600160a01b03166001600160a01b03166392a88fa28f6040518263ffffffff1660e01b81526004016133d491906001600160a01b0391909116815260200190565b606060405180830381865afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613415919061439d565b929e919d509b509099509297509095509350915050565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561347d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a191906140e0565b6001600160a01b0316336001600160a01b0316146134ec5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600281101561353d5760405162461bcd60e51b815260206004820152600760248201527f42454c4f575f32000000000000000000000000000000000000000000000000006044820152606401610af3565b600a81111561358e5760405162461bcd60e51b815260206004820152600860248201527f41424f56455f31300000000000000000000000000000000000000000000000006044820152606401610af3565b600381905560408051818152600b918101919091527f706f776572526566696c6c0000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d91906140e0565b6001600160a01b0316336001600160a01b0316146136a85760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610af3565b600081116136e25760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606401610af3565b600a6136f2620186a06003614088565b6136fc91906140be565b81111561373d5760405162461bcd60e51b815260206004820152600f60248201526e41424f56455f305f504f494e545f3360881b6044820152606401610af3565b600681905560408051818152600b918101919091527f6465706c6574654c6971500000000000000000000000000000000000000000006060820152602081018290526000805160206144f083398151915290608001610c99565b600080600354620186a06137ab91906144e3565b600154600354856137bf620186a089614088565b6137c991906140be565b6137d391906144e3565b6137dd9190614088565b6137e791906140be565b90506001811015610a8e576001610a90565b336000908152601760209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083018190526004909101546080830152600f5491929091670de0b6b3a76400009161200a9190614088565b6001600160a01b0380821660009081526017602090815260408083209254815163f4b9fa7560e01b815291519394169263f4b9fa75926004808401939192918290030181865afa1580156138ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138de91906140e0565b6001600160a01b031663a9059cbb836138f685611f30565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061397d9190614112565b61398657600080fd5b600f548154670de0b6b3a76400009161399e91614088565b6139a891906140be565b600382015560006139b883611c59565b90506139c2613bdc565b6012819055436015558254670de0b6b3a7640000916139e091614088565b6139ea91906140be565b60048301556040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015613a25573d6000803e3d6000fd5b50505050565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9f91906140e0565b6001600160a01b0316336001600160a01b031614613af05760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610af3565b60005460405163373873db60e11b81526001600160a01b03909116600482018190523060248301526044820184905290636e70e7b690606401600060405180830381600087803b158015613b4357600080fd5b505af1158015613b57573d6000803e3d6000fd5b5050505081600d6000828254613b6d9190614070565b90915550613b7c905081612a5e565b600d54600c54604080513381526001600160a01b038716602082015290810185905260608101849052608081019290925260a08201527ffe3518e5e73f574892bc6ff79a4ac4816e01c14b62127612ca3aa45667db361b9060c001611f23565b6000600c54600003613bef575060125490565b6000601354431115613c6d576014544311613c325760155415613c1e57601554613c1990436140a7565b613c2b565b601354613c2b90436140a7565b9050613c6d565b60145460155411613c6d5760155415613c5a57601554601454613c5591906140a7565b613c6a565b601354601454613c6a91906140a7565b90505b600c54601154613c7d9083614088565b613c8f90670de0b6b3a7640000614088565b613c9991906140be565b60125461201e9190614070565b6040518060a001604052806005905b6060815260200190600190039081613cb55790505090565b6040518060c00160405280613d3960405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060408385031215613d7557600080fd5b50508035926020909101359150565b600060208284031215613d9657600080fd5b5035919050565b6001600160a01b0381168114612b9157600080fd5b60008060408385031215613dc557600080fd5b8235613dd081613d9d565b946020939093013593505050565b600060208284031215613df057600080fd5b8135610a8e81613d9d565b60008060408385031215613e0e57600080fd5b823591506020830135613e2081613d9d565b809150509250929050565b600081518084526020808501945080840160005b83811015613f00578151805180516001600160a01b0316895284810151858a0152604080820151818b0152606080830151818c0152608080840151818d015260a080850151818e015260c0850151613e9b60c08f018215159052565b5060e085810151908e015261010080860151908e015261012094850151948d0194909452848801516101408d0152918401516101608c01528301516101808b01528201516101a08a015201516101c08801526101e09096019590820190600101613e3f565b509495945050505050565b60008260a08101836000805b6005811015613f6c578484038852825180518086526020918201918087019190855b82811015613f5557845184529381019392810192600101613f39565b509a8b019a91965050939093019250600101613f17565b50919695505050505050565b60006101208083018a845260208a81860152896040860152885160608601526001600160a01b03818a0151166080860152604089015160a08601528260c0860152819250875180835261014086019350818901925060005b81811015613fec57835185529382019392820192600101613fd0565b5050505082810360e08401526140028186613e2b565b90508281036101008401526140178185613f0b565b9a9950505050505050505050565b60008060006060848603121561403a57600080fd5b833561404581613d9d565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156140835761408361405a565b500190565b60008160001904831182151516156140a2576140a261405a565b500290565b6000828210156140b9576140b961405a565b500390565b6000826140db57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156140f257600080fd5b8151610a8e81613d9d565b8051801515811461410d57600080fd5b919050565b60006020828403121561412457600080fd5b611cde826140fd565b805161410d81613d9d565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561417157614171614138565b60405290565b604051610140810167ffffffffffffffff8111828210171561417157614171614138565b604051601f8201601f1916810167ffffffffffffffff811182821017156141c4576141c4614138565b604052919050565b600060208083850312156141df57600080fd5b825167ffffffffffffffff808211156141f757600080fd5b818501915085601f83011261420b57600080fd5b81518181111561421d5761421d614138565b8060051b915061422e84830161419b565b818152918301840191848101908884111561424857600080fd5b938501935b838510156142665784518252938501939085019061424d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008183036101e081121561429c57600080fd5b6142a461414e565b610140808312156142b457600080fd5b6142bc614177565b92506142c78561412d565b83526020850151602084015260408501516040840152606085015160608401526080850151608084015260a085015160a084015261430760c086016140fd565b60c084015260e0858101519084015261010080860151908401526101208086015190840152918152908301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b60006001820161437d5761437d61405a565b5060010190565b60006020828403121561439657600080fd5b5051919050565b6000606082840312156143af57600080fd5b6040516060810181811067ffffffffffffffff821117156143d2576143d2614138565b6040528251815260208301516143e781613d9d565b60208201526040928301519281019290925250919050565b600181815b8085111561443a5781600019048211156144205761442061405a565b8085161561442d57918102915b93841c9390800290614404565b509250929050565b60008261445157506001610a94565b8161445e57506000610a94565b8160018114614474576002811461447e5761449a565b6001915050610a94565b60ff84111561448f5761448f61405a565b50506001821b610a94565b5060208310610133831016604e8410600b84101617156144bd575081810a610a94565b6144c783836143ff565b80600019048211156144db576144db61405a565b029392505050565b6000611cde838361444256fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9aba2646970667358221220b9de76471d6dfe2ebf912d64287df993aebeb8ca78c070eefba09dc3ad08598b64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11321,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "storageT",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)14830"
      },
      {
        "astId": 11327,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "blocksBaseRefill",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11332,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "refillLiqP",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11335,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "powerRefill",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11338,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "blocksBaseDeplete",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11341,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "blocksMinDeplete",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11346,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "depleteLiqP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11349,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "coeffDepleteP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11352,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "thresholdDepleteP",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11355,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "withdrawTimelock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11358,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maxWithdrawP",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 11363,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "swapFeeP",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11365,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maxBalanceDai",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11367,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "currentBalanceDai",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11369,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "lastActionBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11371,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "accDaiPerDai",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 11373,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "rewardsDai",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 11375,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticPerBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 11377,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "accMaticPerDai",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 11379,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticStartBlock",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 11381,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticEndBlock",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 11383,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "maticLastRewardBlock",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 11385,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "rewardsMatic",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 11401,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "users",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_struct(User)11396_storage)"
      },
      {
        "astId": 11405,
        "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
        "label": "daiToClaim",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)14830": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)11396_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GNSTradingVaultV5.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)11396_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(User)11396_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingVaultV5.User",
        "members": [
          {
            "astId": 11387,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "daiDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11389,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "maxDaiDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11391,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "withdrawBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11393,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "debtDai",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11395,
            "contract": "contracts/GNSTradingVaultV5.sol:GNSTradingVaultV5",
            "label": "debtMatic",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
