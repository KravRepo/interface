{
  "address": "0x771D8465C2Bb5FFe6fC3Bc5F5Dc50d73bD846E1f",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26cc74c3e86b9f12bafe3524d5b80625ee882c734fee225927add3e545f61e3e",
  "receipt": {
    "to": null,
    "from": "0x5BC67755e404afF4416E42E4Eb7f132d1C1903CB",
    "contractAddress": "0x771D8465C2Bb5FFe6fC3Bc5F5Dc50d73bD846E1f",
    "transactionIndex": 1,
    "gasUsed": "602083",
    "logsBloom": "0x
    "blockHash": "0xe72179cbb9516e1bdc6de024f961929bf1a86831582b49bc4bac22ac486e6ac7",
    "transactionHash": "0x26cc74c3e86b9f12bafe3524d5b80625ee882c734fee225927add3e545f61e3e",
    "logs": [],
    "blockNumber": 8402377,
    "cumulativeGasUsed": "648936",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3f9cf7f8b6e965f8c863668453bc7d3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/muticall2.sol\":\"Multicall2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/muticall2.sol\":{\"content\":\"pragma solidity 0.8.14;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\n            returnData[i] = ret;\\n        }\\n    }\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\",\"keccak256\":\"0x86deb89cc7497fab3924bfc2846b81c34c4e189fe11e03b0b34d2ae3f50529ff\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109ee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610174578063c3077fa914610194578063ee82ac5e146101a757600080fd5b806372425d9d1461015a57806386d516e814610160578063a8b0574e1461016657600080fd5b8063399542e9116100b2578063399542e91461011757806342cbb15c146101395780634d2301cc1461013f57600080fd5b80630f28c97d146100d9578063252dba42146100ee57806327e86d6e1461010f575b600080fd5b425b6040519081526020015b60405180910390f35b6101016100fc36600461070a565b6101b9565b6040516100e59291906107a3565b6100db610341565b61012a61012536600461080d565b610354565b6040516100e5939291906108ca565b436100db565b6100db61014d3660046108f2565b6001600160a01b03163190565b446100db565b456100db565b6040514181526020016100e5565b61018761018236600461080d565b61036c565b6040516100e59190610914565b61012a6101a236600461070a565b610526565b6100db6101b5366004610927565b4090565b8051439060609067ffffffffffffffff8111156101d8576101d8610543565b60405190808252806020026020018201604052801561020b57816020015b60608152602001906001900390816101f65790505b50905060005b835181101561033b5760008085838151811061022f5761022f610940565b6020026020010151600001516001600160a01b031686848151811061025657610256610940565b60200260200101516020015160405161026f9190610956565b6000604051808303816000865af19150503d80600081146102ac576040519150601f19603f3d011682016040523d82523d6000602084013e6102b1565b606091505b5091509150816103085760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061031b5761031b610940565b60200260200101819052505050808061033390610988565b915050610211565b50915091565b600061034e6001436109a1565b40905090565b4380406060610363858561036c565b90509250925092565b6060815167ffffffffffffffff81111561038857610388610543565b6040519080825280602002602001820160405280156103ce57816020015b6040805180820190915260008152606060208201528152602001906001900390816103a65790505b50905060005b825181101561051f576000808483815181106103f2576103f2610940565b6020026020010151600001516001600160a01b031685848151811061041957610419610940565b6020026020010151602001516040516104329190610956565b6000604051808303816000865af19150503d806000811461046f576040519150601f19603f3d011682016040523d82523d6000602084013e610474565b606091505b509150915085156104d657816104d65760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102ff565b60405180604001604052808315158152602001828152508484815181106104ff576104ff610940565b60200260200101819052505050808061051790610988565b9150506103d4565b5092915050565b6000806060610536600185610354565b9196909550909350915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057c5761057c610543565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105ab576105ab610543565b604052919050565b80356001600160a01b03811681146105ca57600080fd5b919050565b6000601f83818401126105e157600080fd5b8235602067ffffffffffffffff808311156105fe576105fe610543565b8260051b61060d838201610582565b938452868101830193838101908986111561062757600080fd5b84890192505b858310156106fd578235848111156106455760008081fd5b89016040601f19828d03810182131561065e5760008081fd5b610666610559565b6106718985016105b3565b815282840135888111156106855760008081fd5b8085019450508d603f85011261069b5760008081fd5b88840135888111156106af576106af610543565b6106be8a848e84011601610582565b92508083528e848287010111156106d55760008081fd5b808486018b85013760009083018a01528089019190915284525050918401919084019061062d565b9998505050505050505050565b60006020828403121561071c57600080fd5b813567ffffffffffffffff81111561073357600080fd5b61073f848285016105cf565b949350505050565b60005b8381101561076257818101518382015260200161074a565b83811115610771576000848401525b50505050565b6000815180845261078f816020860160208601610747565b601f01601f19169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156107ff57605f198887030184526107ed868351610777565b955092840192908401906001016107d1565b509398975050505050505050565b6000806040838503121561082057600080fd5b8235801515811461083057600080fd5b9150602083013567ffffffffffffffff81111561084c57600080fd5b610858858286016105cf565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156108bd578383038952815180511515845285015160408685018190526108a981860183610777565b9a87019a945050509084019060010161087d565b5090979650505050505050565b8381528260208201526060604082015260006108e96060830184610862565b95945050505050565b60006020828403121561090457600080fd5b61090d826105b3565b9392505050565b60208152600061090d6020830184610862565b60006020828403121561093957600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008251610968818460208701610747565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006001820161099a5761099a610972565b5060010190565b6000828210156109b3576109b3610972565b50039056fea264697066735822122042d085a00958d71cce219523c22cd79721dce152c45e68454ab73144836535f564736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610174578063c3077fa914610194578063ee82ac5e146101a757600080fd5b806372425d9d1461015a57806386d516e814610160578063a8b0574e1461016657600080fd5b8063399542e9116100b2578063399542e91461011757806342cbb15c146101395780634d2301cc1461013f57600080fd5b80630f28c97d146100d9578063252dba42146100ee57806327e86d6e1461010f575b600080fd5b425b6040519081526020015b60405180910390f35b6101016100fc36600461070a565b6101b9565b6040516100e59291906107a3565b6100db610341565b61012a61012536600461080d565b610354565b6040516100e5939291906108ca565b436100db565b6100db61014d3660046108f2565b6001600160a01b03163190565b446100db565b456100db565b6040514181526020016100e5565b61018761018236600461080d565b61036c565b6040516100e59190610914565b61012a6101a236600461070a565b610526565b6100db6101b5366004610927565b4090565b8051439060609067ffffffffffffffff8111156101d8576101d8610543565b60405190808252806020026020018201604052801561020b57816020015b60608152602001906001900390816101f65790505b50905060005b835181101561033b5760008085838151811061022f5761022f610940565b6020026020010151600001516001600160a01b031686848151811061025657610256610940565b60200260200101516020015160405161026f9190610956565b6000604051808303816000865af19150503d80600081146102ac576040519150601f19603f3d011682016040523d82523d6000602084013e6102b1565b606091505b5091509150816103085760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061031b5761031b610940565b60200260200101819052505050808061033390610988565b915050610211565b50915091565b600061034e6001436109a1565b40905090565b4380406060610363858561036c565b90509250925092565b6060815167ffffffffffffffff81111561038857610388610543565b6040519080825280602002602001820160405280156103ce57816020015b6040805180820190915260008152606060208201528152602001906001900390816103a65790505b50905060005b825181101561051f576000808483815181106103f2576103f2610940565b6020026020010151600001516001600160a01b031685848151811061041957610419610940565b6020026020010151602001516040516104329190610956565b6000604051808303816000865af19150503d806000811461046f576040519150601f19603f3d011682016040523d82523d6000602084013e610474565b606091505b509150915085156104d657816104d65760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102ff565b60405180604001604052808315158152602001828152508484815181106104ff576104ff610940565b60200260200101819052505050808061051790610988565b9150506103d4565b5092915050565b6000806060610536600185610354565b9196909550909350915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057c5761057c610543565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105ab576105ab610543565b604052919050565b80356001600160a01b03811681146105ca57600080fd5b919050565b6000601f83818401126105e157600080fd5b8235602067ffffffffffffffff808311156105fe576105fe610543565b8260051b61060d838201610582565b938452868101830193838101908986111561062757600080fd5b84890192505b858310156106fd578235848111156106455760008081fd5b89016040601f19828d03810182131561065e5760008081fd5b610666610559565b6106718985016105b3565b815282840135888111156106855760008081fd5b8085019450508d603f85011261069b5760008081fd5b88840135888111156106af576106af610543565b6106be8a848e84011601610582565b92508083528e848287010111156106d55760008081fd5b808486018b85013760009083018a01528089019190915284525050918401919084019061062d565b9998505050505050505050565b60006020828403121561071c57600080fd5b813567ffffffffffffffff81111561073357600080fd5b61073f848285016105cf565b949350505050565b60005b8381101561076257818101518382015260200161074a565b83811115610771576000848401525b50505050565b6000815180845261078f816020860160208601610747565b601f01601f19169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156107ff57605f198887030184526107ed868351610777565b955092840192908401906001016107d1565b509398975050505050505050565b6000806040838503121561082057600080fd5b8235801515811461083057600080fd5b9150602083013567ffffffffffffffff81111561084c57600080fd5b610858858286016105cf565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156108bd578383038952815180511515845285015160408685018190526108a981860183610777565b9a87019a945050509084019060010161087d565b5090979650505050505050565b8381528260208201526060604082015260006108e96060830184610862565b95945050505050565b60006020828403121561090457600080fd5b61090d826105b3565b9392505050565b60208152600061090d6020830184610862565b60006020828403121561093957600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008251610968818460208701610747565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006001820161099a5761099a610972565b5060010190565b6000828210156109b3576109b3610972565b50039056fea264697066735822122042d085a00958d71cce219523c22cd79721dce152c45e68454ab73144836535f564736f6c634300080e0033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
