{
  "address": "0xCB922291b9402B75fE9B690040b6Af3c7B084C0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "SlCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftOpenOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultFeeP",
          "type": "uint256"
        }
      ],
      "name": "setVaultFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "updateSlCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6226a2867925a4ba70eb127c62047b3dd2e4d22d70d661e9b63917730546fa1",
  "receipt": {
    "to": null,
    "from": "0x284f1b4a9C4B9495F79de62a55337e0a07cCF3fF",
    "contractAddress": "0xCB922291b9402B75fE9B690040b6Af3c7B084C0E",
    "transactionIndex": 22,
    "gasUsed": "4671818",
    "logsBloom": "0x
    "blockHash": "0xf658f586ed34f07c7804a0ac1764d8bd4c34ca918f5988c798575cb9cfb7d1e3",
    "transactionHash": "0xd6226a2867925a4ba70eb127c62047b3dd2e4d22d70d661e9b63917730546fa1",
    "logs": [],
    "blockNumber": 30988682,
    "cumulativeGasUsed": "7444664",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x896875b453161e89660F89e6D9dDe935c793aDe8", "0xDBD19864B0AaD341170153c6a3B2D065a2870760"],
  "numDeployments": 1,
  "solcInputHash": "d9e911b7c48c581ed924bf1d179fe035",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SlCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftOpenOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultFeeP\",\"type\":\"uint256\"}],\"name\":\"setVaultFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"updateSlCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GNSTradingCallbacksV6_1.sol\":\"GNSTradingCallbacksV6_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/GNSTradingCallbacksV6_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './interfaces/StorageInterfaceV5.sol';\\nimport './interfaces/GNSPairInfosInterfaceV6.sol';\\npragma solidity 0.8.14;\\n\\ncontract GNSTradingCallbacksV6_1{\\n\\n    // Contracts (constant)\\n    StorageInterfaceV5 immutable storageT;\\n    GNSPairInfosInterfaceV6 immutable pairInfos;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10;     // 10 decimals\\n\\n    uint constant MAX_SL_P = 75;        // -75% PNL\\n    uint constant MAX_GAIN_P = 900;     // 900% PnL (10x)\\n\\n    // Params (adjustable)\\n    uint public vaultFeeP = 10;         // %\\n\\n    // State\\n    bool public isPaused;               // Prevent opening new trades\\n    bool public isDone;                 // Prevent any interaction with the contract\\n\\n    // Custom data types\\n    struct AggregatorAnswer{ uint orderId; uint price; uint spreadP; }\\n    struct Values{ uint price; int profitP; uint tokenPriceDai; uint posToken; uint posDai; uint nftReward; }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint orderId,\\n        StorageInterfaceV5.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit,\\n        uint daiSentToTrader\\n    );\\n    event LimitExecuted(\\n        uint orderId,\\n        uint limitIndex,\\n        StorageInterfaceV5.Trade t,\\n        address nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit,\\n        uint daiSentToTrader\\n    );\\n\\n    event MarketOpenCanceled(uint orderId, address trader, uint pairIndex);\\n    event MarketCloseCanceled(uint orderId, address trader, uint pairIndex, uint index);\\n\\n    event SlUpdated(uint orderId, address trader, uint pairIndex, uint index, uint newSl);\\n    event SlCanceled(uint orderId, address trader, uint pairIndex, uint index);\\n\\n    event AddressUpdated(string name, address a);\\n    event NumberUpdated(string name, uint value);\\n    \\n    event Pause(bool paused);\\n    event Done(bool done);\\n\\n    constructor(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) {\\n        storageT = _storageT;\\n        pairInfos = _pairInfos;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov(){ require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\"); _; }\\n    modifier onlyPriceAggregator(){ require(msg.sender == address(storageT.priceAggregator()), \\\"AGGREGATOR_ONLY\\\"); _; }\\n    modifier notDone(){ require(!isDone, \\\"DONE\\\"); _; }\\n\\n    // Manage params\\n    function setVaultFeeP(uint _vaultFeeP) external onlyGov{\\n        require(_vaultFeeP <= 50, \\\"ABOVE_50\\\");\\n        vaultFeeP = _vaultFeeP;\\n        emit NumberUpdated(\\\"vaultFeeP\\\", _vaultFeeP);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov{ isPaused = !isPaused; emit Pause(isPaused); }\\n    function done() external onlyGov{ isDone = !isDone; emit Done(isDone); }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone{\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(a.orderId);\\n        if(o.block == 0){ return; }\\n        \\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        (uint priceImpactP, uint priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            marketExecutionPrice(a.price, a.spreadP, o.spreadReductionP, t.buy),\\n            t.pairIndex,\\n            t.buy,\\n            t.positionSizeDai * t.leverage\\n        );\\n\\n        t.openPrice = priceAfterImpact;\\n\\n        uint maxSlippage = o.wantedPrice * o.slippageP / 100 / PRECISION;\\n\\n        if(isPaused || a.price == 0\\n        || (t.buy ? t.openPrice > o.wantedPrice + maxSlippage : t.openPrice < o.wantedPrice - maxSlippage)\\n        || (t.tp > 0 && (t.buy ? t.openPrice >= t.tp : t.openPrice <= t.tp))\\n        || (t.sl > 0 && (t.buy ? t.openPrice <= t.sl : t.openPrice >= t.sl))\\n        || !withinExposureLimits(t.pairIndex, t.buy, t.positionSizeDai, t.leverage)\\n        || priceImpactP * t.leverage > pairInfos.maxNegativePnlOnOpenP()){\\n\\n            storageT.transferDai(\\n                address(storageT), \\n                t.trader, \\n                t.positionSizeDai - storageT.handleDevGovFees(\\n                    t.pairIndex, \\n                    t.positionSizeDai * t.leverage, \\n                    true, \\n                    true\\n                )\\n            );\\n\\n            emit MarketOpenCanceled(a.orderId, t.trader, t.pairIndex);\\n\\n        }else{\\n            (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceDai) = registerTrade(t, 1500, 0);\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                finalTrade.initialPosToken * tokenPriceDai / PRECISION,\\n                0,\\n                0\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n    function closeTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone{\\n        \\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(a.orderId);\\n        if(o.block == 0){ return; }\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(o.trade.trader, o.trade.pairIndex, o.trade.index);\\n\\n        if(t.leverage > 0){\\n\\n            StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(t.trader, t.pairIndex, t.index);\\n            AggregatorInterfaceV6 aggregator = storageT.priceAggregator();\\n            \\n            uint tokenPriceDai = aggregator.tokenPriceDai();\\n            uint levPosToken = t.initialPosToken * i.tokenPriceDai * t.leverage / tokenPriceDai;\\n\\n            if(a.price == 0){\\n               \\n                uint feeToken = storageT.handleDevGovFees(t.pairIndex, levPosToken, false, true);\\n\\n                if(t.initialPosToken > feeToken){\\n                    t.initialPosToken -= feeToken;\\n                    storageT.updateTrade(t);\\n                }else{\\n                    unregisterTrade(t, -100, 0, i.openInterestDai/t.leverage, 0, 0, 0);\\n                }\\n\\n                emit MarketCloseCanceled(a.orderId, t.trader, t.pairIndex, t.index);\\n\\n            }else{\\n                Values memory v;\\n                v.profitP = currentPercentProfit(t.openPrice, a.price, t.buy, t.leverage);\\n                v.posDai = t.initialPosToken * i.tokenPriceDai / PRECISION;\\n\\n                uint daiSentToTrader = unregisterTrade(\\n                    t,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai / t.leverage,\\n                    levPosToken * aggregator.pairsStorage().pairCloseFeeP(t.pairIndex) / 100 / PRECISION,\\n                    0,\\n                    tokenPriceDai\\n                );\\n\\n                emit MarketExecuted(a.orderId, t, false, a.price, 0, v.posDai, v.profitP, daiSentToTrader);\\n            }\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n    function executeNftOpenOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone{\\n\\n        StorageInterfaceV5.PendingNftOrder memory n = storageT.reqID_pendingNftOrder(a.orderId);\\n        NftRewardsInterfaceV6 nftIncentives = storageT.priceAggregator().nftRewards();\\n\\n        if(!isPaused && a.price != 0\\n        && storageT.hasOpenLimitOrder(n.trader, n.pairIndex, n.index)\\n        && block.number >= storageT.nftLastSuccess(n.nftId) + storageT.nftSuccessTimelock()){\\n\\n            StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n            NftRewardsInterfaceV6.OpenLimitOrderType t = nftIncentives.openLimitOrderTypes(n.trader, n.pairIndex, n.index);\\n\\n            (uint priceImpactP, uint priceAfterImpact) = pairInfos.getTradePriceImpact(\\n                marketExecutionPrice(a.price, a.spreadP, o.spreadReductionP, o.buy),\\n                o.pairIndex,\\n                o.buy,\\n                o.positionSize * o.leverage\\n            );\\n\\n            a.price = priceAfterImpact;\\n\\n            if((t == NftRewardsInterfaceV6.OpenLimitOrderType.LEGACY ? (a.price >= o.minPrice && a.price <= o.maxPrice) :\\n                t == NftRewardsInterfaceV6.OpenLimitOrderType.REVERSAL ? (o.buy ? a.price <= o.maxPrice : a.price >= o.minPrice) :\\n                (o.buy ? a.price >= o.minPrice : a.price <= o.maxPrice))\\n            && withinExposureLimits(o.pairIndex, o.buy, o.positionSize, o.leverage)\\n            && priceImpactP * o.leverage <= pairInfos.maxNegativePnlOnOpenP()){\\n\\n                (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceDai) = registerTrade(\\n                    StorageInterfaceV5.Trade(\\n                        o.trader,\\n                        o.pairIndex,\\n                        0, 0,\\n                        o.positionSize,\\n                        t == NftRewardsInterfaceV6.OpenLimitOrderType.REVERSAL ? o.buy ? o.maxPrice : o.minPrice : a.price,\\n                        o.buy,\\n                        o.leverage,\\n                        o.tp,\\n                        o.sl\\n                    ), \\n                    n.nftId,\\n                    n.index\\n                );\\n\\n                storageT.unregisterOpenLimitOrder(o.trader, o.pairIndex, o.index);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    n.index,\\n                    finalTrade,\\n                    n.nftHolder,\\n                    StorageInterfaceV5.LimitOrder.OPEN,\\n                    finalTrade.openPrice,\\n                    priceImpactP,\\n                    finalTrade.initialPosToken * tokenPriceDai / PRECISION,\\n                    0,\\n                    0\\n                );\\n            }\\n        }\\n\\n        nftIncentives.unregisterTrigger(NftRewardsInterfaceV6.TriggeredLimitId(n.trader, n.pairIndex, n.index, n.orderType));\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n    function executeNftCloseOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone{\\n        \\n        StorageInterfaceV5.PendingNftOrder memory o = storageT.reqID_pendingNftOrder(a.orderId);\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(o.trader, o.pairIndex, o.index);\\n\\n        AggregatorInterfaceV6 aggregator = storageT.priceAggregator();\\n        NftRewardsInterfaceV6 nftIncentives = aggregator.nftRewards();\\n\\n        if(a.price != 0\\n        && t.leverage > 0 && block.number >= storageT.nftLastSuccess(o.nftId) + storageT.nftSuccessTimelock()){\\n\\n            StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(t.trader, t.pairIndex, t.index);\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n            Values memory v;\\n\\n            v.price = pairsStored.guaranteedSlEnabled(t.pairIndex) ?\\n                        o.orderType == StorageInterfaceV5.LimitOrder.TP ? t.tp : \\n                        o.orderType == StorageInterfaceV5.LimitOrder.SL ? t.sl : a.price : a.price;\\n\\n            v.profitP = currentPercentProfit(t.openPrice, v.price, t.buy, t.leverage);\\n\\n            v.tokenPriceDai = aggregator.tokenPriceDai();\\n            v.posToken = t.initialPosToken * i.tokenPriceDai / v.tokenPriceDai;\\n            v.posDai = t.initialPosToken * i.tokenPriceDai / PRECISION;\\n\\n            if(o.orderType == StorageInterfaceV5.LimitOrder.LIQ){\\n                uint liqPrice = pairInfos.getTradeLiquidationPrice(\\n                    t.trader,\\n                    t.pairIndex,\\n                    t.index,\\n                    t.openPrice,\\n                    t.buy,\\n                    v.posDai,\\n                    t.leverage\\n                );\\n\\n                v.nftReward = (t.buy ? a.price <= liqPrice : a.price >= liqPrice) ? v.posToken * 5 / 100 : 0;\\n            }else{\\n                v.nftReward = \\n                    (o.orderType == StorageInterfaceV5.LimitOrder.TP && t.tp > 0 && (t.buy ? a.price >= t.tp : a.price <= t.tp))\\n                    || (o.orderType == StorageInterfaceV5.LimitOrder.SL && t.sl > 0 && (t.buy ? a.price <= t.sl : a.price >= t.sl)) ? \\n                    v.posToken * t.leverage * pairsStored.pairNftLimitOrderFeeP(t.pairIndex) / 100 / PRECISION : 0;\\n            }\\n\\n            if(v.nftReward > 0){\\n                uint daiSentToTrader = unregisterTrade(\\n                    t,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai/t.leverage,\\n                    o.orderType == StorageInterfaceV5.LimitOrder.LIQ ?\\n                        v.nftReward :\\n                        v.posToken * t.leverage * pairsStored.pairCloseFeeP(t.pairIndex) / 100 / PRECISION,\\n                    v.nftReward,\\n                    v.tokenPriceDai\\n                );\\n\\n                nftIncentives.distributeNftReward(\\n                    NftRewardsInterfaceV6.TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType),\\n                    v.nftReward\\n                );\\n\\n                storageT.increaseNftRewards(o.nftId, v.nftReward);\\n\\n                emit LimitExecuted(a.orderId, o.index, t, o.nftHolder, o.orderType, v.price, 0, v.posDai, v.profitP, daiSentToTrader);\\n            }\\n        }\\n\\n        nftIncentives.unregisterTrigger(NftRewardsInterfaceV6.TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType));\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n    function updateSlCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone{\\n        \\n        AggregatorInterfaceV6 aggregator = storageT.priceAggregator();\\n        AggregatorInterfaceV6.PendingSl memory o = aggregator.pendingSlOrders(a.orderId);\\n        \\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(o.trader, o.pairIndex, o.index);\\n\\n        if(a.price != 0 && t.leverage > 0 \\n        && t.buy == o.buy && t.openPrice == o.openPrice\\n        && (t.buy ? o.newSl <= a.price : o.newSl >= a.price)){\\n\\n            storageT.updateSl(o.trader, o.pairIndex, o.index, o.newSl);\\n            emit SlUpdated(a.orderId, o.trader, o.pairIndex, o.index, o.newSl);\\n            \\n        }else{\\n            emit SlCanceled(a.orderId, o.trader, o.pairIndex, o.index);\\n        }\\n\\n        aggregator.unregisterPendingSlOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function registerTrade(\\n        StorageInterfaceV5.Trade memory _trade, \\n        uint _nftId, \\n        uint _limitIndex\\n    ) private returns(StorageInterfaceV5.Trade memory, uint){\\n\\n        AggregatorInterfaceV6 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        _trade.positionSizeDai -= storageT.handleDevGovFees(_trade.pairIndex, _trade.positionSizeDai * _trade.leverage, true, true);\\n\\n        storageT.vault().receiveDaiFromTrader(_trade.trader, _trade.positionSizeDai, 0);\\n\\n        uint tokenPriceDai = aggregator.tokenPriceDai();\\n        _trade.initialPosToken = _trade.positionSizeDai * PRECISION / tokenPriceDai;\\n        _trade.positionSizeDai = 0;\\n\\n        {\\n            uint rTokens = _trade.initialPosToken * _trade.leverage * pairsStored.pairReferralFeeP(_trade.pairIndex) / 100 / PRECISION;\\n            address referral = storageT.getReferral(_trade.trader);\\n\\n            if(referral != address(0)){ \\n                rTokens /= 2;\\n                storageT.handleTokens(referral, rTokens, true);\\n                storageT.increaseReferralRewards(referral, rTokens);\\n            }\\n\\n            _trade.initialPosToken -= rTokens;\\n        }\\n\\n        if(_nftId < 1500){\\n            uint nTokens = _trade.initialPosToken * _trade.leverage * pairsStored.pairNftLimitOrderFeeP(_trade.pairIndex) / 100 / PRECISION;\\n            _trade.initialPosToken -= nTokens;\\n            \\n            aggregator.nftRewards().distributeNftReward(\\n                NftRewardsInterfaceV6.TriggeredLimitId(\\n                    _trade.trader, _trade.pairIndex, _limitIndex, StorageInterfaceV5.LimitOrder.OPEN\\n                ), nTokens\\n            );\\n\\n            storageT.increaseNftRewards(_nftId, nTokens);\\n        }\\n\\n        _trade.index = storageT.firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\\n        _trade.tp = correctTp(_trade.openPrice, _trade.leverage, _trade.tp, _trade.buy);\\n        _trade.sl = correctSl(_trade.openPrice, _trade.leverage, _trade.sl, _trade.buy);\\n        \\n        pairInfos.storeTradeInitialAccFees(_trade.trader, _trade.pairIndex, _trade.index, _trade.buy);\\n\\n        pairsStored.updateGroupCollateral(_trade.pairIndex, _trade.initialPosToken * tokenPriceDai / PRECISION, _trade.buy, true);\\n\\n        storageT.storeTrade(\\n            _trade,\\n            StorageInterfaceV5.TradeInfo(\\n                0, \\n                tokenPriceDai, \\n                _trade.initialPosToken * _trade.leverage * tokenPriceDai / PRECISION,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        return (_trade, tokenPriceDai);\\n    }\\n    function unregisterTrade(\\n        StorageInterfaceV5.Trade memory _trade,\\n        int _percentProfit,    // PRECISION\\n        uint _currentDaiPos,   // 1e18\\n        uint _initialDaiPos,   // 1e18\\n        uint _lpFeeToken,      // 1e18\\n        uint _amountNftToken,  // 1e18\\n        uint _tokenPriceDai    // PRECISION\\n    ) private returns(uint daiSentToTrader){\\n\\n        storageT.distributeLpRewards(_lpFeeToken * (100 - vaultFeeP) / 100);\\n        storageT.vault().distributeRewardDai(_lpFeeToken * vaultFeeP * _tokenPriceDai / 100 / PRECISION);\\n\\n        daiSentToTrader = pairInfos.getTradeValue(\\n            _trade.trader,\\n            _trade.pairIndex,\\n            _trade.index,\\n            _trade.buy,\\n            _currentDaiPos,\\n            _trade.leverage,\\n            _percentProfit,\\n            (_lpFeeToken + _amountNftToken) * _tokenPriceDai / PRECISION\\n        );\\n\\n        if(daiSentToTrader > 0){\\n            storageT.vault().sendDaiToTrader(_trade.trader, daiSentToTrader);\\n        }\\n\\n        storageT.priceAggregator().pairsStorage().updateGroupCollateral(_trade.pairIndex, _initialDaiPos, _trade.buy, false);\\n        storageT.unregisterTrade(_trade.trader, _trade.pairIndex, _trade.index);\\n    }\\n\\n    // Utils\\n    function withinExposureLimits(uint _pairIndex, bool _buy, uint _positionSizeDai, uint _leverage) private view returns(bool){\\n        PairsStorageInterfaceV6 pairsStored = storageT.priceAggregator().pairsStorage();\\n        return storageT.openInterestDai(_pairIndex, _buy ? 0 : 1) + _positionSizeDai * _leverage <= storageT.openInterestDai(_pairIndex, 2)\\n            && pairsStored.groupCollateral(_pairIndex, _buy) + _positionSizeDai <= pairsStored.groupMaxCollateral(_pairIndex);\\n    }\\n    function currentPercentProfit(uint openPrice, uint currentPrice, bool buy, uint leverage) private pure returns(int p){\\n        int diff = buy ? int(currentPrice) - int(openPrice) : int(openPrice) - int(currentPrice);\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n        \\n        p = diff * 100 * int(PRECISION) * int(leverage) / int(openPrice);\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n    function correctTp(uint openPrice, uint leverage, uint tp, bool buy) private pure returns(uint){\\n        if(tp == 0 || currentPercentProfit(openPrice, tp, buy, leverage) == int(MAX_GAIN_P) * int(PRECISION)){\\n            uint tpDiff = openPrice * MAX_GAIN_P / leverage / 100;\\n            return buy ? openPrice + tpDiff : tpDiff <= openPrice ? openPrice - tpDiff : 0;\\n        }\\n        return tp;\\n    }\\n    function correctSl(uint openPrice, uint leverage, uint sl, bool buy) private pure returns(uint){\\n        if(sl > 0 && currentPercentProfit(openPrice, sl, buy, leverage) < int(MAX_SL_P) * int(PRECISION) * (-1)){\\n            uint slDiff = openPrice * MAX_SL_P / leverage / 100;\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n        return sl;\\n    }\\n    function marketExecutionPrice(uint _price, uint _spreadP, uint _spreadReductionP, bool _long) private pure returns (uint){\\n        uint priceDiff = _price * (_spreadP - _spreadP * _spreadReductionP / 100) / 100 / PRECISION;\\n        return _long ? _price + priceDiff : _price - priceDiff;\\n    }\\n}\",\"keccak256\":\"0xbded8ecf3a1c96e090cd7bda43f7f9545636b83996bb8a313ea33383d862dd18\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface GNSPairInfosInterfaceV6{\\n    function maxNegativePnlOnOpenP() external view returns(uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice,   // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    ) external view returns(\\n        uint priceImpactP,      // PRECISION (%)\\n        uint priceAfterImpact   // PRECISION\\n    );\\n\\n   function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice,  // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns(uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral,   // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee    // 1e18 (DAI)\\n    ) external returns(uint); // 1e18 (DAI)\\n}\",\"keccak256\":\"0x2d848cd9c920cd59c8b6dd4cc3c46cf6d08daf774c7815009660c2ffd4a21180\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xc15a2883e44dce70305e896f2492f485c77f1a01595a9bb42d2662a22cfa5274\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface PairsStorageInterfaceV6{\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n}\",\"keccak256\":\"0x74f54cf7593d734351ff34e0f86065cc89bb5a5b10b8618a9438d0ea2e4918a1\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './UniswapRouterInterfaceV5.sol';\\nimport './TokenInterfaceV5.sol';\\nimport './NftInterfaceV5.sol';\\nimport './VaultInterfaceV5.sol';\\nimport './PairsStorageInterfaceV6.sol';\\npragma solidity 0.8.14;\\n\\ninterface StorageInterfaceV5{\\n    enum LimitOrder { TP, SL, LIQ, OPEN }\\n    struct Trader{\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal;  // 1e18\\n    }\\n    struct Trade{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken;       // 1e18\\n        uint positionSizeDai;       // 1e18\\n        uint openPrice;             // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION\\n        uint sl;                    // PRECISION\\n    }\\n    struct TradeInfo{\\n        uint tokenId;\\n        uint tokenPriceDai;         // PRECISION\\n        uint openInterestDai;       // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize;          // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION (%)\\n        uint sl;                    // PRECISION (%)\\n        uint minPrice;              // PRECISION\\n        uint maxPrice;              // PRECISION\\n        uint block;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingMarketOrder{\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice;           // PRECISION\\n        uint slippageP;             // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingNftOrder{\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n    function PRECISION() external pure returns(uint);\\n    function gov() external view returns(address);\\n    function dev() external view returns(address);\\n    function dai() external view returns(TokenInterfaceV5);\\n    // function token() external view returns(TokenInterfaceV5);\\n    function linkErc677() external view returns(TokenInterfaceV5);\\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\\n    function priceAggregator() external view returns(AggregatorInterfaceV6);\\n    function vault() external view returns(VaultInterfaceV5);\\n    function trading() external view returns(address);\\n    function callbacks() external view returns(address);\\n    function handleTokens(address,uint,bool) external;\\n    function transferDai(address, address, uint) external;\\n    function transferLinkToAggregator(address, uint, uint) external;\\n    function unregisterTrade(address, uint, uint) external;\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n    function storeReferral(address, address) external;\\n    function openTrades(address, uint, uint) external view returns(Trade memory);\\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\\n    function updateSl(address, uint, uint, uint) external;\\n    function updateTp(address, uint, uint, uint) external;\\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\\n    function spreadReductionsP(uint) external view returns(uint);\\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\\n    function maxSlP() external view returns(uint);\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\\n    function increaseNftRewards(uint, uint) external;\\n    function nftSuccessTimelock() external view returns(uint);\\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\\n    function setNftLastSuccess(uint) external;\\n    function updateTrade(Trade memory) external;\\n    function nftLastSuccess(uint) external view returns(uint);\\n    function unregisterPendingNftOrder(uint) external;\\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\\n    function distributeLpRewards(uint) external;\\n    function getReferral(address) external view returns(address);\\n    function increaseReferralRewards(address, uint) external;\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n    function setLeverageUnlocked(address, uint) external;\\n    function getLeverageUnlocked(address) external view returns(uint);\\n    function openLimitOrdersCount(address, uint) external view returns(uint);\\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\\n    function openTradesCount(address, uint) external view returns(uint);\\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\\n    function maxTradesPerPair() external view returns(uint);\\n    function maxTradesPerBlock() external view returns(uint);\\n    function tradesPerBlock(uint) external view returns(uint);\\n    function pendingOrderIdsCount(address) external view returns(uint);\\n    function maxPendingMarketOrders() external view returns(uint);\\n    function maxGainP() external view returns(uint);\\n    function defaultLeverageUnlocked() external view returns(uint);\\n    function openInterestDai(uint, uint) external view returns(uint);\\n    function getPendingOrderIds(address) external view returns(uint[] memory);\\n    function traders(address) external view returns(Trader memory);\\n    function nfts(uint) external view returns(NftInterfaceV5);\\n}\\n\\ninterface AggregatorInterfaceV6{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function nftRewards() external view returns(NftRewardsInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceDai() external view returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function tokenDaiReservesLp() external view returns(uint, uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface NftRewardsInterfaceV6{\\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\\n}\",\"keccak256\":\"0x02c06cbb3f187939133f2c989e77a5e0b0d371444071f9a8d3ae1a3ed61fe865\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x839cb0952ddb74fd2cc563cbc511a7f4cec56599cb7cc3502f97c32327f2fe58\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface UniswapRouterInterfaceV5{\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x366be084acb30ed686cc7f4999f30568ebdb11e6cc5909c6b24f95092b4dbddf\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface VaultInterfaceV5{\\n\\tfunction sendDaiToTrader(address, uint) external;\\n\\tfunction receiveDaiFromTrader(address, uint, uint) external;\\n\\tfunction currentBalanceDai() external view returns(uint);\\n\\tfunction distributeRewardDai(uint) external;\\n}\",\"keccak256\":\"0xbbd6a93a058b4da7c2b5114ece35d743ef6099d928020835664169a0b5895825\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600a6000553480156200001657600080fd5b50604051620055e7380380620055e783398101604081905262000039916200006a565b6001600160a01b039182166080521660a052620000a9565b6001600160a01b03811681146200006757600080fd5b50565b600080604083850312156200007e57600080fd5b82516200008b8162000051565b60208401519092506200009e8162000051565b809150509250929050565b60805160a05161536d6200027a6000396000818161076b0152818161092b01528181611b7c015281816125a1015281816127bc0152818161413b015261456901526000818161019f015281816102d3015281816103510152818161049001528181610504015281816105a00152818161066701528181610ad301528181610c7001528181610cde01528181610df501528181610f250152818161104d015281816111e601528181611372015281816114a10152818161155d015281816115cf015281816116d9015281816117750152818161183601528181611f9b0152818161212a01528181612199015281816122b4015281816123d9015281816125080152818161285401528181612883015281816128a901528181612ade01528181612b4d01528181612c7c01528181612d4701528181612dfd01528181612e6e01528181612fc8015281816130770152818161339d0152818161344d0152818161354e015281816135cd015281816137dd015281816138c70152818161399c01528181613bf301528181613cac01528181613d2e01528181613f960152818161401c0152818161423b015281816143b001528181614454015281816146790152818161476001526148f3015261536d6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638f06222711610081578063b5228d131161005b578063b5228d1314610160578063c4493e3714610173578063e2f537101461018a57600080fd5b80638f06222714610124578063ae8421e11461014b578063b187bd261461015357600080fd5b80632e905d6e116100b25780632e905d6e146100f657806380d670eb146101095780638456cb591461011c57600080fd5b806302982635146100ce5780631d98d0d0146100e3575b600080fd5b6100e16100dc366004614b06565b61019d565b005b6100e16100f1366004614b06565b610cdc565b6100e1610104366004614b70565b6111e4565b6100e1610117366004614b06565b611370565b6100e1612197565b60015461013690610100900460ff1681565b60405190151581526020015b60405180910390f35b6100e16122b2565b6001546101369060ff1681565b6100e161016e366004614b06565b6123d7565b61017c60005481565b604051908152602001610142565b6100e1610198366004614b06565b612b4b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f9190614b9e565b6001600160a01b0316336001600160a01b0316146102765760405162461bcd60e51b815260206004820152600f60248201526e41474752454741544f525f4f4e4c5960881b60448201526064015b60405180910390fd5b600154610100900460ff16156102b75760405162461bcd60e51b815260040161026d90602080825260049082015263444f4e4560e01b604082015260600190565b80516040516399794d3560e01b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916399794d359161030a9160040190815260200190565b60c060405180830381865afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190614bd2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190614b9e565b6001600160a01b0316635ad9f9936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190614b9e565b60015490915060ff1615801561044b5750602083015115155b80156104fb5750604080830151606084015160808501519251636e6f99cd60e11b81526001600160a01b039283166004820152602481019190915260448101929092527f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a90606401602060405180830381865afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb9190614c5a565b801561062157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8d24b486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190614c75565b602083015160405163aa3b7d7760e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aa3b7d7790602401602060405180830381865afa1580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106139190614c75565b61061d9190614ca4565b4310155b15610bb157604082810151606084015160808501519251632e21e28b60e21b81526001600160a01b039283166004820152602481019190915260448101929092526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b8878a2c906064016101a060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190614cbc565b604080850151606086015160808701519251636a6f32f560e11b81526001600160a01b0392831660048201526024810191909152604481019290925291925060009184169063d4de65ea90606401602060405180830381865afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107649190614d6f565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f326107b489602001518a6040015188608001518960a001516133d4565b86602001518760a001518860c0015189606001516107d29190614d90565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190614daf565b602089018190529092509050600083600281111561086557610865614dd3565b146108dd57600183600281111561087e5761087e614dd3565b146108b0578360a0015161089e57836101400151876020015111156108ff565b836101200151876020015110156108ff565b8360a001516108cb57836101200151876020015110156108ff565b836101400151876020015111156108ff565b8361012001518760200151101580156108ff5750836101400151876020015111155b8015610922575061092284602001518560a0015186606001518760c00151613448565b80156109bd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190614c75565b60c08501516109ba9084614d90565b11155b15610bac57600080610a9560405180610140016040528088600001516001600160a01b031681526020018860200151815260200160008152602001600081526020018860600151815260200160016002811115610a1c57610a1c614dd3565b886002811115610a2e57610a2e614dd3565b14610a3d578b60200151610a58565b8860a00151610a5157886101200151610a58565b8861014001515b81526020018860a00151151581526020018860c0015181526020018860e00151815260200188610100015181525089602001518a60800151613777565b875160208901516040808b0151905163b4b0f56760e01b81526001600160a01b039384166004820152602481019290925260448201529294509092507f0000000000000000000000000000000000000000000000000000000000000000169063b4b0f56790606401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b505050507f165b0f8d6347f7ebe92729625b03ace41aeea8fd7ebf640f89f2593ab0db63d189600001518960800151848b6000015160038760a001518a6402540be400898b60600151610b7e9190614d90565b610b889190614dff565b600080604051610ba19a99989796959493929190614ea9565b60405180910390a150505b505050505b806001600160a01b031663bf654d2b604051806080016040528085604001516001600160a01b0316815260200185606001518152602001856080015181526020018560a001516003811115610c0857610c08614dd3565b8152506040518263ffffffff1660e01b8152600401610c279190614f4c565b600060405180830381600087803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b5050845160405163201d8bdb60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063201d8bdb91506024015b600060405180830381600087803b158015610cbf57600080fd5b505af1158015610cd3573d6000803e3d6000fd5b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190614b9e565b6001600160a01b0316336001600160a01b031614610db05760405162461bcd60e51b815260206004820152600f60248201526e41474752454741544f525f4f4e4c5960881b604482015260640161026d565b600154610100900460ff1615610df15760405162461bcd60e51b815260040161026d90602080825260049082015263444f4e4560e01b604082015260600190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e759190614b9e565b82516040516337a3dba360e01b815260048101919091529091506000906001600160a01b038316906337a3dba39060240160c060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee79190614f60565b8051602082015160408084015190516351d407ff60e11b81526001600160a01b039384166004820152602481019290925260448201529192506000917f00000000000000000000000000000000000000000000000000000000000000009091169063a3a80ffe9060640161014060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f93919061505f565b90508360200151600014158015610fae575060008160e00151115b8015610fc55750816080015115158160c001511515145b8015610fd8575081606001518160a00151145b801561100657508060c00151610ff95783602001518260a001511015611006565b83602001518260a0015111155b15611123578151602083015160408085015160a0860151915163a354418160e01b81526001600160a01b0394851660048201526024810193909352604483015260648201527f00000000000000000000000000000000000000000000000000000000000000009091169063a354418190608401600060405180830381600087803b15801561109357600080fd5b505af11580156110a7573d6000803e3d6000fd5b505085518451602086015160408088015160a089015191517fe57d6aa2ba102529f6f4f17498f4a95f866a5513e746e676e6cd037c991b6fe9975061111696509091909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b60405180910390a1611181565b8351825160208085015160408087015181519586526001600160a01b03909416928501929092529083015260608201527f9f8afe891d3a14944e4640a13f6655d57305c4fe858e7b541a931c5b70d8f8c29060800160405180910390a15b83516040516361417a4360e01b815260048101919091526001600160a01b038416906361417a4390602401600060405180830381600087803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190614b9e565b6001600160a01b0316336001600160a01b0316146112b15760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b604482015260640161026d565b60328111156113025760405162461bcd60e51b815260206004820152600860248201527f41424f56455f3530000000000000000000000000000000000000000000000000604482015260640161026d565b6000819055604080518181526009818301527f7661756c7446656550000000000000000000000000000000000000000000000060608201526020810183905290517f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab9181900360800190a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190614b9e565b6001600160a01b0316336001600160a01b0316146114445760405162461bcd60e51b815260206004820152600f60248201526e41474752454741544f525f4f4e4c5960881b604482015260640161026d565b600154610100900460ff16156114855760405162461bcd60e51b815260040161026d90602080825260049082015263444f4e4560e01b604082015260600190565b80516040516399794d3560e01b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916399794d35916114d89160040190815260200190565b60c060405180830381865afa1580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190614bd2565b6040808201516060830151608084015192516351d407ff60e11b81526001600160a01b039283166004820152602481019190915260448101929092529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe9060640161014060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c9919061505f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f9190614b9e565b90506000816001600160a01b0316635ad9f9936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190614b9e565b905084602001516000141580156116d0575060008360e00151115b80156117f657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8d24b486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117599190614c75565b602085015160405163aa3b7d7760e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aa3b7d7790602401602060405180830381865afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e89190614c75565b6117f29190614ca4565b4310155b1561206b57825160208401516040808601519051638c8ff1d560e01b81526001600160a01b039384166004820152602481019290925260448201526000917f00000000000000000000000000000000000000000000000000000000000000001690638c8ff1d59060640160c060405180830381865afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a1919061507c565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119079190614b9e565b90506119426040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60208601516040516324abd3fb60e01b815260048101919091526001600160a01b038316906324abd3fb90602401602060405180830381865afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190614c5a565b6119bf578760200151611a15565b60008760a0015160038111156119d7576119d7614dd3565b14611a0e5760018760a0015160038111156119f4576119f4614dd3565b14611a03578760200151611a15565b856101200151611a15565b8561010001515b80825260a087015160c088015160e0890151611a32939190614327565b816020018181525050846001600160a01b0316633c88e8826040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d9190614c75565b6040820181905260208401516060880151611ab89190614d90565b611ac29190614dff565b8160600181815250506402540be40083602001518760600151611ae59190614d90565b611aef9190614dff565b608082015260028760a001516003811115611b0c57611b0c614dd3565b03611c3b578551602087015160408089015160a08a015160c08b0151608087015160e08d01519451636bc84d5960e01b81526001600160a01b0397881660048201526024810196909652604486019390935260648501919091521515608484015260a483015260c48201526000917f00000000000000000000000000000000000000000000000000000000000000001690636bc84d599060e401602060405180830381865afa158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be79190614c75565b90508660c00151611bff578089602001511015611c08565b80896020015111155b611c13576000611c30565b606482606001516005611c269190614d90565b611c309190614dff565b60a083015250611db3565b60008760a001516003811115611c5357611c53614dd3565b148015611c6557506000866101000151115b8015611c9557508560c00151611c875785610100015188602001511115611c95565b856101000151886020015110155b80611cf5575060018760a001516003811115611cb357611cb3614dd3565b148015611cc557506000866101200151115b8015611cf557508560c00151611ce75785610120015188602001511015611cf5565b856101200151886020015111155b611d00576000611dad565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401611d3a91815260200190565b602060405180830381865afa158015611d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7b9190614c75565b8860e001518460600151611d8f9190614d90565b611d999190614d90565b611da39190614dff565b611dad9190614dff565b60a08201525b60a081015115612067576000611ec587836020015184608001518a60e001518860400151611de19190614dff565b60028d60a001516003811115611df957611df9614dd3565b14611eb0576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b8152600401611e3891815260200190565b602060405180830381865afa158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e799190614c75565b8e60e001518a60600151611e8d9190614d90565b611e979190614d90565b611ea19190614dff565b611eab9190614dff565b611eb6565b8660a001515b8760a0015188604001516143ac565b9050846001600160a01b0316633076778760405180608001604052808b604001516001600160a01b031681526020018b6060015181526020018b6080015181526020018b60a001516003811115611f1e57611f1e614dd3565b8152508460a001516040518363ffffffff1660e01b8152600401611f439291906150ce565b600060405180830381600087803b158015611f5d57600080fd5b505af1158015611f71573d6000803e3d6000fd5b50505050602088015160a08301516040516339caebcf60e11b8152600481019290925260248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637395d79e90604401600060405180830381600087803b158015611fe757600080fd5b505af1158015611ffb573d6000803e3d6000fd5b505050507f165b0f8d6347f7ebe92729625b03ace41aeea8fd7ebf640f89f2593ab0db63d189600001518960800151898b600001518c60a001518760000151600089608001518a602001518a60405161205d9a99989796959493929190614ea9565b60405180910390a1505b5050505b806001600160a01b031663bf654d2b604051806080016040528087604001516001600160a01b0316815260200187606001518152602001876080015181526020018760a0015160038111156120c2576120c2614dd3565b8152506040518263ffffffff1660e01b81526004016120e19190614f4c565b600060405180830381600087803b1580156120fb57600080fd5b505af115801561210f573d6000803e3d6000fd5b5050865160405163201d8bdb60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063201d8bdb9150602401600060405180830381600087803b15801561217857600080fd5b505af115801561218c573d6000803e3d6000fd5b505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122199190614b9e565b6001600160a01b0316336001600160a01b0316146122645760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b604482015260640161026d565b6001805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123349190614b9e565b6001600160a01b0316336001600160a01b03161461237f5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b604482015260640161026d565b6001805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936122a89390049091161515815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124599190614b9e565b6001600160a01b0316336001600160a01b0316146124ab5760405162461bcd60e51b815260206004820152600f60248201526e41474752454741544f525f4f4e4c5960881b604482015260640161026d565b600154610100900460ff16156124ec5760405162461bcd60e51b815260040161026d90602080825260049082015263444f4e4560e01b604082015260600190565b805160405163b66e6b0560e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163b66e6b059161253f9160040190815260200190565b6101e060405180830381865afa15801561255d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258191906150e9565b90508060200151600003612593575050565b6000816000015190506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f326125ea8760200151886040015188608001518860c001516133d4565b85602001518660c001518760e0015188608001516126089190614d90565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b9190614daf565b91509150808360a001818152505060006402540be4006064866060015187604001516126a79190614d90565b6126b19190614dff565b6126bb9190614dff565b60015490915060ff16806126d157506020860151155b8061271257508360c001516126fb578085604001516126f0919061517a565b8460a0015110612712565b80856040015161270b9190614ca4565b8460a00151115b806127515750600084610100015111801561275157508360c00151612743578361010001518460a001511115612751565b8361010001518460a0015110155b806127905750600084610120015111801561279057508360c00151612782578361012001518460a001511015612790565b8361012001518460a0015111155b806127b457506127b284602001518560c0015186608001518760e00151613448565b155b8061284d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283c9190614c75565b60e085015161284b9085614d90565b115b15612a38577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e70e7b67f000000000000000000000000000000000000000000000000000000000000000086600001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfbacc1489602001518a60e001518b608001516128ef9190614d90565b6040516001600160e01b031960e085901b1681526004810192909252602482015260016044820181905260648201526084016020604051808303816000875af1158015612940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129649190614c75565b8860800151612973919061517a565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156129c257600080fd5b505af11580156129d6573d6000803e3d6000fd5b50508751865160208801516040517f4b2ef4d80a0964a9a8f43256d8111558389b384d2029743c1eeb6950b14d9c659550612a2b94509283526001600160a01b03919091166020830152604082015260600190565b60405180910390a1612abe565b600080612a49866105dc6000613777565b915091507f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c333099788600001518360018560a00151896402540be400878960600151612a929190614d90565b612a9c9190614dff565b600080604051612ab3989796959493929190615191565b60405180910390a150505b8551604051630195728b60e71b81526004810191909152600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b158015612b2a57600080fd5b505af1158015612b3e573d6000803e3d6000fd5b5050505050505050505b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcd9190614b9e565b6001600160a01b0316336001600160a01b031614612c1f5760405162461bcd60e51b815260206004820152600f60248201526e41474752454741544f525f4f4e4c5960881b604482015260640161026d565b600154610100900460ff1615612c605760405162461bcd60e51b815260040161026d90602080825260049082015263444f4e4560e01b604082015260600190565b805160405163b66e6b0560e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163b66e6b0591612cb39160040190815260200190565b6101e060405180830381865afa158015612cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf591906150e9565b90508060200151600003612d07575050565b80518051602082015160409283015192516351d407ff60e11b81526001600160a01b039283166004820152602481019190915260448101929092526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a3a80ffe9060640161014060405180830381865afa158015612d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db5919061505f565b60e08101519091501561337d57805160208201516040808401519051638c8ff1d560e01b81526001600160a01b039384166004820152602481019290925260448201526000917f00000000000000000000000000000000000000000000000000000000000000001690638c8ff1d59060640160c060405180830381865afa158015612e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e68919061507c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eee9190614b9e565b90506000816001600160a01b0316633c88e8826040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f549190614c75565b90506000818560e0015185602001518760600151612f729190614d90565b612f7c9190614d90565b612f869190614dff565b9050866020015160000361316f5760208501516040516333eeb30560e21b815260048101919091526024810182905260006044820181905260016064830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfbacc14906084016020604051808303816000875af1158015613019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303d9190614c75565b905080866060015111156130e357808660600181815161305d919061517a565b905250604051631a97b52160e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d4bda908906130ac9089906004016151dd565b600060405180830381600087803b1580156130c657600080fd5b505af11580156130da573d6000803e3d6000fd5b5050505061310c565b61310a8660631960008960e0015189604001516131009190614dff565b60008060006143ac565b505b875186516020808901516040808b015181519586526001600160a01b03909416928501929092529083015260608201527f48fd47dc6dddc9ad741367983847ae75e3bf20755d74d84ef0090562727f92a59060800160405180910390a150613378565b6131a86040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6131c48660a0015189602001518860c001518960e00151614327565b60208083019190915285015160608701516402540be400916131e591614d90565b6131ef9190614dff565b60808201819052602082015160e0880151604088015160009361331c938b93909261321a9190614dff565b6402540be40060648b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015613260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132849190614b9e565b6001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b81526004016132b591815260200190565b602060405180830381865afa1580156132d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f69190614c75565b613300908b614d90565b61330a9190614dff565b6133149190614dff565b60008a6143ac565b90507f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c333099789600001518860008c602001516000876080015188602001518860405161336d989796959493929190615191565b60405180910390a150505b505050505b8251604051630195728b60e71b81526004810191909152600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401610ca5565b6000806402540be4006064806133ea8789614d90565b6133f49190614dff565b6133fe908861517a565b6134089089614d90565b6134129190614dff565b61341c9190614dff565b9050826134325761342d818761517a565b61343c565b61343c8187614ca4565b9150505b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cd9190614b9e565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561350a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352e9190614b9e565b6040516328daca2160e01b815260048101889052600260248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906328daca2190604401602060405180830381865afa15801561359d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c19190614c75565b6135cb8486614d90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166328daca21898961360757600161360a565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190614c75565b61367c9190614ca4565b1115801561343c5750604051636261466160e01b8152600481018790526001600160a01b03821690636261466190602401602060405180830381865afa1580156136ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ee9190614c75565b604051634a90ba9f60e11b815260048101889052861515602482015285906001600160a01b03841690639521753e90604401602060405180830381865afa15801561373d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137619190614c75565b61376b9190614ca4565b11159695505050505050565b6137d860405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385d9190614b9e565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561389f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c39190614b9e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfbacc1488602001518960e001518a6080015161390d9190614d90565b6040516001600160e01b031960e085901b1681526004810192909252602482015260016044820181905260648201526084016020604051808303816000875af115801561395e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139829190614c75565b87608001818151613993919061517a565b915081815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156139f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1c9190614b9e565b87516080890151604051637f406e8b60e11b81526001600160a01b03928316600482015260248101919091526000604482015291169063fe80dd1690606401600060405180830381600087803b158015613a7557600080fd5b505af1158015613a89573d6000803e3d6000fd5b505050506000826001600160a01b0316633c88e8826040518163ffffffff1660e01b8152600401602060405180830381865afa158015613acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af19190614c75565b9050806402540be4008960800151613b099190614d90565b613b139190614dff565b60608901526000608089018190526020890151604051639848a68d60e01b815260048101919091526402540be400906064906001600160a01b03861690639848a68d90602401602060405180830381865afa158015613b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9a9190614c75565b8b60e001518c60600151613bae9190614d90565b613bb89190614d90565b613bc29190614dff565b613bcc9190614dff565b8951604051633b0f0f2f60e01b81526001600160a01b0391821660048201529192506000917f000000000000000000000000000000000000000000000000000000000000000090911690633b0f0f2f90602401602060405180830381865afa158015613c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c609190614b9e565b90506001600160a01b03811615613d8d57613c7c600283614dff565b6040516329bc0a1f60e11b81526001600160a01b03838116600483015260248201839052600160448301529193507f000000000000000000000000000000000000000000000000000000000000000090911690635378143e90606401600060405180830381600087803b158015613cf257600080fd5b505af1158015613d06573d6000803e3d6000fd5b50506040516321f7a30b60e01b81526001600160a01b038481166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001692506321f7a30b9150604401600060405180830381600087803b158015613d7457600080fd5b505af1158015613d88573d6000803e3d6000fd5b505050505b818a606001818151613d9f919061517a565b90525050506105dc871015613ffe5760006402540be4006064846001600160a01b0316639c8dd2fa8c602001516040518263ffffffff1660e01b8152600401613dea91815260200190565b602060405180830381865afa158015613e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2b9190614c75565b8b60e001518c60600151613e3f9190614d90565b613e499190614d90565b613e539190614dff565b613e5d9190614dff565b90508089606001818151613e71919061517a565b91508181525050836001600160a01b0316635ad9f9936040518163ffffffff1660e01b8152600401602060405180830381865afa158015613eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eda9190614b9e565b6001600160a01b0316633076778760405180608001604052808c600001516001600160a01b031681526020018c6020015181526020018a8152602001600380811115613f2857613f28614dd3565b815250836040518363ffffffff1660e01b8152600401613f499291906150ce565b600060405180830381600087803b158015613f6357600080fd5b505af1158015613f77573d6000803e3d6000fd5b50506040516339caebcf60e11b8152600481018b9052602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015613fe457600080fd5b505af1158015613ff8573d6000803e3d6000fd5b50505050505b8751602089015160405163292c161760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263292c161792614063926004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015614080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a49190614c75565b8860400181815250506140ca8860a001518960e001518a61010001518b60c0015161495e565b886101000181815250506140f18860a001518960e001518a61012001518b60c001516149f1565b610120890152875160208901516040808b015160c08c01519151630735e1cd60e11b81526001600160a01b03948516600482015260248101939093526044830152151560648201527f000000000000000000000000000000000000000000000000000000000000000090911690630e6bc39a90608401600060405180830381600087803b15801561418157600080fd5b505af1158015614195573d6000803e3d6000fd5b50505050816001600160a01b03166320f0fc5e89602001516402540be400848c606001516141c39190614d90565b6141cd9190614dff565b60c08c01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260016064820152608401600060405180830381600087803b15801561422157600080fd5b505af1158015614235573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c311ab31896040518060c00160405280600081526020018581526020016402540be400868e60e001518f6060015161429c9190614d90565b6142a69190614d90565b6142b09190614dff565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b81526004016142e79291906151ec565b600060405180830381600087803b15801561430157600080fd5b505af1158015614315573d6000803e3d6000fd5b50999a92995091975050505050505050565b6000808361433e576143398587615243565b614348565b6143488686615243565b9050600061435d6402540be400610384615282565b905086846402540be400614372856064615282565b61437c9190615282565b6143869190615282565b6143909190615309565b925080831361439f57826143a1565b805b979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e3f04eba606460005460646143ee919061517a565b6143f89088614d90565b6144029190614dff565b6040518263ffffffff1660e01b815260040161442091815260200190565b600060405180830381600087803b15801561443a57600080fd5b505af115801561444e573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144d49190614b9e565b6001600160a01b031663b243fb016402540be400606485600054896144f99190614d90565b6145039190614d90565b61450d9190614dff565b6145179190614dff565b6040518263ffffffff1660e01b815260040161453591815260200190565b600060405180830381600087803b15801561454f57600080fd5b505af1158015614563573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636ceaca6789600001518a602001518b604001518c60c001518b8e60e001518e6402540be4008b8d8f6145c49190614ca4565b6145ce9190614d90565b6145d89190614dff565b6040516001600160e01b031960e08b901b1681526001600160a01b039098166004890152602488019690965260448701949094529115156064860152608485015260a484015260c483015260e4820152610104016020604051808303816000875af115801561464b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061466f9190614c75565b9050801561475e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146f99190614b9e565b885160405163214a9a3360e01b81526001600160a01b0391821660048201526024810184905291169063214a9a3390604401600060405180830381600087803b15801561474557600080fd5b505af1158015614759573d6000803e3d6000fd5b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156147bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147e09190614b9e565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561481d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148419190614b9e565b602089015160c08a01516040516310787e2f60e11b815260048101929092526024820188905215156044820152600060648201526001600160a01b0391909116906320f0fc5e90608401600060405180830381600087803b1580156148a557600080fd5b505af11580156148b9573d6000803e3d6000fd5b5050895160208b01516040808d015190516390d112b960e01b81526001600160a01b039384166004820152602481019290925260448201527f000000000000000000000000000000000000000000000000000000000000000090911692506390d112b99150606401600060405180830381600087803b15801561493b57600080fd5b505af115801561494f573d6000803e3d6000fd5b50505050979650505050505050565b600082158061498757506149796402540be400610384615282565b61498586858588614327565b145b156149e857600060648561499d61038489614d90565b6149a79190614dff565b6149b19190614dff565b9050826149d657858111156149c75760006149e0565b6149d1818761517a565b6149e0565b6149e08187614ca4565b915050613440565b50909392505050565b60008083118015614a275750614a0d6402540be400604b615282565b614a1990600019615282565b614a2586858588614327565b125b156149e8576000606485614a3c604b89614d90565b614a469190614dff565b614a509190614dff565b905082614a61576149d18187614ca4565b6149e0818761517a565b60405160c0810167ffffffffffffffff81118282101715614a9c57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101a0810167ffffffffffffffff81118282101715614a9c57634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715614a9c57634e487b7160e01b600052604160045260246000fd5b600060608284031215614b1857600080fd5b6040516060810181811067ffffffffffffffff82111715614b4957634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060208284031215614b8257600080fd5b5035919050565b6001600160a01b0381168114612b4857600080fd5b600060208284031215614bb057600080fd5b8151614bbb81614b89565b9392505050565b8051614bcd81614b89565b919050565b600060c08284031215614be457600080fd5b614bec614a6b565b8251614bf781614b89565b8152602083810151908201526040830151614c1181614b89565b80604083015250606083015160608201526080830151608082015260a083015160048110614c3e57600080fd5b60a08201529392505050565b80518015158114614bcd57600080fd5b600060208284031215614c6c57600080fd5b614bbb82614c4a565b600060208284031215614c8757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614cb757614cb7614c8e565b500190565b60006101a08284031215614ccf57600080fd5b614cd7614aa2565b614ce083614bc2565b815260208301516020820152604083015160408201526060830151606082015260808301516080820152614d1660a08401614c4a565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b600060208284031215614d8157600080fd5b815160038110614bbb57600080fd5b6000816000190483118215151615614daa57614daa614c8e565b500290565b60008060408385031215614dc257600080fd5b505080516020909101519092909150565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082614e0e57614e0e614de9565b500490565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151614e6560c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b60048110614ea557634e487b7160e01b600052602160045260246000fd5b9052565b8a8152602081018a90526102608101614ec5604083018b614e13565b6001600160a01b038916610180830152614ee36101a0830189614e87565b6101c08201969096526101e08101949094526102008401929092526102208301526102409091015295945050505050565b6001600160a01b03815116825260208101516020830152604081015160408301526060810151614f476060840182614e87565b505050565b60808101614f5a8284614f14565b92915050565b600060c08284031215614f7257600080fd5b614f7a614a6b565b8251614f8581614b89565b80825250602083015160208201526040830151604082015260608301516060820152614fb360808401614c4a565b608082015260a083015160a08201528091505092915050565b60006101408284031215614fdf57600080fd5b614fe7614ad4565b9050614ff282614bc2565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261503260c08301614c4a565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b6000610140828403121561507257600080fd5b614bbb8383614fcc565b600060c0828403121561508e57600080fd5b615096614a6b565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152614c3e60a08401614c4a565b60a081016150dc8285614f14565b8260808301529392505050565b60006101e082840312156150fc57600080fd5b60405160c0810181811067ffffffffffffffff8211171561512d57634e487b7160e01b600052604160045260246000fd5b60405261513a8484614fcc565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b60008282101561518c5761518c614c8e565b500390565b88815261022081016151a6602083018a614e13565b9615156101608201526101808101959095526101a08501939093526101c08401919091526101e08301526102009091015292915050565b6101408101614f5a8284614e13565b61020081016151fb8285614e13565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e08301529392505050565b60008083128015600160ff1b85018412161561526157615261614c8e565b836001600160ff1b0301831381161561527c5761527c614c8e565b50500390565b60006001600160ff1b036000841360008413858304851182821616156152aa576152aa614c8e565b600160ff1b60008712828116878305891216156152c9576152c9614c8e565b600087129250878205871284841616156152e5576152e5614c8e565b878505871281841616156152fb576152fb614c8e565b505050929093029392505050565b60008261531857615318614de9565b600160ff1b82146000198414161561533257615332614c8e565b50059056fea2646970667358221220239146a776b7bf5ae7a200a75fd6cad729dcfb35d2d770cf3201a88a5d5f1a8464736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6767,
        "contract": "contracts/GNSTradingCallbacksV6_1.sol:GNSTradingCallbacksV6_1",
        "label": "vaultFeeP",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6769,
        "contract": "contracts/GNSTradingCallbacksV6_1.sol:GNSTradingCallbacksV6_1",
        "label": "isPaused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6771,
        "contract": "contracts/GNSTradingCallbacksV6_1.sol:GNSTradingCallbacksV6_1",
        "label": "isDone",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
