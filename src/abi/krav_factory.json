{
  "address": "0xC9204B4536D191f00209De86305DbB855c109Bb3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairInfoT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairStorageT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradingT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_callbackT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceAggregatorT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "QuantoCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract TokenInterfaceV5",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterfaceV5",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_nodes",
          "type": "address[]"
        },
        {
          "internalType": "int256",
          "name": "proportionBTC",
          "type": "int256"
        }
      ],
      "name": "createQuanto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quantos",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "storageT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pairInfoT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pairStorageT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tradingT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "callbackT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceAggregatorT",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quantosCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58cd9e2ac596a3ae2e8c50c0a30b8e829078d66dcc291886e2ce93f01cce83e8",
  "receipt": {
    "to": null,
    "from": "0x284f1b4a9C4B9495F79de62a55337e0a07cCF3fF",
    "contractAddress": "0x275cA30a3DaF5B02F0aE13f528969f16A2e3928D",
    "transactionIndex": 11,
    "gasUsed": "1115861",
    "logsBloom": "0x
    "blockHash": "0xa0a1b11a6e2ae323c6ce5db8c4f748f94118dae6067c3d7e25837bd3091eed2a",
    "transactionHash": "0x58cd9e2ac596a3ae2e8c50c0a30b8e829078d66dcc291886e2ce93f01cce83e8",
    "logs": [],
    "blockNumber": 31218723,
    "cumulativeGasUsed": "1962147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb71414452F66BEcD555DABD96931Bf10CCBE7eB1",
    "0x87F36427E8c7950C9c02737DB055e272Ab82B00F",
    "0x1b1d65471a52741a56B6798a410f4148da88eA23",
    "0xB4915a43C12b0c2F14153E2e4C672CABbAfb2b62",
    "0x8D1b2Ad14e1F6a527E63F08162b7a7d19B9bc1fa",
    "0x3213133Cdf23a34fbFbCFaFD6e0c638E6F99e25c",
    "0x9f6F0C384b599C0A1AeC03238c6fD04437470447",
    "0x174591D53fdaF709606Be70EC174C4238A94BcB0"
  ],
  "numDeployments": 1,
  "solcInputHash": "c069e06a75b556daef6e465cf73c8e3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairInfoT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairStorageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_callbackT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceAggregatorT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"QuantoCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_nodes\",\"type\":\"address[]\"},{\"internalType\":\"int256\",\"name\":\"proportionBTC\",\"type\":\"int256\"}],\"name\":\"createQuanto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairInfoT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairStorageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAggregatorT\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantosCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KravFactory.sol\":\"KravFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"contracts/KravFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport './interfaces/TokenInterfaceV5.sol';\\nimport './interfaces/StorageInterfaceV5.sol';\\nimport './interfaces/GNSPairInfosInterfaceV6.sol';\\nimport './interfaces/PairsStorageInterfaceV6.sol';\\nimport './interfaces/VaultInterfaceV5.sol';\\n\\nimport '@openzeppelin/contracts/proxy/Clones.sol';\\n\\ncontract KravFactory {\\n\\n    struct Quanto {\\n        address tokenT;\\n        address storageT;\\n        address pairInfoT;\\n        address pairStorageT;\\n        address tradingT;\\n        address callbackT;\\n        address rewardT;\\n        address vaultT;\\n        address priceAggregatorT;\\n    }\\n\\n    address immutable storageT;\\n    address immutable pairInfoT;\\n    address immutable pairStorageT;\\n    address immutable tradingT;\\n    address immutable callbackT;\\n    address immutable rewardT;\\n    address immutable vaultT;\\n    address immutable priceAggregatorT;\\n\\n    mapping(uint => Quanto) public quantos;\\n    uint256 public quantosCount;\\n\\n    event QuantoCreated(uint256, address, address, address, address, address, address, address, address);\\n\\n    constructor(\\n        address _storageT,\\n        address _pairInfoT,\\n        address _pairStorageT,\\n        address _tradingT,\\n        address _callbackT,\\n        address _rewardT,\\n        address _vaultT,\\n        address _priceAggregatorT\\n    ) {\\n        storageT = _storageT;\\n        pairInfoT = _pairInfoT;\\n        pairStorageT = _pairStorageT;\\n        tradingT = _tradingT;\\n        callbackT = _callbackT;\\n        rewardT = _rewardT;\\n        vaultT = _vaultT;\\n        priceAggregatorT = _priceAggregatorT;\\n    }\\n\\n    function createQuanto(TokenInterfaceV5 _token, TokenInterfaceV5 _linkToken, address[] calldata _nodes, int proportionBTC) external {\\n        Quanto memory quanto;\\n\\n        quanto.tokenT = address(_token);\\n        quanto.storageT = Clones.clone(storageT);\\n        quanto.pairInfoT = Clones.clone(pairInfoT);\\n        quanto.pairStorageT = Clones.clone(pairStorageT);\\n        quanto.tradingT = Clones.clone(tradingT);\\n        quanto.callbackT = Clones.clone(callbackT);\\n        quanto.rewardT = Clones.clone(rewardT);\\n        quanto.vaultT = Clones.clone(vaultT);\\n        quanto.priceAggregatorT = Clones.clone(priceAggregatorT);\\n\\n        StorageInterfaceV5 _storage = StorageInterfaceV5(quanto.storageT);\\n        GNSPairInfosInterfaceV6 _pairInfo = GNSPairInfosInterfaceV6(quanto.pairInfoT);\\n        PairsStorageInterfaceV6 _pairStorage = PairsStorageInterfaceV6(quanto.pairStorageT);\\n\\n        _storage.initialize(_token, _linkToken);\\n        _pairInfo.initialize(_storage);\\n        _pairStorage.initialize(1, _storage);\\n        TradingInterface(quanto.tradingT).initialize(_storage, _pairInfo);\\n        TradingInterface(quanto.callbackT).initialize(_storage, _pairInfo);\\n        NftRewardsInterfaceV6(quanto.rewardT).initialize(_storage);\\n        VaultInterfaceV5(quanto.vaultT).initialize(_storage);\\n        AggregatorInterfaceV6(quanto.priceAggregatorT).initialize(_nodes, _pairStorage, quanto.rewardT, _storage, address(_linkToken));\\n\\n        _storage.setPriceAggregator(quanto.priceAggregatorT);\\n        _storage.addTradingContract(quanto.tradingT);\\n        _storage.addTradingContract(quanto.callbackT);\\n        _storage.addTradingContract(quanto.vaultT);\\n        _storage.setTrading(quanto.tradingT);\\n        _storage.setCallbacks(quanto.callbackT);\\n        _storage.setVault(quanto.vaultT);\\n        _storage.setMaxOpenInterestDai(0, type(uint256).max);\\n\\n        _pairStorage.addFee(PairsStorageInterfaceV6.Fee(\\\"crypto\\\", 300000000, 600000000, 60000000, 200000000,1,1500000000000000000000));\\n        _pairStorage.addGroup(PairsStorageInterfaceV6.Group(\\\"crypto\\\",bytes32(0x3465633339336163316565343438356639366563373336343666363565373436),2,150,15));\\n        _pairStorage.addPair(PairsStorageInterfaceV6.Pair(\\\"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\\\",\\\"bitcoin,usd\\\",PairsStorageInterfaceV6.Feed(address(0x5741306c21795FdCBb9b265Ea0255F499DFe515C),address(0),PairsStorageInterfaceV6.FeedCalculation.DEFAULT,20000000000), 400000000,0,0,proportionBTC));\\n\\n        _linkToken.transfer(quanto.priceAggregatorT, 0.1 ether);\\n\\n        uint256 _index = quantosCount++;\\n        quantos[_index] = quanto;\\n        emit QuantoCreated(_index, address(_storage), address(_pairInfo), address(_pairStorage), quanto.tradingT, quanto.callbackT, quanto.rewardT, quanto.vaultT, quanto.priceAggregatorT);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc632f482af43b4634e1ac032fd72014c581eda29e7a9a997d35be63c985fc9be\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface GNSPairInfosInterfaceV6{\\n    function maxNegativePnlOnOpenP() external view returns(uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice,   // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    ) external view returns(\\n        uint priceImpactP,      // PRECISION (%)\\n        uint priceAfterImpact   // PRECISION\\n    );\\n\\n   function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice,  // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns(uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral,   // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee    // 1e18 (DAI)\\n    ) external returns(uint); // 1e18 (DAI)\\n\\n    function initialize(StorageInterfaceV5) external;\\n}\",\"keccak256\":\"0xa5cd5f2a70169c406cc3daff4c11bc7725d29d5421a20718f906ee0abd96cf7d\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xc15a2883e44dce70305e896f2492f485c77f1a01595a9bb42d2662a22cfa5274\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface PairsStorageInterfaceV6{\\n    struct Pair{\\n        string from;\\n        string to;\\n        Feed feed;\\n        uint spreadP;               // PRECISION\\n        uint groupIndex;\\n        uint feeIndex;\\n        int proportionBTC;          // 1000 -> ALT:BTC = 1000:1 ; -1000 -> ALT:BTC = 1:1000\\n    }\\n    struct Group{\\n        string name;\\n        bytes32 job;\\n        uint minLeverage;\\n        uint maxLeverage;\\n        uint maxCollateralP;        // % (of DAI vault current balance)\\n    }\\n    struct Fee{\\n        string name;\\n        uint openFeeP;              // PRECISION (% of leveraged pos)\\n        uint closeFeeP;             // PRECISION (% of leveraged pos)\\n        uint oracleFeeP;            // PRECISION (% of leveraged pos)\\n        uint nftLimitOrderFeeP;     // PRECISION (% of leveraged pos)\\n        uint referralFeeP;          // PRECISION (% of leveraged pos)\\n        uint minLevPosDai;          // 1e18 (collateral x leverage, useful for min fee)\\n    }\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function initialize(uint _currentOrderId, StorageInterfaceV5 _storageT) external;\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n    function addFee(Fee calldata _fee) external;\\n    function addGroup(Group calldata _group) external;\\n    function addPair(Pair calldata _pair) external;\\n}\",\"keccak256\":\"0xb74e43340921cf67175e86076cdd083672dfb39326a47847747ef2bfedd20ccb\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './UniswapRouterInterfaceV5.sol';\\nimport './TokenInterfaceV5.sol';\\nimport './NftInterfaceV5.sol';\\nimport './VaultInterfaceV5.sol';\\nimport './PairsStorageInterfaceV6.sol';\\nimport \\\"./GNSPairInfosInterfaceV6.sol\\\";\\npragma solidity 0.8.14;\\n\\ninterface StorageInterfaceV5{\\n    enum LimitOrder { TP, SL, LIQ, OPEN }\\n    struct Trader{\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal;  // 1e18\\n    }\\n    struct Trade{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken;       // 1e18\\n        uint positionSizeDai;       // 1e18\\n        uint openPrice;             // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION\\n        uint sl;                    // PRECISION\\n    }\\n    struct TradeInfo{\\n        uint tokenId;\\n        uint tokenPriceDai;         // PRECISION\\n        uint openInterestDai;       // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize;          // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION (%)\\n        uint sl;                    // PRECISION (%)\\n        uint minPrice;              // PRECISION\\n        uint maxPrice;              // PRECISION\\n        uint block;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingMarketOrder{\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice;           // PRECISION\\n        uint slippageP;             // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingNftOrder{\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n    function initialize(TokenInterfaceV5, TokenInterfaceV5) external;\\n    function PRECISION() external pure returns(uint);\\n    function gov() external view returns(address);\\n    function dev() external view returns(address);\\n    function dai() external view returns(TokenInterfaceV5);\\n    // function token() external view returns(TokenInterfaceV5);\\n    function linkErc677() external view returns(TokenInterfaceV5);\\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\\n    function priceAggregator() external view returns(AggregatorInterfaceV6);\\n    function vault() external view returns(VaultInterfaceV5);\\n    function trading() external view returns(address);\\n    function callbacks() external view returns(address);\\n    function handleTokens(address,uint,bool) external;\\n    function transferDai(address, address, uint) external;\\n    function transferLinkToAggregator(address, uint, uint) external;\\n    function unregisterTrade(address, uint, uint) external;\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n    function storeReferral(address, address) external;\\n    function openTrades(address, uint, uint) external view returns(Trade memory);\\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\\n    function updateSl(address, uint, uint, uint) external;\\n    function updateTp(address, uint, uint, uint) external;\\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\\n    function spreadReductionsP(uint) external view returns(uint);\\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\\n    function maxSlP() external view returns(uint);\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\\n    function increaseNftRewards(uint, uint) external;\\n    function nftSuccessTimelock() external view returns(uint);\\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\\n    function setNftLastSuccess(uint) external;\\n    function updateTrade(Trade memory) external;\\n    function nftLastSuccess(uint) external view returns(uint);\\n    function unregisterPendingNftOrder(uint) external;\\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\\n    function distributeLpRewards(uint) external;\\n    function getReferral(address) external view returns(address);\\n    function increaseReferralRewards(address, uint) external;\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n    function setLeverageUnlocked(address, uint) external;\\n    function getLeverageUnlocked(address) external view returns(uint);\\n    function openLimitOrdersCount(address, uint) external view returns(uint);\\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\\n    function openTradesCount(address, uint) external view returns(uint);\\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\\n    function maxTradesPerPair() external view returns(uint);\\n    function maxTradesPerBlock() external view returns(uint);\\n    function tradesPerBlock(uint) external view returns(uint);\\n    function pendingOrderIdsCount(address) external view returns(uint);\\n    function maxPendingMarketOrders() external view returns(uint);\\n    function maxGainP() external view returns(uint);\\n    function defaultLeverageUnlocked() external view returns(uint);\\n    function openInterestDai(uint, uint) external view returns(uint);\\n    function getPendingOrderIds(address) external view returns(uint[] memory);\\n    function traders(address) external view returns(Trader memory);\\n    function nfts(uint) external view returns(NftInterfaceV5);\\n    function setPriceAggregator(address) external;\\n    function addTradingContract(address _trading) external;\\n    function setTrading(address _trading) external;\\n    function setCallbacks(address _callbacks) external;\\n    function setVault(address _vault) external;\\n    function setMaxOpenInterestDai(uint _pairIndex, uint _newMaxOpenInterest) external;\\n}\\n\\ninterface AggregatorInterfaceV6{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function initialize(address[] memory, PairsStorageInterfaceV6, address, StorageInterfaceV5, address) external;\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function nftRewards() external view returns(NftRewardsInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceDai() external view returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function tokenDaiReservesLp() external view returns(uint, uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface NftRewardsInterfaceV6{\\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\\n    function initialize(StorageInterfaceV5 _storageT) external;\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\\n}\\n\\ninterface TradingInterface {\\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external;\\n}\",\"keccak256\":\"0x7559e51e695456c98f4b9f6462e92de0c7e454300a7cc5dcb3092f184b8680db\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x839cb0952ddb74fd2cc563cbc511a7f4cec56599cb7cc3502f97c32327f2fe58\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface UniswapRouterInterfaceV5{\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x366be084acb30ed686cc7f4999f30568ebdb11e6cc5909c6b24f95092b4dbddf\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface VaultInterfaceV5{\\n\\tfunction initialize(StorageInterfaceV5 _storageT) external;\\n\\tfunction sendDaiToTrader(address, uint) external;\\n\\tfunction receiveDaiFromTrader(address, uint, uint) external;\\n\\tfunction currentBalanceDai() external view returns(uint);\\n\\tfunction distributeRewardDai(uint) external;\\n}\",\"keccak256\":\"0x713482c37de73c076102b076d4f63741f33e0f224ff9b17d32c55ac389d75255\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063026c4ad81461004657806361addb471461005b578063ce67948f1461012c575b600080fd5b610059610054366004610f40565b610143565b005b6100cd610069366004610fdd565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b03978816989688169795861696948616959384169492841693918216928216911689565b604080516001600160a01b039a8b168152988a1660208a01529689169688019690965293871660608701529186166080860152851660a0850152841660c0840152831660e0830152909116610100820152610120015b60405180910390f35b61013560015481565b604051908152602001610123565b6040805161012081018252600060208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526001600160a01b03861681526101be7f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b031660208201526101f57f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b0316604082015261022c7f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b031660608201526102637f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b0316608082015261029a7f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b031660a08201526102d17f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b031660c08201526103087f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b031660e082015261033f7f0000000000000000000000000000000000000000000000000000000000000000610e69565b6001600160a01b0390811661010083015260208201516040808401516060850151915163485cc95560e01b81528a851660048201528985166024820152929390929084169063485cc95590604401600060405180830381600087803b1580156103a757600080fd5b505af11580156103bb573d6000803e3d6000fd5b505060405163189acdbd60e31b81526001600160a01b0386811660048301528516925063c4d66de89150602401600060405180830381600087803b15801561040257600080fd5b505af1158015610416573d6000803e3d6000fd5b505060405163da35a26f60e01b8152600160048201526001600160a01b0386811660248301528416925063da35a26f9150604401600060405180830381600087803b15801561046457600080fd5b505af1158015610478573d6000803e3d6000fd5b505050608085015160405163485cc95560e01b81526001600160a01b0386811660048301528581166024830152909116915063485cc95590604401600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b50505060a085015160405163485cc95560e01b81526001600160a01b0386811660048301528581166024830152909116915063485cc95590604401600060405180830381600087803b15801561053657600080fd5b505af115801561054a573d6000803e3d6000fd5b50505060c085015160405163189acdbd60e31b81526001600160a01b038681166004830152909116915063c4d66de890602401600060405180830381600087803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b50505060e085015160405163189acdbd60e31b81526001600160a01b038681166004830152909116915063c4d66de890602401600060405180830381600087803b1580156105f857600080fd5b505af115801561060c573d6000803e3d6000fd5b505050508361010001516001600160a01b0316635aa5869b8888848860c00151888e6040518763ffffffff1660e01b815260040161064f96959493929190610ff6565b600060405180830381600087803b15801561066957600080fd5b505af115801561067d573d6000803e3d6000fd5b50505050610100840151604051635070e83760e01b81526001600160a01b03918216600482015290841690635070e83790602401600060405180830381600087803b1580156106cb57600080fd5b505af11580156106df573d6000803e3d6000fd5b505050506080840151604051637c11f15760e11b81526001600160a01b0391821660048201529084169063f823e2ae90602401600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b5050505060a0840151604051637c11f15760e11b81526001600160a01b0391821660048201529084169063f823e2ae90602401600060405180830381600087803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b5050505060e0840151604051637c11f15760e11b81526001600160a01b0391821660048201529084169063f823e2ae90602401600060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b505050506080840151604051632954e41b60e21b81526001600160a01b0391821660048201529084169063a553906c90602401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505060a0840151604051637f07e46b60e11b81526001600160a01b0391821660048201529084169063fe0fc8d690602401600060405180830381600087803b1580156108b057600080fd5b505af11580156108c4573d6000803e3d6000fd5b5050505060e0840151604051636817031b60e01b81526001600160a01b03918216600482015290841690636817031b90602401600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b505060405163e378b36760e01b81526000600482015260001960248201526001600160a01b038616925063e378b3679150604401600060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b50506040805161012081018252600660e082019081526563727970746f60d01b61010083015281526311e1a30060208201526323c346008183015263039387006060820152630bebc2006080820152600160a0820152685150ae84a8cdf0000060c08201529051632308fe0760e21b81526001600160a01b0385169350638c23f81c9250610a1891906004016110bb565b600060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b50506040805160e081018252600660a082019081526563727970746f60d01b60c083015281527f3465633339336163316565343438356639366563373336343666363565373436602082015260028183015260966060820152600f6080820152905163472ff8bb60e01b81526001600160a01b038516935063472ff8bb9250610ad29190600401611120565b600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b50505050806001600160a01b0316635c25f4c56040518060e001604052806040518060800160405280604b81526020016112a2604b913981526020016040518060400160405280600b81526020017f626974636f696e2c75736400000000000000000000000000000000000000000081525081526020016040518060800160405280735741306c21795fdcbb9b265ea0255f499dfe515c6001600160a01b0316815260200160006001600160a01b0316815260200160006002811115610bc857610bc8611170565b81526020016404a817c80081525081526020016317d7840081526020016000815260200160008152602001888152506040518263ffffffff1660e01b8152600401610c139190611186565b600060405180830381600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b5050505061010084015160405163a9059cbb60e01b81526001600160a01b03918216600482015267016345785d8a000060248201529089169063a9059cbb906044016020604051808303816000875af1158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190611251565b506001805460009182610cd88361127a565b9091555060008181526020818152604091829020885181546001600160a01b039182167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178355928a0151600183018054918316918516919091179055838a015160028301805491831691851691909117905560608a015160038301805491831691851691909117905560808a015160048301805482841690861617905560a08b015160058401805482851690871617905560c08c015160068501805482861690881617905560e08d01516007860180548287169089161790556101008e015160089096018054958716959097169490941790955594519596507f69d7c8b30e729b77173bbd236d148d338ed7a552f6e8f94851df8390b7afb36a95610e559588958c958c958c95949091909889526001600160a01b0397881660208a0152958716604089015293861660608801529185166080870152841660a0860152831660c0850152821660e0840152166101008201526101200190565b60405180910390a150505050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610f235760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6001600160a01b0381168114610f3d57600080fd5b50565b600080600080600060808688031215610f5857600080fd5b8535610f6381610f28565b94506020860135610f7381610f28565b9350604086013567ffffffffffffffff80821115610f9057600080fd5b818801915088601f830112610fa457600080fd5b813581811115610fb357600080fd5b8960208260051b8501011115610fc857600080fd5b96999598505060200195606001359392505050565b600060208284031215610fef57600080fd5b5035919050565b60a0808252810186905260008760c08301825b8981101561103957823561101c81610f28565b6001600160a01b0316825260209283019290910190600101611009565b506001600160a01b03978816602085015295871660408401525050918416606083015290921660809092019190915292915050565b6000815180845260005b8181101561109457602081850181015186830182015201611078565b818111156110a6576000602083870101525b50601f01601f19169290920160200192915050565b602081526000825160e060208401526110d861010084018261106e565b9050602084015160408401526040840151606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b602081526000825160a0602084015261113c60c084018261106e565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b634e487b7160e01b600052602160045260246000fd5b60208152600082516101408060208501526111a561016085018361106e565b91506020850151601f198584030160408601526111c2838261106e565b92505060408501516001600160a01b038082511660608701528060208301511660808701525060408101516003811061120b57634e487b7160e01b600052602160045260246000fd5b8060a087015250606081015160c086015250606085015160e0850152608085015161010085015260a085015161012085015260c085015181850152508091505092915050565b60006020828403121561126357600080fd5b8151801515811461127357600080fd5b9392505050565b60006001820161129a57634e487b7160e01b600052601160045260246000fd5b506001019056fe68747470733a2f2f6170692e636f696e6765636b6f2e636f6d2f6170692f76332f73696d706c652f70726963653f6964733d626974636f696e2676735f63757272656e636965733d757364a26469706673582212203a93ce21ce9ec5d0eb06bef998059397639b0cbe8ebb445368507980c11916d964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3542,
        "contract": "contracts/KravFactory.sol:KravFactory",
        "label": "quantos",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Quanto)3521_storage)"
      },
      {
        "astId": 3544,
        "contract": "contracts/KravFactory.sol:KravFactory",
        "label": "quantosCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Quanto)3521_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct KravFactory.Quanto)",
        "numberOfBytes": "32",
        "value": "t_struct(Quanto)3521_storage"
      },
      "t_struct(Quanto)3521_storage": {
        "encoding": "inplace",
        "label": "struct KravFactory.Quanto",
        "members": [
          {
            "astId": 3504,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "tokenT",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3506,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "storageT",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3508,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "pairInfoT",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3510,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "pairStorageT",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3512,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "tradingT",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3514,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "callbackT",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3516,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "rewardT",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3518,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "vaultT",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3520,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "priceAggregatorT",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
