{
  "address": "0xF9d56982944b344FF3632B4eE6105C2Ea6E5e931",
  "abi": [
    {
      "inputs": [
        { "internalType": "address", "name": "_storageT", "type": "address" },
        { "internalType": "address", "name": "_pairInfoT", "type": "address" },
        { "internalType": "address", "name": "_pairStorageT", "type": "address" },
        { "internalType": "address", "name": "_tradingT", "type": "address" },
        { "internalType": "address", "name": "_callbackT", "type": "address" },
        { "internalType": "address", "name": "_rewardT", "type": "address" },
        { "internalType": "address", "name": "_vaultT", "type": "address" },
        { "internalType": "address", "name": "_priceAggregatorT", "type": "address" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "", "type": "uint256" },
        { "indexed": false, "internalType": "int256", "name": "", "type": "int256" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" }
      ],
      "name": "QuantoCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "address", "name": "trader", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "referral", "type": "address" }
      ],
      "name": "Referral",
      "type": "event"
    },
    {
      "inputs": [
        { "internalType": "contract TokenInterfaceV5", "name": "_token", "type": "address" },
        { "internalType": "contract TokenInterfaceV5", "name": "_linkToken", "type": "address" },
        { "internalType": "address[]", "name": "_nodes", "type": "address[]" },
        { "internalType": "int256", "name": "proportionBTC", "type": "int256" },
        { "internalType": "uint256", "name": "_depositAmount", "type": "uint256" }
      ],
      "name": "createQuanto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "isPriceAggregator",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "isStorage",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "isTrading",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "numReferral",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "quantos",
      "outputs": [
        { "internalType": "address", "name": "tokenT", "type": "address" },
        { "internalType": "address", "name": "storageT", "type": "address" },
        { "internalType": "address", "name": "pairInfoT", "type": "address" },
        { "internalType": "address", "name": "pairStorageT", "type": "address" },
        { "internalType": "address", "name": "tradingT", "type": "address" },
        { "internalType": "address", "name": "callbackT", "type": "address" },
        { "internalType": "address", "name": "rewardT", "type": "address" },
        { "internalType": "address", "name": "vaultT", "type": "address" },
        { "internalType": "address", "name": "priceAggregatorT", "type": "address" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quantosCount",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "referrals",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_trader", "type": "address" },
        { "internalType": "address", "name": "_referral", "type": "address" }
      ],
      "name": "storeReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "contract TokenInterfaceV5", "name": "_token", "type": "address" },
        { "internalType": "address", "name": "_from", "type": "address" },
        { "internalType": "address", "name": "_to", "type": "address" },
        { "internalType": "uint256", "name": "_amount", "type": "uint256" }
      ],
      "name": "transferTokenProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc13ebd5d4f17e68362142cc3fb98bd0bb96867506c6317ad03d7a2fbca58d1be",
  "receipt": {
    "to": null,
    "from": "0x284f1b4a9C4B9495F79de62a55337e0a07cCF3fF",
    "contractAddress": "0x67F2Dfcc3b965A541E88A558375B8517b60c4A38",
    "transactionIndex": 37,
    "gasUsed": "1384609",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x532e5362c8b5461c0c50e04ac4fb7b8e4375cba54d74011c57e37f87f999741e",
    "transactionHash": "0xc13ebd5d4f17e68362142cc3fb98bd0bb96867506c6317ad03d7a2fbca58d1be",
    "logs": [],
    "blockNumber": 3967129,
    "cumulativeGasUsed": "5818567",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0A9475f047DFc96E23343F01eeBbce56497f7520",
    "0x12EADdBF9133F2cde1aFb999CC17966B998aEac3",
    "0xaF03070d18f5c1af470deAAF1618b2Dd4daE1CB1",
    "0x8BD74402a46A450EDF0cbCEc83F77c428d77A734",
    "0x31F87c2B402DD2B85f9567e0B38BE9bc69BB439d",
    "0x57f370bD0aA4901e67e1108568A7669a481d016b",
    "0x4f1130863581eB00c33abdea3E2f0669209E56f3",
    "0x17a26d994800Faf302CE033B4d49B2FD12bE669b"
  ],
  "numDeployments": 1,
  "solcInputHash": "039b3e53832cf18e00acfbb07bb27199",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairInfoT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairStorageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_callbackT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceAggregatorT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"QuantoCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_nodes\",\"type\":\"address[]\"},{\"internalType\":\"int256\",\"name\":\"proportionBTC\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"createQuanto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPriceAggregator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairInfoT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairStorageT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceAggregatorT\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantosCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KravFactory.sol\":\"KravFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"contracts/KravFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport './interfaces/TokenInterfaceV5.sol';\\nimport './interfaces/StorageInterfaceV5.sol';\\nimport './interfaces/GNSPairInfosInterfaceV6.sol';\\nimport './interfaces/PairsStorageInterfaceV6.sol';\\nimport './interfaces/VaultInterfaceV5.sol';\\n\\nimport '@openzeppelin/contracts/proxy/Clones.sol';\\n\\ncontract KravFactory {\\n\\n    struct Quanto {\\n        address tokenT;\\n        address storageT;\\n        address pairInfoT;\\n        address pairStorageT;\\n        address tradingT;\\n        address callbackT;\\n        address rewardT;\\n        address vaultT;\\n        address priceAggregatorT;\\n    }\\n\\n    address immutable storageT;\\n    address immutable pairInfoT;\\n    address immutable pairStorageT;\\n    address immutable tradingT;\\n    address immutable callbackT;\\n    address immutable rewardT;\\n    address immutable vaultT;\\n    address immutable priceAggregatorT;\\n\\n    mapping(uint => Quanto) public quantos;\\n    uint256 public quantosCount;\\n    mapping(address => bool) public isStorage;\\n    mapping(address => bool) public isPriceAggregator;\\n\\n    event QuantoCreated(uint256, int256, address, address, address, address, address, address, address, address, address);\\n\\n    constructor(\\n        address _storageT,\\n        address _pairInfoT,\\n        address _pairStorageT,\\n        address _tradingT,\\n        address _callbackT,\\n        address _rewardT,\\n        address _vaultT,\\n        address _priceAggregatorT\\n    ) {\\n        storageT = _storageT;\\n        pairInfoT = _pairInfoT;\\n        pairStorageT = _pairStorageT;\\n        tradingT = _tradingT;\\n        callbackT = _callbackT;\\n        rewardT = _rewardT;\\n        vaultT = _vaultT;\\n        priceAggregatorT = _priceAggregatorT;\\n    }\\n\\n    function createQuanto(TokenInterfaceV5 _token, TokenInterfaceV5 _linkToken, address[] calldata _nodes, int proportionBTC, uint256 _depositAmount) external {\\n        Quanto memory quanto;\\n\\n        quanto.tokenT = address(_token);\\n        quanto.storageT = Clones.clone(storageT);\\n        quanto.pairInfoT = Clones.clone(pairInfoT);\\n        quanto.pairStorageT = Clones.clone(pairStorageT);\\n        quanto.tradingT = Clones.clone(tradingT);\\n        quanto.callbackT = Clones.clone(callbackT);\\n        quanto.rewardT = Clones.clone(rewardT);\\n        quanto.vaultT = Clones.clone(vaultT);\\n        quanto.priceAggregatorT = Clones.clone(priceAggregatorT);\\n\\n        StorageInterfaceV5 _storage = StorageInterfaceV5(quanto.storageT);\\n        GNSPairInfosInterfaceV6 _pairInfo = GNSPairInfosInterfaceV6(quanto.pairInfoT);\\n        PairsStorageInterfaceV6 _pairStorage = PairsStorageInterfaceV6(quanto.pairStorageT);\\n\\n        _storage.initialize(KravFactoryInterface(address(this)), _token, _linkToken);\\n        _pairInfo.initialize(_storage);\\n        _pairStorage.initialize(1, _storage);\\n        TradingInterface(quanto.tradingT).initialize(_storage, _pairInfo);\\n        TradingInterface(quanto.callbackT).initialize(_storage, _pairInfo);\\n        NftRewardsInterfaceV6(quanto.rewardT).initialize(_storage);\\n        VaultInterfaceV5(quanto.vaultT).initialize(_storage);\\n        AggregatorInterfaceV6(quanto.priceAggregatorT).initialize(_nodes, _pairStorage, quanto.rewardT, _storage, address(_linkToken));\\n\\n        _storage.setPriceAggregator(quanto.priceAggregatorT);\\n        _storage.addTradingContract(quanto.tradingT);\\n        _storage.addTradingContract(quanto.callbackT);\\n        _storage.addTradingContract(quanto.vaultT);\\n        _storage.setTrading(quanto.tradingT);\\n        _storage.setCallbacks(quanto.callbackT);\\n        _storage.setVault(quanto.vaultT);\\n        _storage.setMaxOpenInterestDai(0, type(uint256).max);\\n\\n        _pairStorage.addFee(PairsStorageInterfaceV6.Fee(\\\"crypto\\\", 300000000, 600000000, 60000000, 200000000,1,1500000000000000000000));\\n        _pairStorage.addGroup(PairsStorageInterfaceV6.Group(\\\"crypto\\\",bytes32(0x3335303438333964343337663437383339333330353365386330333465363933),2,150,15));\\n        _pairStorage.addPair(PairsStorageInterfaceV6.Pair(\\\"BTC\\\",\\\"USD\\\",PairsStorageInterfaceV6.Feed(address(0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43),address(0),PairsStorageInterfaceV6.FeedCalculation.DEFAULT,20000000000), 400000000,0,0,proportionBTC));\\n\\n        // _linkToken.transfer(quanto.priceAggregatorT, 0.1 ether);\\n        isStorage[quanto.storageT] = true;\\n        isPriceAggregator[quanto.priceAggregatorT] = true;\\n\\n        // deposit token\\n        require(_token.transferFrom(msg.sender, address(this), _depositAmount));\\n        _token.approve(quanto.vaultT, _depositAmount);\\n        VaultInterfaceV5(quanto.vaultT).depositDaiFor(_depositAmount, msg.sender);\\n\\n        uint256 _index = quantosCount++;\\n        quantos[_index] = quanto;\\n        emit QuantoCreated(_index, proportionBTC, address(_token), address(_storage), address(_pairInfo), address(_pairStorage), quanto.tradingT, quanto.callbackT, quanto.rewardT, quanto.vaultT, quanto.priceAggregatorT);\\n    }\\n\\n    function transferTokenProxy(TokenInterfaceV5 _token, address _from, address _to, uint256 _amount) external {\\n        require(isStorage[msg.sender] || isPriceAggregator[msg.sender], '!storage && !aggregator');\\n        if (_from == address(this)) {\\n            require(_token.transfer(_to, _amount), 'failed to transfer');\\n        } else {\\n            require(_token.transferFrom(_from, _to, _amount), 'failed to transfer');\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb6e8f7e0cc8ae90f93690b9238c9002134967523fc9b8512c1393e05931471da\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface GNSPairInfosInterfaceV6{\\n    function maxNegativePnlOnOpenP() external view returns(uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice,   // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    ) external view returns(\\n        uint priceImpactP,      // PRECISION (%)\\n        uint priceAfterImpact   // PRECISION\\n    );\\n\\n   function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice,  // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns(uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral,   // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee    // 1e18 (DAI)\\n    ) external returns(uint); // 1e18 (DAI)\\n\\n    function initialize(StorageInterfaceV5) external;\\n}\",\"keccak256\":\"0xa5cd5f2a70169c406cc3daff4c11bc7725d29d5421a20718f906ee0abd96cf7d\",\"license\":\"MIT\"},\"contracts/interfaces/KravFactoryInterface.sol\":{\"content\":\"pragma solidity 0.8.14;\\n\\nimport \\\"./TokenInterfaceV5.sol\\\";\\n\\ninterface KravFactoryInterface {\\n    function transferTokenProxy(TokenInterfaceV5 _token, address _from, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x20d51fd58432952c4bd7a64e1904678abef3a8047d69ef5b68914dabfea7d74c\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xc15a2883e44dce70305e896f2492f485c77f1a01595a9bb42d2662a22cfa5274\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface PairsStorageInterfaceV6{\\n    struct Pair{\\n        string from;\\n        string to;\\n        Feed feed;\\n        uint spreadP;               // PRECISION\\n        uint groupIndex;\\n        uint feeIndex;\\n        int proportionBTC;          // 1000 -> ALT:BTC = 1000:1 ; -1000 -> ALT:BTC = 1:1000\\n    }\\n    struct Group{\\n        string name;\\n        bytes32 job;\\n        uint minLeverage;\\n        uint maxLeverage;\\n        uint maxCollateralP;        // % (of DAI vault current balance)\\n    }\\n    struct Fee{\\n        string name;\\n        uint openFeeP;              // PRECISION (% of leveraged pos)\\n        uint closeFeeP;             // PRECISION (% of leveraged pos)\\n        uint oracleFeeP;            // PRECISION (% of leveraged pos)\\n        uint nftLimitOrderFeeP;     // PRECISION (% of leveraged pos)\\n        uint referralFeeP;          // PRECISION (% of leveraged pos)\\n        uint minLevPosDai;          // 1e18 (collateral x leverage, useful for min fee)\\n    }\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function initialize(uint _currentOrderId, StorageInterfaceV5 _storageT) external;\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n    function addFee(Fee calldata _fee) external;\\n    function addGroup(Group calldata _group) external;\\n    function addPair(Pair calldata _pair) external;\\n}\",\"keccak256\":\"0xb74e43340921cf67175e86076cdd083672dfb39326a47847747ef2bfedd20ccb\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport './UniswapRouterInterfaceV5.sol';\\nimport './TokenInterfaceV5.sol';\\nimport './NftInterfaceV5.sol';\\nimport './VaultInterfaceV5.sol';\\nimport './PairsStorageInterfaceV6.sol';\\nimport \\\"./GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"./KravFactoryInterface.sol\\\";\\npragma solidity 0.8.14;\\n\\ninterface StorageInterfaceV5{\\n    enum LimitOrder { TP, SL, LIQ, OPEN }\\n    struct Trader{\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal;  // 1e18\\n    }\\n    struct Trade{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken;       // 1e18\\n        uint positionSizeDai;       // 1e18\\n        uint openPrice;             // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION\\n        uint sl;                    // PRECISION\\n    }\\n    struct TradeInfo{\\n        uint tokenId;\\n        uint tokenPriceDai;         // PRECISION\\n        uint openInterestDai;       // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder{\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize;          // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp;                    // PRECISION (%)\\n        uint sl;                    // PRECISION (%)\\n        uint minPrice;              // PRECISION\\n        uint maxPrice;              // PRECISION\\n        uint block;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingMarketOrder{\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice;           // PRECISION\\n        uint slippageP;             // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId;               // index in supportedTokens\\n    }\\n    struct PendingNftOrder{\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n    function initialize(KravFactoryInterface, TokenInterfaceV5, TokenInterfaceV5) external;\\n    function PRECISION() external pure returns(uint);\\n    function gov() external view returns(address);\\n    function dev() external view returns(address);\\n    function dai() external view returns(TokenInterfaceV5);\\n    // function token() external view returns(TokenInterfaceV5);\\n    function linkErc677() external view returns(TokenInterfaceV5);\\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\\n    function priceAggregator() external view returns(AggregatorInterfaceV6);\\n    function vault() external view returns(VaultInterfaceV5);\\n    function trading() external view returns(address);\\n    function callbacks() external view returns(address);\\n    function handleTokens(address,uint,bool) external;\\n    function transferDai(address, address, uint) external;\\n    function transferLinkToAggregator(address, uint, uint) external;\\n    function unregisterTrade(address, uint, uint) external;\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n    function storeReferral(address, address) external;\\n    function openTrades(address, uint, uint) external view returns(Trade memory);\\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\\n    function updateSl(address, uint, uint, uint) external;\\n    function updateTp(address, uint, uint, uint) external;\\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\\n    function spreadReductionsP(uint) external view returns(uint);\\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\\n    function maxSlP() external view returns(uint);\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\\n    function increaseNftRewards(uint, uint) external;\\n    function nftSuccessTimelock() external view returns(uint);\\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\\n    function setNftLastSuccess(uint) external;\\n    function updateTrade(Trade memory) external;\\n    function nftLastSuccess(uint) external view returns(uint);\\n    function unregisterPendingNftOrder(uint) external;\\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\\n    function distributeLpRewards(uint) external;\\n    function getReferral(address) external view returns(address);\\n    function increaseReferralRewards(address, uint) external;\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n    function setLeverageUnlocked(address, uint) external;\\n    function getLeverageUnlocked(address) external view returns(uint);\\n    function openLimitOrdersCount(address, uint) external view returns(uint);\\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\\n    function openTradesCount(address, uint) external view returns(uint);\\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\\n    function maxTradesPerPair() external view returns(uint);\\n    function maxTradesPerBlock() external view returns(uint);\\n    function tradesPerBlock(uint) external view returns(uint);\\n    function pendingOrderIdsCount(address) external view returns(uint);\\n    function maxPendingMarketOrders() external view returns(uint);\\n    function maxGainP() external view returns(uint);\\n    function defaultLeverageUnlocked() external view returns(uint);\\n    function openInterestDai(uint, uint) external view returns(uint);\\n    function getPendingOrderIds(address) external view returns(uint[] memory);\\n    function traders(address) external view returns(Trader memory);\\n    function nfts(uint) external view returns(NftInterfaceV5);\\n    function setPriceAggregator(address) external;\\n    function addTradingContract(address _trading) external;\\n    function setTrading(address _trading) external;\\n    function setCallbacks(address _callbacks) external;\\n    function setVault(address _vault) external;\\n    function setMaxOpenInterestDai(uint _pairIndex, uint _newMaxOpenInterest) external;\\n    function factory() external view returns(KravFactoryInterface);\\n}\\n\\ninterface AggregatorInterfaceV6{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function initialize(address[] memory, PairsStorageInterfaceV6, address, StorageInterfaceV5, address) external;\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function nftRewards() external view returns(NftRewardsInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceDai() external view returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function tokenDaiReservesLp() external view returns(uint, uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface NftRewardsInterfaceV6{\\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\\n    function initialize(StorageInterfaceV5 _storageT) external;\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\\n}\\n\\ninterface TradingInterface {\\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external;\\n}\",\"keccak256\":\"0xd8808232d2d5881c22f743ce6680281cfb465163da1de6c95eb75d3231030c4c\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x839cb0952ddb74fd2cc563cbc511a7f4cec56599cb7cc3502f97c32327f2fe58\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface UniswapRouterInterfaceV5{\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x366be084acb30ed686cc7f4999f30568ebdb11e6cc5909c6b24f95092b4dbddf\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface VaultInterfaceV5{\\n\\tfunction initialize(StorageInterfaceV5 _storageT) external;\\n\\tfunction sendDaiToTrader(address, uint) external;\\n\\tfunction receiveDaiFromTrader(address, uint, uint) external;\\n\\tfunction currentBalanceDai() external view returns(uint);\\n\\tfunction distributeRewardDai(uint) external;\\n\\tfunction depositDaiFor(uint _amount, address _account) external;\\n}\",\"keccak256\":\"0xac5be6546f4f03e71e0def15ff07f8193b7bd7609faa0b3dd78c05eea6f6dd2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 127,
        "contract": "contracts/KravFactory.sol:KravFactory",
        "label": "quantos",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Quanto)106_storage)"
      },
      {
        "astId": 129,
        "contract": "contracts/KravFactory.sol:KravFactory",
        "label": "quantosCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 133,
        "contract": "contracts/KravFactory.sol:KravFactory",
        "label": "isStorage",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 137,
        "contract": "contracts/KravFactory.sol:KravFactory",
        "label": "isPriceAggregator",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Quanto)106_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct KravFactory.Quanto)",
        "numberOfBytes": "32",
        "value": "t_struct(Quanto)106_storage"
      },
      "t_struct(Quanto)106_storage": {
        "encoding": "inplace",
        "label": "struct KravFactory.Quanto",
        "members": [
          {
            "astId": 89,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "tokenT",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 91,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "storageT",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 93,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "pairInfoT",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 95,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "pairStorageT",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 97,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "tradingT",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 99,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "callbackT",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 101,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "rewardT",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 103,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "vaultT",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 105,
            "contract": "contracts/KravFactory.sol:KravFactory",
            "label": "priceAggregatorT",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
